{
  "version": 3,
  "sources": ["../../../../../node_modules/parse-svg-path/index.js", "../../../../../node_modules/pixi.js/lib/app/ResizePlugin.mjs", "../../../../../node_modules/pixi.js/lib/app/TickerPlugin.mjs", "../../../../../node_modules/pixi.js/lib/assets/loader/parsers/LoaderParser.mjs", "../../../../../node_modules/pixi.js/lib/utils/path.mjs", "../../../../../node_modules/pixi.js/lib/assets/utils/convertToList.mjs", "../../../../../node_modules/pixi.js/lib/assets/utils/createStringVariations.mjs", "../../../../../node_modules/pixi.js/lib/assets/utils/isSingleItem.mjs", "../../../../../node_modules/pixi.js/lib/assets/resolver/Resolver.mjs", "../../../../../node_modules/pixi.js/lib/assets/utils/copySearchParams.mjs", "../../../../../node_modules/pixi.js/lib/spritesheet/Spritesheet.mjs", "../../../../../node_modules/pixi.js/lib/spritesheet/spritesheetAsset.mjs", "../../../../../node_modules/pixi.js/lib/spritesheet/init.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/utils/addMaskBounds.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/utils/addMaskLocalBounds.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMask.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/color/ColorMask.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/stencil/StencilMask.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/ImageSource.mjs", "../../../../../node_modules/pixi.js/lib/utils/browser/detectVideoAlphaMode.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/VideoSource.mjs", "../../../../../node_modules/pixi.js/lib/assets/cache/Cache.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/textureFrom.mjs", "../../../../../node_modules/pixi.js/lib/rendering/init.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/buildUvs.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/transformVertices.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/multiplyHexColors.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/BatchableGraphics.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildCircle.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/const.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/utils/getOrientationOfPoints.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildLine.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/utils/triangulateWithHoles.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildPolygon.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildRectangle.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildTriangle.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/utils/buildContextBatches.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContextSystem.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs", "../../../../../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs", "../../../../../node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/fill/FillGradient.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/fill/FillPattern.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/svg/SVGToGraphicsPath.mjs", "../../../../../node_modules/pixi.js/lib/maths/shapes/Circle.mjs", "../../../../../node_modules/pixi.js/lib/maths/shapes/Ellipse.mjs", "../../../../../node_modules/pixi.js/lib/maths/misc/squaredDistanceToLineSegment.mjs", "../../../../../node_modules/pixi.js/lib/maths/shapes/Polygon.mjs", "../../../../../node_modules/pixi.js/lib/maths/shapes/RoundedRectangle.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveBezier.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArc.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcTo.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcToSvg.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/path/roundShape.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/path/ShapePath.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/path/GraphicsPath.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/svg/SVGParser.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/utils/convertFillInputToFillStyle.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContext.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/utils/generateTextStyleKey.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/TextStyle.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/canvas/utils/fontStringFromTextStyle.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextMetrics.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/shared/Graphics.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs", "../../../../../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs", "../../../../../node_modules/pixi.js/lib/utils/browser/isSafari.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/HtmlTextStyle.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs", "../../../../../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs", "../../../../../node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs", "../../../../../node_modules/pixi.js/lib/filters/FilterPipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs", "../../../../../node_modules/pixi.js/lib/filters/FilterSystem.mjs"],
  "sourcesContent": ["\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n", "import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n\n", "import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n\n", "\"use strict\";\nvar LoaderParserPriority = /* @__PURE__ */ ((LoaderParserPriority2) => {\n  LoaderParserPriority2[LoaderParserPriority2[\"Low\"] = 0] = \"Low\";\n  LoaderParserPriority2[LoaderParserPriority2[\"Normal\"] = 1] = \"Normal\";\n  LoaderParserPriority2[LoaderParserPriority2[\"High\"] = 2] = \"High\";\n  return LoaderParserPriority2;\n})(LoaderParserPriority || {});\n\nexport { LoaderParserPriority };\n\n", "import { DOMAdapter } from '../environment/adapter.mjs';\n\n\"use strict\";\nfunction assertPath(path2) {\n  if (typeof path2 !== \"string\") {\n    throw new TypeError(`Path must be a string. Received ${JSON.stringify(path2)}`);\n  }\n}\nfunction removeUrlParams(url) {\n  const re = url.split(\"?\")[0];\n  return re.split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = -1;\n  for (let i = 0; i <= path2.length; ++i) {\n    if (i < path2.length) {\n      code = path2.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += \"/..\";\n          } else {\n            res = \"..\";\n          }\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += `/${path2.slice(lastSlash + 1, i)}`;\n        } else {\n          res = path2.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nconst path = {\n  /**\n   * Converts a path to posix format.\n   * @param path - The path to convert to posix\n   */\n  toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  /**\n   * Checks if the path is a URL e.g. http://, https://\n   * @param path - The path to check\n   */\n  isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  /**\n   * Checks if the path is a data URL\n   * @param path - The path to check\n   */\n  isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  /**\n   * Checks if the path is a blob URL\n   * @param path - The path to check\n   */\n  isBlobUrl(path2) {\n    return path2.startsWith(\"blob:\");\n  },\n  /**\n   * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n   * This will return true for windows file paths\n   * @param path - The path to check\n   */\n  hasProtocol(path2) {\n    return /^[^/:]+:/.test(this.toPosix(path2));\n  },\n  /**\n   * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n   * @param path - The path to get the protocol from\n   */\n  getProtocol(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    const matchFile = /^file:\\/\\/\\//.exec(path2);\n    if (matchFile) {\n      return matchFile[0];\n    }\n    const matchProtocol = /^[^/:]+:\\/{0,2}/.exec(path2);\n    if (matchProtocol) {\n      return matchProtocol[0];\n    }\n    return \"\";\n  },\n  /**\n   * Converts URL to an absolute path.\n   * When loading from a Web Worker, we must use absolute paths.\n   * If the URL is already absolute we return it as is\n   * If it's not, we convert it\n   * @param url - The URL to test\n   * @param customBaseUrl - The base URL to use\n   * @param customRootUrl - The root URL to use\n   */\n  toAbsolute(url, customBaseUrl, customRootUrl) {\n    assertPath(url);\n    if (this.isDataUrl(url) || this.isBlobUrl(url))\n      return url;\n    const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? DOMAdapter.get().getBaseUrl()));\n    const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n    url = this.toPosix(url);\n    if (url.startsWith(\"/\")) {\n      return path.join(rootUrl, url.slice(1));\n    }\n    const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n    return absolutePath;\n  },\n  /**\n   * Normalizes the given path, resolving '..' and '.' segments\n   * @param path - The path to normalize\n   */\n  normalize(path2) {\n    assertPath(path2);\n    if (path2.length === 0)\n      return \".\";\n    if (this.isDataUrl(path2) || this.isBlobUrl(path2))\n      return path2;\n    path2 = this.toPosix(path2);\n    let protocol = \"\";\n    const isAbsolute = path2.startsWith(\"/\");\n    if (this.hasProtocol(path2)) {\n      protocol = this.rootname(path2);\n      path2 = path2.slice(protocol.length);\n    }\n    const trailingSeparator = path2.endsWith(\"/\");\n    path2 = normalizeStringPosix(path2, false);\n    if (path2.length > 0 && trailingSeparator)\n      path2 += \"/\";\n    if (isAbsolute)\n      return `/${path2}`;\n    return protocol + path2;\n  },\n  /**\n   * Determines if path is an absolute path.\n   * Absolute paths can be urls, data urls, or paths on disk\n   * @param path - The path to test\n   */\n  isAbsolute(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    if (this.hasProtocol(path2))\n      return true;\n    return path2.startsWith(\"/\");\n  },\n  /**\n   * Joins all given path segments together using the platform-specific separator as a delimiter,\n   * then normalizes the resulting path\n   * @param segments - The segments of the path to join\n   */\n  join(...segments) {\n    if (segments.length === 0) {\n      return \".\";\n    }\n    let joined;\n    for (let i = 0; i < segments.length; ++i) {\n      const arg = segments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === void 0)\n          joined = arg;\n        else {\n          const prevArg = segments[i - 1] ?? \"\";\n          if (this.joinExtensions.includes(this.extname(prevArg).toLowerCase())) {\n            joined += `/../${arg}`;\n          } else {\n            joined += `/${arg}`;\n          }\n        }\n      }\n    }\n    if (joined === void 0) {\n      return \".\";\n    }\n    return this.normalize(joined);\n  },\n  /**\n   * Returns the directory name of a path\n   * @param path - The path to parse\n   */\n  dirname(path2) {\n    assertPath(path2);\n    if (path2.length === 0)\n      return \".\";\n    path2 = this.toPosix(path2);\n    let code = path2.charCodeAt(0);\n    const hasRoot = code === 47;\n    let end = -1;\n    let matchedSlash = true;\n    const proto = this.getProtocol(path2);\n    const origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (let i = path2.length - 1; i >= 1; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        matchedSlash = false;\n      }\n    }\n    if (end === -1)\n      return hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto;\n    if (hasRoot && end === 1)\n      return \"//\";\n    return proto + path2.slice(0, end);\n  },\n  /**\n   * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n   * @param path - The path to parse\n   */\n  rootname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    let root = \"\";\n    if (path2.startsWith(\"/\"))\n      root = \"/\";\n    else {\n      root = this.getProtocol(path2);\n    }\n    if (this.isUrl(path2)) {\n      const index = path2.indexOf(\"/\", root.length);\n      if (index !== -1) {\n        root = path2.slice(0, index);\n      } else\n        root = path2;\n      if (!root.endsWith(\"/\"))\n        root += \"/\";\n    }\n    return root;\n  },\n  /**\n   * Returns the last portion of a path\n   * @param path - The path to test\n   * @param ext - Optional extension to remove\n   */\n  basename(path2, ext) {\n    assertPath(path2);\n    if (ext)\n      assertPath(ext);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2)\n        return \"\";\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        const code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                end = i;\n              }\n            } else {\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end)\n        end = firstNonSlashEnd;\n      else if (end === -1)\n        end = path2.length;\n      return path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i) {\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1)\n      return \"\";\n    return path2.slice(start, end);\n  },\n  /**\n   * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n   * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n   * the first character of the basename of path, an empty string is returned.\n   * @param path - The path to parse\n   */\n  extname(path2) {\n    assertPath(path2);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let preDotState = 0;\n    for (let i = path2.length - 1; i >= 0; --i) {\n      const code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return \"\";\n    }\n    return path2.slice(startDot, end);\n  },\n  /**\n   * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n   * @param path - The path to parse\n   */\n  parse(path2) {\n    assertPath(path2);\n    const ret = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n    if (path2.length === 0)\n      return ret;\n    path2 = removeUrlParams(this.toPosix(path2));\n    let code = path2.charCodeAt(0);\n    const isAbsolute = this.isAbsolute(path2);\n    let start;\n    const protocol = \"\";\n    ret.root = this.rootname(path2);\n    if (isAbsolute || this.hasProtocol(path2)) {\n      start = 1;\n    } else {\n      start = 0;\n    }\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path2.length - 1;\n    let preDotState = 0;\n    for (; i >= start; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute)\n          ret.base = ret.name = path2.slice(1, end);\n        else\n          ret.base = ret.name = path2.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path2.slice(1, startDot);\n        ret.base = path2.slice(1, end);\n      } else {\n        ret.name = path2.slice(startPart, startDot);\n        ret.base = path2.slice(startPart, end);\n      }\n      ret.ext = path2.slice(startDot, end);\n    }\n    ret.dir = this.dirname(path2);\n    if (protocol)\n      ret.dir = protocol + ret.dir;\n    return ret;\n  },\n  sep: \"/\",\n  delimiter: \":\",\n  joinExtensions: [\".html\"]\n};\n\nexport { path };\n\n", "\"use strict\";\nconst convertToList = (input, transform, forceTransform = false) => {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  if (!transform) {\n    return input;\n  }\n  return input.map((item) => {\n    if (typeof item === \"string\" || forceTransform) {\n      return transform(item);\n    }\n    return item;\n  });\n};\n\nexport { convertToList };\n\n", "\"use strict\";\nfunction processX(base, ids, depth, result, tags) {\n  const id = ids[depth];\n  for (let i = 0; i < id.length; i++) {\n    const value = id[i];\n    if (depth < ids.length - 1) {\n      processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n    } else {\n      tags.push(base.replace(result[depth], value));\n    }\n  }\n}\nfunction createStringVariations(string) {\n  const regex = /\\{(.*?)\\}/g;\n  const result = string.match(regex);\n  const tags = [];\n  if (result) {\n    const ids = [];\n    result.forEach((vars) => {\n      const split = vars.substring(1, vars.length - 1).split(\",\");\n      ids.push(split);\n    });\n    processX(string, ids, 0, result, tags);\n  } else {\n    tags.push(string);\n  }\n  return tags;\n}\n\nexport { createStringVariations };\n\n", "\"use strict\";\nconst isSingleItem = (item) => !Array.isArray(item);\n\nexport { isSingleItem };\n\n", "import { warn } from '../../utils/logging/warn.mjs';\nimport { path } from '../../utils/path.mjs';\nimport { convertToList } from '../utils/convertToList.mjs';\nimport { createStringVariations } from '../utils/createStringVariations.mjs';\nimport { isSingleItem } from '../utils/isSingleItem.mjs';\n\n\"use strict\";\nclass Resolver {\n  constructor() {\n    this._defaultBundleIdentifierOptions = {\n      connector: \"-\",\n      createBundleAssetId: (bundleId, assetId) => `${bundleId}${this._bundleIdConnector}${assetId}`,\n      extractAssetIdFromBundle: (bundleId, assetBundleId) => assetBundleId.replace(`${bundleId}${this._bundleIdConnector}`, \"\")\n    };\n    /** The character that is used to connect the bundleId and the assetId when generating a bundle asset id key */\n    this._bundleIdConnector = this._defaultBundleIdentifierOptions.connector;\n    /**\n     * A function that generates a bundle asset id key from a bundleId and an assetId\n     * @param bundleId - the bundleId\n     * @param assetId  - the assetId\n     * @returns the bundle asset id key\n     */\n    this._createBundleAssetId = this._defaultBundleIdentifierOptions.createBundleAssetId;\n    /**\n     * A function that generates an assetId from a bundle asset id key. This is the reverse of generateBundleAssetId\n     * @param bundleId - the bundleId\n     * @param assetBundleId - the bundle asset id key\n     * @returns the assetId\n     */\n    this._extractAssetIdFromBundle = this._defaultBundleIdentifierOptions.extractAssetIdFromBundle;\n    this._assetMap = {};\n    this._preferredOrder = [];\n    this._parsers = [];\n    this._resolverHash = {};\n    this._bundles = {};\n  }\n  /**\n   * Override how the resolver deals with generating bundle ids.\n   * must be called before any bundles are added\n   * @param bundleIdentifier - the bundle identifier options\n   */\n  setBundleIdentifier(bundleIdentifier) {\n    this._bundleIdConnector = bundleIdentifier.connector ?? this._bundleIdConnector;\n    this._createBundleAssetId = bundleIdentifier.createBundleAssetId ?? this._createBundleAssetId;\n    this._extractAssetIdFromBundle = bundleIdentifier.extractAssetIdFromBundle ?? this._extractAssetIdFromBundle;\n    if (this._extractAssetIdFromBundle(\"foo\", this._createBundleAssetId(\"foo\", \"bar\")) !== \"bar\") {\n      throw new Error(\"[Resolver] GenerateBundleAssetId are not working correctly\");\n    }\n  }\n  /**\n   * Let the resolver know which assets you prefer to use when resolving assets.\n   * Multiple prefer user defined rules can be added.\n   * @example\n   * resolver.prefer({\n   *     // first look for something with the correct format, and then then correct resolution\n   *     priority: ['format', 'resolution'],\n   *     params:{\n   *         format:'webp', // prefer webp images\n   *         resolution: 2, // prefer a resolution of 2\n   *     }\n   * })\n   * resolver.add('foo', ['bar@2x.webp', 'bar@2x.png', 'bar.webp', 'bar.png']);\n   * resolver.resolveUrl('foo') // => 'bar@2x.webp'\n   * @param preferOrders - the prefer options\n   */\n  prefer(...preferOrders) {\n    preferOrders.forEach((prefer) => {\n      this._preferredOrder.push(prefer);\n      if (!prefer.priority) {\n        prefer.priority = Object.keys(prefer.params);\n      }\n    });\n    this._resolverHash = {};\n  }\n  /**\n   * Set the base path to prepend to all urls when resolving\n   * @example\n   * resolver.basePath = 'https://home.com/';\n   * resolver.add('foo', 'bar.ong');\n   * resolver.resolveUrl('foo', 'bar.png'); // => 'https://home.com/bar.png'\n   * @param basePath - the base path to use\n   */\n  set basePath(basePath) {\n    this._basePath = basePath;\n  }\n  get basePath() {\n    return this._basePath;\n  }\n  /**\n   * Set the root path for root-relative URLs. By default the `basePath`'s root is used. If no `basePath` is set, then the\n   * default value for browsers is `window.location.origin`\n   * @example\n   * // Application hosted on https://home.com/some-path/index.html\n   * resolver.basePath = 'https://home.com/some-path/';\n   * resolver.rootPath = 'https://home.com/';\n   * resolver.add('foo', '/bar.png');\n   * resolver.resolveUrl('foo', '/bar.png'); // => 'https://home.com/bar.png'\n   * @param rootPath - the root path to use\n   */\n  set rootPath(rootPath) {\n    this._rootPath = rootPath;\n  }\n  get rootPath() {\n    return this._rootPath;\n  }\n  /**\n   * All the active URL parsers that help the parser to extract information and create\n   * an asset object-based on parsing the URL itself.\n   *\n   * Can be added using the extensions API\n   * @example\n   * resolver.add('foo', [\n   *     {\n   *         resolution: 2,\n   *         format: 'png',\n   *         src: 'image@2x.png',\n   *     },\n   *     {\n   *         resolution:1,\n   *         format:'png',\n   *         src: 'image.png',\n   *     },\n   * ]);\n   *\n   * // With a url parser the information such as resolution and file format could extracted from the url itself:\n   * extensions.add({\n   *     extension: ExtensionType.ResolveParser,\n   *     test: loadTextures.test, // test if url ends in an image\n   *     parse: (value: string) =>\n   *     ({\n   *         resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n   *         format: value.split('.').pop(),\n   *         src: value,\n   *     }),\n   * });\n   *\n   * // Now resolution and format can be extracted from the url\n   * resolver.add('foo', [\n   *     'image@2x.png',\n   *     'image.png',\n   * ]);\n   */\n  get parsers() {\n    return this._parsers;\n  }\n  /** Used for testing, this resets the resolver to its initial state */\n  reset() {\n    this.setBundleIdentifier(this._defaultBundleIdentifierOptions);\n    this._assetMap = {};\n    this._preferredOrder = [];\n    this._resolverHash = {};\n    this._rootPath = null;\n    this._basePath = null;\n    this._manifest = null;\n    this._bundles = {};\n    this._defaultSearchParams = null;\n  }\n  /**\n   * Sets the default URL search parameters for the URL resolver. The urls can be specified as a string or an object.\n   * @param searchParams - the default url parameters to append when resolving urls\n   */\n  setDefaultSearchParams(searchParams) {\n    if (typeof searchParams === \"string\") {\n      this._defaultSearchParams = searchParams;\n    } else {\n      const queryValues = searchParams;\n      this._defaultSearchParams = Object.keys(queryValues).map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(queryValues[key])}`).join(\"&\");\n    }\n  }\n  /**\n   * Returns the aliases for a given asset\n   * @param asset - the asset to get the aliases for\n   */\n  getAlias(asset) {\n    const { alias, src } = asset;\n    const aliasesToUse = convertToList(\n      alias || src,\n      (value) => {\n        if (typeof value === \"string\")\n          return value;\n        if (Array.isArray(value))\n          return value.map((v) => v?.src ?? v);\n        if (value?.src)\n          return value.src;\n        return value;\n      },\n      true\n    );\n    return aliasesToUse;\n  }\n  /**\n   * Add a manifest to the asset resolver. This is a nice way to add all the asset information in one go.\n   * generally a manifest would be built using a tool.\n   * @param manifest - the manifest to add to the resolver\n   */\n  addManifest(manifest) {\n    if (this._manifest) {\n      warn(\"[Resolver] Manifest already exists, this will be overwritten\");\n    }\n    this._manifest = manifest;\n    manifest.bundles.forEach((bundle) => {\n      this.addBundle(bundle.name, bundle.assets);\n    });\n  }\n  /**\n   * This adds a bundle of assets in one go so that you can resolve them as a group.\n   * For example you could add a bundle for each screen in you pixi app\n   * @example\n   * resolver.addBundle('animals', [\n   *  { alias: 'bunny', src: 'bunny.png' },\n   *  { alias: 'chicken', src: 'chicken.png' },\n   *  { alias: 'thumper', src: 'thumper.png' },\n   * ]);\n   * // or\n   * resolver.addBundle('animals', {\n   *     bunny: 'bunny.png',\n   *     chicken: 'chicken.png',\n   *     thumper: 'thumper.png',\n   * });\n   *\n   * const resolvedAssets = await resolver.resolveBundle('animals');\n   * @param bundleId - The id of the bundle to add\n   * @param assets - A record of the asset or assets that will be chosen from when loading via the specified key\n   */\n  addBundle(bundleId, assets) {\n    const assetNames = [];\n    let convertedAssets = assets;\n    if (!Array.isArray(assets)) {\n      convertedAssets = Object.entries(assets).map(([alias, src]) => {\n        if (typeof src === \"string\" || Array.isArray(src)) {\n          return { alias, src };\n        }\n        return { alias, ...src };\n      });\n    }\n    convertedAssets.forEach((asset) => {\n      const srcs = asset.src;\n      const aliases = asset.alias;\n      let ids;\n      if (typeof aliases === \"string\") {\n        const bundleAssetId = this._createBundleAssetId(bundleId, aliases);\n        assetNames.push(bundleAssetId);\n        ids = [aliases, bundleAssetId];\n      } else {\n        const bundleIds = aliases.map((name) => this._createBundleAssetId(bundleId, name));\n        assetNames.push(...bundleIds);\n        ids = [...aliases, ...bundleIds];\n      }\n      this.add({\n        ...asset,\n        ...{\n          alias: ids,\n          src: srcs\n        }\n      });\n    });\n    this._bundles[bundleId] = assetNames;\n  }\n  /**\n   * Tells the resolver what keys are associated with witch asset.\n   * The most important thing the resolver does\n   * @example\n   * // Single key, single asset:\n   * resolver.add({alias: 'foo', src: 'bar.png');\n   * resolver.resolveUrl('foo') // => 'bar.png'\n   *\n   * // Multiple keys, single asset:\n   * resolver.add({alias: ['foo', 'boo'], src: 'bar.png'});\n   * resolver.resolveUrl('foo') // => 'bar.png'\n   * resolver.resolveUrl('boo') // => 'bar.png'\n   *\n   * // Multiple keys, multiple assets:\n   * resolver.add({alias: ['foo', 'boo'], src: ['bar.png', 'bar.webp']});\n   * resolver.resolveUrl('foo') // => 'bar.png'\n   *\n   * // Add custom data attached to the resolver\n   * Resolver.add({\n   *     alias: 'bunnyBooBooSmooth',\n   *     src: 'bunny{png,webp}',\n   *     data: { scaleMode:SCALE_MODES.NEAREST }, // Base texture options\n   * });\n   *\n   * resolver.resolve('bunnyBooBooSmooth') // => { src: 'bunny.png', data: { scaleMode: SCALE_MODES.NEAREST } }\n   * @param aliases - the UnresolvedAsset or array of UnresolvedAssets to add to the resolver\n   */\n  add(aliases) {\n    const assets = [];\n    if (Array.isArray(aliases)) {\n      assets.push(...aliases);\n    } else {\n      assets.push(aliases);\n    }\n    let keyCheck;\n    keyCheck = (key) => {\n      if (this.hasKey(key)) {\n        warn(`[Resolver] already has key: ${key} overwriting`);\n      }\n    };\n    const assetArray = convertToList(assets);\n    assetArray.forEach((asset) => {\n      const { src } = asset;\n      let { data, format, loadParser } = asset;\n      const srcsToUse = convertToList(src).map((src2) => {\n        if (typeof src2 === \"string\") {\n          return createStringVariations(src2);\n        }\n        return Array.isArray(src2) ? src2 : [src2];\n      });\n      const aliasesToUse = this.getAlias(asset);\n      Array.isArray(aliasesToUse) ? aliasesToUse.forEach(keyCheck) : keyCheck(aliasesToUse);\n      const resolvedAssets = [];\n      srcsToUse.forEach((srcs) => {\n        srcs.forEach((src2) => {\n          let formattedAsset = {};\n          if (typeof src2 !== \"object\") {\n            formattedAsset.src = src2;\n            for (let i = 0; i < this._parsers.length; i++) {\n              const parser = this._parsers[i];\n              if (parser.test(src2)) {\n                formattedAsset = parser.parse(src2);\n                break;\n              }\n            }\n          } else {\n            data = src2.data ?? data;\n            format = src2.format ?? format;\n            loadParser = src2.loadParser ?? loadParser;\n            formattedAsset = {\n              ...formattedAsset,\n              ...src2\n            };\n          }\n          if (!aliasesToUse) {\n            throw new Error(`[Resolver] alias is undefined for this asset: ${formattedAsset.src}`);\n          }\n          formattedAsset = this._buildResolvedAsset(formattedAsset, {\n            aliases: aliasesToUse,\n            data,\n            format,\n            loadParser\n          });\n          resolvedAssets.push(formattedAsset);\n        });\n      });\n      aliasesToUse.forEach((alias) => {\n        this._assetMap[alias] = resolvedAssets;\n      });\n    });\n  }\n  // TODO: this needs an overload like load did in Assets\n  /**\n   * If the resolver has had a manifest set via setManifest, this will return the assets urls for\n   * a given bundleId or bundleIds.\n   * @example\n   * // Manifest Example\n   * const manifest = {\n   *     bundles: [\n   *         {\n   *             name: 'load-screen',\n   *             assets: [\n   *                 {\n   *                     alias: 'background',\n   *                     src: 'sunset.png',\n   *                 },\n   *                 {\n   *                     alias: 'bar',\n   *                     src: 'load-bar.{png,webp}',\n   *                 },\n   *             ],\n   *         },\n   *         {\n   *             name: 'game-screen',\n   *             assets: [\n   *                 {\n   *                     alias: 'character',\n   *                     src: 'robot.png',\n   *                 },\n   *                 {\n   *                     alias: 'enemy',\n   *                     src: 'bad-guy.png',\n   *                 },\n   *             ],\n   *         },\n   *     ]\n   * };\n   *\n   * resolver.setManifest(manifest);\n   * const resolved = resolver.resolveBundle('load-screen');\n   * @param bundleIds - The bundle ids to resolve\n   * @returns All the bundles assets or a hash of assets for each bundle specified\n   */\n  resolveBundle(bundleIds) {\n    const singleAsset = isSingleItem(bundleIds);\n    bundleIds = convertToList(bundleIds);\n    const out = {};\n    bundleIds.forEach((bundleId) => {\n      const assetNames = this._bundles[bundleId];\n      if (assetNames) {\n        const results = this.resolve(assetNames);\n        const assets = {};\n        for (const key in results) {\n          const asset = results[key];\n          assets[this._extractAssetIdFromBundle(bundleId, key)] = asset;\n        }\n        out[bundleId] = assets;\n      }\n    });\n    return singleAsset ? out[bundleIds[0]] : out;\n  }\n  /**\n   * Does exactly what resolve does, but returns just the URL rather than the whole asset object\n   * @param key - The key or keys to resolve\n   * @returns - The URLs associated with the key(s)\n   */\n  resolveUrl(key) {\n    const result = this.resolve(key);\n    if (typeof key !== \"string\") {\n      const out = {};\n      for (const i in result) {\n        out[i] = result[i].src;\n      }\n      return out;\n    }\n    return result.src;\n  }\n  resolve(keys) {\n    const singleAsset = isSingleItem(keys);\n    keys = convertToList(keys);\n    const result = {};\n    keys.forEach((key) => {\n      if (!this._resolverHash[key]) {\n        if (this._assetMap[key]) {\n          let assets = this._assetMap[key];\n          const preferredOrder = this._getPreferredOrder(assets);\n          preferredOrder?.priority.forEach((priorityKey) => {\n            preferredOrder.params[priorityKey].forEach((value) => {\n              const filteredAssets = assets.filter((asset) => {\n                if (asset[priorityKey]) {\n                  return asset[priorityKey] === value;\n                }\n                return false;\n              });\n              if (filteredAssets.length) {\n                assets = filteredAssets;\n              }\n            });\n          });\n          this._resolverHash[key] = assets[0];\n        } else {\n          this._resolverHash[key] = this._buildResolvedAsset({\n            alias: [key],\n            src: key\n          }, {});\n        }\n      }\n      result[key] = this._resolverHash[key];\n    });\n    return singleAsset ? result[keys[0]] : result;\n  }\n  /**\n   * Checks if an asset with a given key exists in the resolver\n   * @param key - The key of the asset\n   */\n  hasKey(key) {\n    return !!this._assetMap[key];\n  }\n  /**\n   * Checks if a bundle with the given key exists in the resolver\n   * @param key - The key of the bundle\n   */\n  hasBundle(key) {\n    return !!this._bundles[key];\n  }\n  /**\n   * Internal function for figuring out what prefer criteria an asset should use.\n   * @param assets\n   */\n  _getPreferredOrder(assets) {\n    for (let i = 0; i < assets.length; i++) {\n      const asset = assets[0];\n      const preferred = this._preferredOrder.find((preference) => preference.params.format.includes(asset.format));\n      if (preferred) {\n        return preferred;\n      }\n    }\n    return this._preferredOrder[0];\n  }\n  /**\n   * Appends the default url parameters to the url\n   * @param url - The url to append the default parameters to\n   * @returns - The url with the default parameters appended\n   */\n  _appendDefaultSearchParams(url) {\n    if (!this._defaultSearchParams)\n      return url;\n    const paramConnector = /\\?/.test(url) ? \"&\" : \"?\";\n    return `${url}${paramConnector}${this._defaultSearchParams}`;\n  }\n  _buildResolvedAsset(formattedAsset, data) {\n    const { aliases, data: assetData, loadParser, format } = data;\n    if (this._basePath || this._rootPath) {\n      formattedAsset.src = path.toAbsolute(formattedAsset.src, this._basePath, this._rootPath);\n    }\n    formattedAsset.alias = aliases ?? formattedAsset.alias ?? [formattedAsset.src];\n    formattedAsset.src = this._appendDefaultSearchParams(formattedAsset.src);\n    formattedAsset.data = { ...assetData || {}, ...formattedAsset.data };\n    formattedAsset.loadParser = loadParser ?? formattedAsset.loadParser;\n    formattedAsset.format = format ?? formattedAsset.format ?? getUrlExtension(formattedAsset.src);\n    return formattedAsset;\n  }\n}\n/**\n * The prefix that denotes a URL is for a retina asset.\n * @static\n * @name RETINA_PREFIX\n * @type {RegExp}\n * @default /@([0-9\\.]+)x/\n * @example `@2x`\n */\nResolver.RETINA_PREFIX = /@([0-9\\.]+)x/;\nfunction getUrlExtension(url) {\n  return url.split(\".\").pop().split(\"?\").shift().split(\"#\").shift();\n}\n\nexport { Resolver, getUrlExtension };\n\n", "\"use strict\";\nconst copySearchParams = (targetUrl, sourceUrl) => {\n  const searchParams = sourceUrl.split(\"?\")[1];\n  if (searchParams) {\n    targetUrl += `?${searchParams}`;\n  }\n  return targetUrl;\n};\n\nexport { copySearchParams };\n\n", "import { Rectangle } from '../maths/shapes/Rectangle.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\n\n\"use strict\";\nconst _Spritesheet = class _Spritesheet {\n  /**\n   * @param texture - Reference to the source BaseTexture object.\n   * @param {object} data - Spritesheet image data.\n   */\n  constructor(texture, data) {\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    this.linkedSheets = [];\n    this._texture = texture instanceof Texture ? texture : null;\n    this.textureSource = texture.source;\n    this.textures = {};\n    this.animations = {};\n    this.data = data;\n    const metaResolution = parseFloat(data.meta.scale);\n    if (metaResolution) {\n      this.resolution = metaResolution;\n      texture.source.resolution = this.resolution;\n    } else {\n      this.resolution = texture.source._resolution;\n    }\n    this._frames = this.data.frames;\n    this._frameKeys = Object.keys(this._frames);\n    this._batchIndex = 0;\n    this._callback = null;\n  }\n  /**\n   * Parser spritesheet from loaded data. This is done asynchronously\n   * to prevent creating too many Texture within a single process.\n   */\n  parse() {\n    return new Promise((resolve) => {\n      this._callback = resolve;\n      this._batchIndex = 0;\n      if (this._frameKeys.length <= _Spritesheet.BATCH_SIZE) {\n        this._processFrames(0);\n        this._processAnimations();\n        this._parseComplete();\n      } else {\n        this._nextBatch();\n      }\n    });\n  }\n  /**\n   * Process a batch of frames\n   * @param initialFrameIndex - The index of frame to start.\n   */\n  _processFrames(initialFrameIndex) {\n    let frameIndex = initialFrameIndex;\n    const maxFrames = _Spritesheet.BATCH_SIZE;\n    while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length) {\n      const i = this._frameKeys[frameIndex];\n      const data = this._frames[i];\n      const rect = data.frame;\n      if (rect) {\n        let frame = null;\n        let trim = null;\n        const sourceSize = data.trimmed !== false && data.sourceSize ? data.sourceSize : data.frame;\n        const orig = new Rectangle(\n          0,\n          0,\n          Math.floor(sourceSize.w) / this.resolution,\n          Math.floor(sourceSize.h) / this.resolution\n        );\n        if (data.rotated) {\n          frame = new Rectangle(\n            Math.floor(rect.x) / this.resolution,\n            Math.floor(rect.y) / this.resolution,\n            Math.floor(rect.h) / this.resolution,\n            Math.floor(rect.w) / this.resolution\n          );\n        } else {\n          frame = new Rectangle(\n            Math.floor(rect.x) / this.resolution,\n            Math.floor(rect.y) / this.resolution,\n            Math.floor(rect.w) / this.resolution,\n            Math.floor(rect.h) / this.resolution\n          );\n        }\n        if (data.trimmed !== false && data.spriteSourceSize) {\n          trim = new Rectangle(\n            Math.floor(data.spriteSourceSize.x) / this.resolution,\n            Math.floor(data.spriteSourceSize.y) / this.resolution,\n            Math.floor(rect.w) / this.resolution,\n            Math.floor(rect.h) / this.resolution\n          );\n        }\n        this.textures[i] = new Texture({\n          source: this.textureSource,\n          frame,\n          orig,\n          trim,\n          rotate: data.rotated ? 2 : 0,\n          defaultAnchor: data.anchor,\n          defaultBorders: data.borders,\n          label: i.toString()\n        });\n      }\n      frameIndex++;\n    }\n  }\n  /** Parse animations config. */\n  _processAnimations() {\n    const animations = this.data.animations || {};\n    for (const animName in animations) {\n      this.animations[animName] = [];\n      for (let i = 0; i < animations[animName].length; i++) {\n        const frameName = animations[animName][i];\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  }\n  /** The parse has completed. */\n  _parseComplete() {\n    const callback = this._callback;\n    this._callback = null;\n    this._batchIndex = 0;\n    callback.call(this, this.textures);\n  }\n  /** Begin the next batch of textures. */\n  _nextBatch() {\n    this._processFrames(this._batchIndex * _Spritesheet.BATCH_SIZE);\n    this._batchIndex++;\n    setTimeout(() => {\n      if (this._batchIndex * _Spritesheet.BATCH_SIZE < this._frameKeys.length) {\n        this._nextBatch();\n      } else {\n        this._processAnimations();\n        this._parseComplete();\n      }\n    }, 0);\n  }\n  /**\n   * Destroy Spritesheet and don't use after this.\n   * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n   */\n  destroy(destroyBase = false) {\n    for (const i in this.textures) {\n      this.textures[i].destroy();\n    }\n    this._frames = null;\n    this._frameKeys = null;\n    this.data = null;\n    this.textures = null;\n    if (destroyBase) {\n      this._texture?.destroy();\n      this.textureSource.destroy();\n    }\n    this._texture = null;\n    this.textureSource = null;\n    this.linkedSheets = [];\n  }\n};\n/** The maximum number of Textures to build per process. */\n_Spritesheet.BATCH_SIZE = 1e3;\nlet Spritesheet = _Spritesheet;\n\nexport { Spritesheet };\n\n", "import { LoaderParserPriority } from '../assets/loader/parsers/LoaderParser.mjs';\nimport { Resolver } from '../assets/resolver/Resolver.mjs';\nimport { copySearchParams } from '../assets/utils/copySearchParams.mjs';\nimport { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { path } from '../utils/path.mjs';\nimport { Spritesheet } from './Spritesheet.mjs';\n\n\"use strict\";\nconst validImages = [\n  \"jpg\",\n  \"png\",\n  \"jpeg\",\n  \"avif\",\n  \"webp\",\n  \"basis\",\n  \"etc2\",\n  \"bc7\",\n  \"bc6h\",\n  \"bc5\",\n  \"bc4\",\n  \"bc3\",\n  \"bc2\",\n  \"bc1\",\n  \"eac\",\n  \"astc\"\n];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  keys.forEach((key) => {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach((key) => {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    const basePath = path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: (asset) => asset instanceof Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, false)\n  },\n  /** Resolve the resolution of the asset. */\n  resolver: {\n    extension: {\n      type: ExtensionType.ResolveParser,\n      name: \"resolveSpritesheet\"\n    },\n    test: (value) => {\n      const tempURL = value.split(\"?\")[0];\n      const split = tempURL.split(\".\");\n      const extension = split.pop();\n      const format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: (value) => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal,\n      name: \"spritesheetLoader\"\n    },\n    async testParse(asset, options) {\n      return path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      const {\n        texture: imageTexture,\n        // if user need to use preloaded texture\n        imageFilename\n        // if user need to use custom filename (not from jsonFile.meta.image)\n      } = options?.data ?? {};\n      let basePath = path.dirname(options.src);\n      if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n        basePath += \"/\";\n      }\n      let texture;\n      if (imageTexture instanceof Texture) {\n        texture = imageTexture;\n      } else {\n        const imagePath = copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n        const assets = await loader.load([imagePath]);\n        texture = assets[imagePath];\n      }\n      const spritesheet = new Spritesheet(\n        texture.source,\n        asset\n      );\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item !== \"string\") {\n            continue;\n          }\n          let itemUrl = basePath + item;\n          if (options.data?.ignoreMultiPack) {\n            continue;\n          }\n          itemUrl = copySearchParams(itemUrl, options.src);\n          promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: true\n            }\n          }));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res;\n        res.forEach((item) => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    async unload(spritesheet, _resolvedAsset, loader) {\n      await loader.unload(spritesheet.textureSource._sourceOrigin);\n      spritesheet.destroy(false);\n    }\n  }\n};\n\nexport { spritesheetAsset };\n\n", "import { extensions } from '../extensions/Extensions.mjs';\nimport { spritesheetAsset } from './spritesheetAsset.mjs';\n\n\"use strict\";\nextensions.add(spritesheetAsset);\n\n", "import { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction addMaskBounds(mask, bounds, skipUpdateTransform) {\n  const boundsToMask = tempBounds;\n  mask.measurable = true;\n  getGlobalBounds(mask, skipUpdateTransform, boundsToMask);\n  bounds.addBoundsMask(boundsToMask);\n  mask.measurable = false;\n}\n\nexport { addMaskBounds };\n\n", "import { getLocalBounds } from '../../../scene/container/bounds/getLocalBounds.mjs';\nimport { boundsPool, matrixPool } from '../../../scene/container/bounds/utils/matrixAndBoundsPool.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\n\n\"use strict\";\nfunction addMaskLocalBounds(mask, bounds, localRoot) {\n  const boundsToMask = boundsPool.get();\n  mask.measurable = true;\n  const tempMatrix = matrixPool.get().identity();\n  const relativeMask = getMatrixRelativeToParent(mask, localRoot, tempMatrix);\n  getLocalBounds(mask, boundsToMask, relativeMask);\n  mask.measurable = false;\n  bounds.addBoundsMask(boundsToMask);\n  matrixPool.return(tempMatrix);\n  boundsPool.return(boundsToMask);\n}\nfunction getMatrixRelativeToParent(target, root, matrix) {\n  if (!target) {\n    warn(\"Mask bounds, renderable is not inside the root container\");\n    return matrix;\n  }\n  if (target !== root) {\n    getMatrixRelativeToParent(target.parent, root, matrix);\n    target.updateLocalTransform();\n    matrix.append(target.localTransform);\n  }\n  return matrix;\n}\n\nexport { addMaskLocalBounds, getMatrixRelativeToParent };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { addMaskBounds } from '../utils/addMaskBounds.mjs';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds.mjs';\n\n\"use strict\";\nclass AlphaMask {\n  constructor(options) {\n    this.priority = 0;\n    this.pipe = \"alphaMask\";\n    if (options?.mask) {\n      this.init(options.mask);\n    }\n  }\n  init(mask) {\n    this.mask = mask;\n    this.renderMaskToTexture = !(mask instanceof Sprite);\n    this.mask.renderable = this.renderMaskToTexture;\n    this.mask.includeInBuild = !this.renderMaskToTexture;\n    this.mask.measurable = false;\n  }\n  reset() {\n    this.mask.measurable = true;\n    this.mask = null;\n  }\n  addBounds(bounds, skipUpdateTransform) {\n    addMaskBounds(this.mask, bounds, skipUpdateTransform);\n  }\n  addLocalBounds(bounds, localRoot) {\n    addMaskLocalBounds(this.mask, bounds, localRoot);\n  }\n  containsPoint(point, hitTestFn) {\n    const mask = this.mask;\n    return hitTestFn(mask, point);\n  }\n  destroy() {\n    this.reset();\n  }\n  static test(mask) {\n    return mask instanceof Sprite;\n  }\n}\nAlphaMask.extension = ExtensionType.MaskEffect;\n\nexport { AlphaMask };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMask {\n  constructor(options) {\n    this.priority = 0;\n    this.pipe = \"colorMask\";\n    if (options?.mask) {\n      this.init(options.mask);\n    }\n  }\n  init(mask) {\n    this.mask = mask;\n  }\n  destroy() {\n  }\n  static test(mask) {\n    return typeof mask === \"number\";\n  }\n}\nColorMask.extension = ExtensionType.MaskEffect;\n\nexport { ColorMask };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Container } from '../../../scene/container/Container.mjs';\nimport { addMaskBounds } from '../utils/addMaskBounds.mjs';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds.mjs';\n\n\"use strict\";\nclass StencilMask {\n  constructor(options) {\n    this.priority = 0;\n    this.pipe = \"stencilMask\";\n    if (options?.mask) {\n      this.init(options.mask);\n    }\n  }\n  init(mask) {\n    this.mask = mask;\n    this.mask.includeInBuild = false;\n    this.mask.measurable = false;\n  }\n  reset() {\n    this.mask.measurable = true;\n    this.mask.includeInBuild = true;\n    this.mask = null;\n  }\n  addBounds(bounds, skipUpdateTransform) {\n    addMaskBounds(this.mask, bounds, skipUpdateTransform);\n  }\n  addLocalBounds(bounds, localRoot) {\n    addMaskLocalBounds(this.mask, bounds, localRoot);\n  }\n  containsPoint(point, hitTestFn) {\n    const mask = this.mask;\n    return hitTestFn(mask, point);\n  }\n  destroy() {\n    this.reset();\n  }\n  static test(mask) {\n    return mask instanceof Container;\n  }\n}\nStencilMask.extension = ExtensionType.MaskEffect;\n\nexport { StencilMask };\n\n", "import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../../utils/logging/warn.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass ImageSource extends TextureSource {\n  constructor(options) {\n    if (options.resource && (globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement)) {\n      const canvas = DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(options.resource, 0, 0, options.resource.width, options.resource.height);\n      options.resource = canvas;\n      warn(\"ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.\");\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoGarbageCollect = true;\n  }\n  static test(resource) {\n    return globalThis.HTMLImageElement && resource instanceof HTMLImageElement || typeof ImageBitmap !== \"undefined\" && resource instanceof ImageBitmap || globalThis.VideoFrame && resource instanceof VideoFrame;\n  }\n}\nImageSource.extension = ExtensionType.TextureSource;\n\nexport { ImageSource };\n\n", "\"use strict\";\nlet promise;\nasync function detectVideoAlphaMode() {\n  promise ?? (promise = (async () => {\n    const canvas = document.createElement(\"canvas\");\n    const gl = canvas.getContext(\"webgl\");\n    if (!gl) {\n      return \"premultiply-alpha-on-upload\";\n    }\n    const video = await new Promise((resolve) => {\n      const video2 = document.createElement(\"video\");\n      video2.onloadeddata = () => resolve(video2);\n      video2.onerror = () => resolve(null);\n      video2.autoplay = false;\n      video2.crossOrigin = \"anonymous\";\n      video2.preload = \"auto\";\n      video2.src = \"data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=\";\n      video2.load();\n    });\n    if (!video) {\n      return \"premultiply-alpha-on-upload\";\n    }\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0\n    );\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n    const pixel = new Uint8Array(4);\n    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n    gl.deleteFramebuffer(framebuffer);\n    gl.deleteTexture(texture);\n    gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n    return pixel[0] <= pixel[3] ? \"premultiplied-alpha\" : \"premultiply-alpha-on-upload\";\n  })());\n  return promise;\n}\n\nexport { detectVideoAlphaMode };\n\n", "import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../../../ticker/Ticker.mjs';\nimport { detectVideoAlphaMode } from '../../../../../utils/browser/detectVideoAlphaMode.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nconst _VideoSource = class _VideoSource extends TextureSource {\n  constructor(options) {\n    super(options);\n    // Public\n    /** Whether or not the video is ready to play. */\n    this.isReady = false;\n    /** The upload method for this texture. */\n    this.uploadMethodId = \"video\";\n    options = {\n      ..._VideoSource.defaultOptions,\n      ...options\n    };\n    this._autoUpdate = true;\n    this._isConnectedToTicker = false;\n    this._updateFPS = options.updateFPS || 0;\n    this._msToNextUpdate = 0;\n    this.autoPlay = options.autoPlay !== false;\n    this.alphaMode = options.alphaMode ?? \"premultiply-alpha-on-upload\";\n    this._videoFrameRequestCallback = this._videoFrameRequestCallback.bind(this);\n    this._videoFrameRequestCallbackHandle = null;\n    this._load = null;\n    this._resolve = null;\n    this._reject = null;\n    this._onCanPlay = this._onCanPlay.bind(this);\n    this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n    this._onError = this._onError.bind(this);\n    this._onPlayStart = this._onPlayStart.bind(this);\n    this._onPlayStop = this._onPlayStop.bind(this);\n    this._onSeeked = this._onSeeked.bind(this);\n    if (options.autoLoad !== false) {\n      void this.load();\n    }\n  }\n  /** Update the video frame if the source is not destroyed and meets certain conditions. */\n  updateFrame() {\n    if (this.destroyed) {\n      return;\n    }\n    if (this._updateFPS) {\n      const elapsedMS = Ticker.shared.elapsedMS * this.resource.playbackRate;\n      this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n    }\n    if (!this._updateFPS || this._msToNextUpdate <= 0) {\n      this._msToNextUpdate = this._updateFPS ? Math.floor(1e3 / this._updateFPS) : 0;\n    }\n    if (this.isValid) {\n      this.update();\n    }\n  }\n  /** Callback to update the video frame and potentially request the next frame update. */\n  _videoFrameRequestCallback() {\n    this.updateFrame();\n    if (this.destroyed) {\n      this._videoFrameRequestCallbackHandle = null;\n    } else {\n      this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n        this._videoFrameRequestCallback\n      );\n    }\n  }\n  /**\n   * Checks if the resource has valid dimensions.\n   * @returns {boolean} True if width and height are set, otherwise false.\n   */\n  get isValid() {\n    return !!this.resource.videoWidth && !!this.resource.videoHeight;\n  }\n  /**\n   * Start preloading the video resource.\n   * @returns {Promise<this>} Handle the validate event\n   */\n  async load() {\n    if (this._load) {\n      return this._load;\n    }\n    const source = this.resource;\n    const options = this.options;\n    if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {\n      source.complete = true;\n    }\n    source.addEventListener(\"play\", this._onPlayStart);\n    source.addEventListener(\"pause\", this._onPlayStop);\n    source.addEventListener(\"seeked\", this._onSeeked);\n    if (!this._isSourceReady()) {\n      if (!options.preload) {\n        source.addEventListener(\"canplay\", this._onCanPlay);\n      }\n      source.addEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.addEventListener(\"error\", this._onError, true);\n    } else {\n      this._mediaReady();\n    }\n    this.alphaMode = await detectVideoAlphaMode();\n    this._load = new Promise((resolve, reject) => {\n      if (this.isValid) {\n        resolve(this);\n      } else {\n        this._resolve = resolve;\n        this._reject = reject;\n        if (options.preloadTimeoutMs !== void 0) {\n          this._preloadTimeout = setTimeout(() => {\n            this._onError(new ErrorEvent(`Preload exceeded timeout of ${options.preloadTimeoutMs}ms`));\n          });\n        }\n        source.load();\n      }\n    });\n    return this._load;\n  }\n  /**\n   * Handle video error events.\n   * @param event - The error event\n   */\n  _onError(event) {\n    this.resource.removeEventListener(\"error\", this._onError, true);\n    this.emit(\"error\", event);\n    if (this._reject) {\n      this._reject(event);\n      this._reject = null;\n      this._resolve = null;\n    }\n  }\n  /**\n   * Checks if the underlying source is playing.\n   * @returns True if playing.\n   */\n  _isSourcePlaying() {\n    const source = this.resource;\n    return !source.paused && !source.ended;\n  }\n  /**\n   * Checks if the underlying source is ready for playing.\n   * @returns True if ready.\n   */\n  _isSourceReady() {\n    const source = this.resource;\n    return source.readyState > 2;\n  }\n  /** Runs the update loop when the video is ready to play. */\n  _onPlayStart() {\n    if (!this.isValid) {\n      this._mediaReady();\n    }\n    this._configureAutoUpdate();\n  }\n  /** Stops the update loop when a pause event is triggered. */\n  _onPlayStop() {\n    this._configureAutoUpdate();\n  }\n  /** Handles behavior when the video completes seeking to the current playback position. */\n  _onSeeked() {\n    if (this._autoUpdate && !this._isSourcePlaying()) {\n      this._msToNextUpdate = 0;\n      this.updateFrame();\n      this._msToNextUpdate = 0;\n    }\n  }\n  _onCanPlay() {\n    const source = this.resource;\n    source.removeEventListener(\"canplay\", this._onCanPlay);\n    this._mediaReady();\n  }\n  _onCanPlayThrough() {\n    const source = this.resource;\n    source.removeEventListener(\"canplaythrough\", this._onCanPlay);\n    if (this._preloadTimeout) {\n      clearTimeout(this._preloadTimeout);\n      this._preloadTimeout = void 0;\n    }\n    this._mediaReady();\n  }\n  /** Fired when the video is loaded and ready to play. */\n  _mediaReady() {\n    const source = this.resource;\n    if (this.isValid) {\n      this.isReady = true;\n      this.resize(source.videoWidth, source.videoHeight);\n    }\n    this._msToNextUpdate = 0;\n    this.updateFrame();\n    this._msToNextUpdate = 0;\n    if (this._resolve) {\n      this._resolve(this);\n      this._resolve = null;\n      this._reject = null;\n    }\n    if (this._isSourcePlaying()) {\n      this._onPlayStart();\n    } else if (this.autoPlay) {\n      void this.resource.play();\n    }\n  }\n  /** Cleans up resources and event listeners associated with this texture. */\n  destroy() {\n    this._configureAutoUpdate();\n    const source = this.resource;\n    if (source) {\n      source.removeEventListener(\"play\", this._onPlayStart);\n      source.removeEventListener(\"pause\", this._onPlayStop);\n      source.removeEventListener(\"seeked\", this._onSeeked);\n      source.removeEventListener(\"canplay\", this._onCanPlay);\n      source.removeEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.removeEventListener(\"error\", this._onError, true);\n      source.pause();\n      source.src = \"\";\n      source.load();\n    }\n    super.destroy();\n  }\n  /** Should the base texture automatically update itself, set to true by default. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * How many times a second to update the texture from the video.\n   * Leave at 0 to update at every render.\n   * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n   */\n  get updateFPS() {\n    return this._updateFPS;\n  }\n  set updateFPS(value) {\n    if (value !== this._updateFPS) {\n      this._updateFPS = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * Configures the updating mechanism based on the current state and settings.\n   *\n   * This method decides between using the browser's native video frame callback or a custom ticker\n   * for updating the video frame. It ensures optimal performance and responsiveness\n   * based on the video's state, playback status, and the desired frames-per-second setting.\n   *\n   * - If `_autoUpdate` is enabled and the video source is playing:\n   *   - It will prefer the native video frame callback if available and no specific FPS is set.\n   *   - Otherwise, it will use a custom ticker for manual updates.\n   * - If `_autoUpdate` is disabled or the video isn't playing, any active update mechanisms are halted.\n   */\n  _configureAutoUpdate() {\n    if (this._autoUpdate && this._isSourcePlaying()) {\n      if (!this._updateFPS && this.resource.requestVideoFrameCallback) {\n        if (this._isConnectedToTicker) {\n          Ticker.shared.remove(this.updateFrame, this);\n          this._isConnectedToTicker = false;\n          this._msToNextUpdate = 0;\n        }\n        if (this._videoFrameRequestCallbackHandle === null) {\n          this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n            this._videoFrameRequestCallback\n          );\n        }\n      } else {\n        if (this._videoFrameRequestCallbackHandle !== null) {\n          this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n          this._videoFrameRequestCallbackHandle = null;\n        }\n        if (!this._isConnectedToTicker) {\n          Ticker.shared.add(this.updateFrame, this);\n          this._isConnectedToTicker = true;\n          this._msToNextUpdate = 0;\n        }\n      }\n    } else {\n      if (this._videoFrameRequestCallbackHandle !== null) {\n        this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n        this._videoFrameRequestCallbackHandle = null;\n      }\n      if (this._isConnectedToTicker) {\n        Ticker.shared.remove(this.updateFrame, this);\n        this._isConnectedToTicker = false;\n        this._msToNextUpdate = 0;\n      }\n    }\n  }\n  static test(resource) {\n    return globalThis.HTMLVideoElement && resource instanceof HTMLVideoElement;\n  }\n};\n_VideoSource.extension = ExtensionType.TextureSource;\n/** The default options for video sources. */\n_VideoSource.defaultOptions = {\n  ...TextureSource.defaultOptions,\n  /** If true, the video will start loading immediately. */\n  autoLoad: true,\n  /** If true, the video will start playing as soon as it is loaded. */\n  autoPlay: true,\n  /** The number of times a second to update the texture from the video. Leave at 0 to update at every render. */\n  updateFPS: 0,\n  /** If true, the video will be loaded with the `crossorigin` attribute. */\n  crossorigin: true,\n  /** If true, the video will loop when it ends. */\n  loop: false,\n  /** If true, the video will be muted. */\n  muted: true,\n  /** If true, the video will play inline. */\n  playsinline: true,\n  /** If true, the video will be preloaded. */\n  preload: false\n};\n/**\n * Map of video MIME types that can't be directly derived from file extensions.\n * @readonly\n */\n_VideoSource.MIME_TYPES = {\n  ogv: \"video/ogg\",\n  mov: \"video/quicktime\",\n  m4v: \"video/mp4\"\n};\nlet VideoSource = _VideoSource;\n\nexport { VideoSource };\n\n", "import { warn } from '../../utils/logging/warn.mjs';\nimport { convertToList } from '../utils/convertToList.mjs';\n\n\"use strict\";\nclass CacheClass {\n  constructor() {\n    this._parsers = [];\n    this._cache = /* @__PURE__ */ new Map();\n    this._cacheMap = /* @__PURE__ */ new Map();\n  }\n  /** Clear all entries. */\n  reset() {\n    this._cacheMap.clear();\n    this._cache.clear();\n  }\n  /**\n   * Check if the key exists\n   * @param key - The key to check\n   */\n  has(key) {\n    return this._cache.has(key);\n  }\n  /**\n   * Fetch entry by key\n   * @param key - The key of the entry to get\n   */\n  get(key) {\n    const result = this._cache.get(key);\n    if (!result) {\n      warn(`[Assets] Asset id ${key} was not found in the Cache`);\n    }\n    return result;\n  }\n  /**\n   * Set a value by key or keys name\n   * @param key - The key or keys to set\n   * @param value - The value to store in the cache or from which cacheable assets will be derived.\n   */\n  set(key, value) {\n    const keys = convertToList(key);\n    let cacheableAssets;\n    for (let i = 0; i < this.parsers.length; i++) {\n      const parser = this.parsers[i];\n      if (parser.test(value)) {\n        cacheableAssets = parser.getCacheableAssets(keys, value);\n        break;\n      }\n    }\n    const cacheableMap = new Map(Object.entries(cacheableAssets || {}));\n    if (!cacheableAssets) {\n      keys.forEach((key2) => {\n        cacheableMap.set(key2, value);\n      });\n    }\n    const cacheKeys = [...cacheableMap.keys()];\n    const cachedAssets = {\n      cacheKeys,\n      keys\n    };\n    keys.forEach((key2) => {\n      this._cacheMap.set(key2, cachedAssets);\n    });\n    cacheKeys.forEach((key2) => {\n      const val = cacheableAssets ? cacheableAssets[key2] : value;\n      if (this._cache.has(key2) && this._cache.get(key2) !== val) {\n        warn(\"[Cache] already has key:\", key2);\n      }\n      this._cache.set(key2, cacheableMap.get(key2));\n    });\n  }\n  /**\n   * Remove entry by key\n   *\n   * This function will also remove any associated alias from the cache also.\n   * @param key - The key of the entry to remove\n   */\n  remove(key) {\n    if (!this._cacheMap.has(key)) {\n      warn(`[Assets] Asset id ${key} was not found in the Cache`);\n      return;\n    }\n    const cacheMap = this._cacheMap.get(key);\n    const cacheKeys = cacheMap.cacheKeys;\n    cacheKeys.forEach((key2) => {\n      this._cache.delete(key2);\n    });\n    cacheMap.keys.forEach((key2) => {\n      this._cacheMap.delete(key2);\n    });\n  }\n  /** All loader parsers registered */\n  get parsers() {\n    return this._parsers;\n  }\n}\nconst Cache = new CacheClass();\n\nexport { Cache };\n\n", "import { Cache } from '../../../../../assets/cache/Cache.mjs';\nimport { extensions, ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from '../sources/TextureSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst sources = [];\nextensions.handleByList(ExtensionType.TextureSource, sources);\nfunction autoDetectSource(options = {}) {\n  return textureSourceFrom(options);\n}\nfunction textureSourceFrom(options = {}) {\n  const hasResource = options && options.resource;\n  const res = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  for (let i = 0; i < sources.length; i++) {\n    const Source = sources[i];\n    if (Source.test(res)) {\n      return new Source(opts);\n    }\n  }\n  throw new Error(`Could not find a source type for resource: ${opts.resource}`);\n}\nfunction resourceToTexture(options = {}, skipCache = false) {\n  const hasResource = options && options.resource;\n  const resource = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  if (!skipCache && Cache.has(resource)) {\n    return Cache.get(resource);\n  }\n  const texture = new Texture({ source: textureSourceFrom(opts) });\n  texture.on(\"destroy\", () => {\n    if (Cache.has(resource)) {\n      Cache.remove(resource);\n    }\n  });\n  if (!skipCache) {\n    Cache.set(resource, texture);\n  }\n  return texture;\n}\nfunction textureFrom(id, skipCache = false) {\n  if (typeof id === \"string\") {\n    return Cache.get(id);\n  } else if (id instanceof TextureSource) {\n    return new Texture({ source: id });\n  }\n  return resourceToTexture(id, skipCache);\n}\nTexture.from = textureFrom;\nTextureSource.from = textureSourceFrom;\n\nexport { autoDetectSource, resourceToTexture, textureFrom };\n\n", "import { extensions } from '../extensions/Extensions.mjs';\nimport { AlphaMask } from './mask/alpha/AlphaMask.mjs';\nimport { ColorMask } from './mask/color/ColorMask.mjs';\nimport { StencilMask } from './mask/stencil/StencilMask.mjs';\nimport { BufferImageSource } from './renderers/shared/texture/sources/BufferImageSource.mjs';\nimport { CanvasSource } from './renderers/shared/texture/sources/CanvasSource.mjs';\nimport { ImageSource } from './renderers/shared/texture/sources/ImageSource.mjs';\nimport { VideoSource } from './renderers/shared/texture/sources/VideoSource.mjs';\nimport './renderers/shared/texture/utils/textureFrom.mjs';\nimport './mask/MaskEffectManager.mjs';\n\n\"use strict\";\nextensions.add(AlphaMask, ColorMask, StencilMask, VideoSource, ImageSource, CanvasSource, BufferImageSource);\n\n", "\"use strict\";\nfunction buildUvs(vertices, verticesStride, verticesOffset, uvs, uvsOffset, uvsStride, size, matrix = null) {\n  let index = 0;\n  verticesOffset *= verticesStride;\n  uvsOffset *= uvsStride;\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  while (index < size) {\n    const x = vertices[verticesOffset];\n    const y = vertices[verticesOffset + 1];\n    uvs[uvsOffset] = a * x + c * y + tx;\n    uvs[uvsOffset + 1] = b * x + d * y + ty;\n    uvsOffset += uvsStride;\n    verticesOffset += verticesStride;\n    index++;\n  }\n}\nfunction buildSimpleUvs(uvs, uvsOffset, uvsStride, size) {\n  let index = 0;\n  uvsOffset *= uvsStride;\n  while (index < size) {\n    uvs[uvsOffset] = 0;\n    uvs[uvsOffset + 1] = 0;\n    uvsOffset += uvsStride;\n    index++;\n  }\n}\n\nexport { buildSimpleUvs, buildUvs };\n\n", "\"use strict\";\nfunction transformVertices(vertices, m, offset, stride, size) {\n  const a = m.a;\n  const b = m.b;\n  const c = m.c;\n  const d = m.d;\n  const tx = m.tx;\n  const ty = m.ty;\n  offset = offset || 0;\n  stride = stride || 2;\n  size = size || vertices.length / stride - offset;\n  let index = offset * stride;\n  for (let i = 0; i < size; i++) {\n    const x = vertices[index];\n    const y = vertices[index + 1];\n    vertices[index] = a * x + c * y + tx;\n    vertices[index + 1] = b * x + d * y + ty;\n    index += stride;\n  }\n}\n\nexport { transformVertices };\n\n", "\"use strict\";\nfunction multiplyHexColors(color1, color2) {\n  if (color1 === 16777215 || !color2)\n    return color2;\n  if (color2 === 16777215 || !color1)\n    return color1;\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 * r2 / 255;\n  const g = g1 * g2 / 255;\n  const b = b1 * b2 / 255;\n  return (r << 16) + (g << 8) + b;\n}\n\nexport { multiplyHexColors };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors.mjs';\n\n\"use strict\";\nconst identityMatrix = new Matrix();\nclass BatchableGraphics {\n  constructor() {\n    this.packAsQuad = false;\n    this.batcherName = \"default\";\n    this.applyTransform = true;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n  }\n  get uvs() {\n    return this.geometryData.uvs;\n  }\n  get positions() {\n    return this.geometryData.vertices;\n  }\n  get indices() {\n    return this.geometryData.indices;\n  }\n  get blendMode() {\n    if (this.applyTransform) {\n      return this.renderable.groupBlendMode;\n    }\n    return \"normal\";\n  }\n  get color() {\n    const rgb = this.baseColor;\n    const bgr = rgb >> 16 | rgb & 65280 | (rgb & 255) << 16;\n    const renderable = this.renderable;\n    if (renderable) {\n      return multiplyHexColors(bgr, renderable.groupColor) + (this.alpha * renderable.groupAlpha * 255 << 24);\n    }\n    return bgr + (this.alpha * 255 << 24);\n  }\n  get transform() {\n    return this.renderable?.groupTransform || identityMatrix;\n  }\n  copyTo(gpuBuffer) {\n    gpuBuffer.indexOffset = this.indexOffset;\n    gpuBuffer.indexSize = this.indexSize;\n    gpuBuffer.attributeOffset = this.attributeOffset;\n    gpuBuffer.attributeSize = this.attributeSize;\n    gpuBuffer.baseColor = this.baseColor;\n    gpuBuffer.alpha = this.alpha;\n    gpuBuffer.texture = this.texture;\n    gpuBuffer.geometryData = this.geometryData;\n  }\n  reset() {\n    this.applyTransform = true;\n  }\n}\n\nexport { BatchableGraphics };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildCircle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"circle\"\n  },\n  build(shape, points) {\n    let x;\n    let y;\n    let dx;\n    let dy;\n    let rx;\n    let ry;\n    if (shape.type === \"circle\") {\n      const circle = shape;\n      x = circle.x;\n      y = circle.y;\n      rx = ry = circle.radius;\n      dx = dy = 0;\n    } else if (shape.type === \"ellipse\") {\n      const ellipse = shape;\n      x = ellipse.x;\n      y = ellipse.y;\n      rx = ellipse.halfWidth;\n      ry = ellipse.halfHeight;\n      dx = dy = 0;\n    } else {\n      const roundedRect = shape;\n      const halfWidth = roundedRect.width / 2;\n      const halfHeight = roundedRect.height / 2;\n      x = roundedRect.x + halfWidth;\n      y = roundedRect.y + halfHeight;\n      rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n      dx = halfWidth - rx;\n      dy = halfHeight - ry;\n    }\n    if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0)) {\n      return points;\n    }\n    const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n    const m = n * 8 + (dx ? 4 : 0) + (dy ? 4 : 0);\n    if (m === 0) {\n      return points;\n    }\n    if (n === 0) {\n      points[0] = points[6] = x + dx;\n      points[1] = points[3] = y + dy;\n      points[2] = points[4] = x - dx;\n      points[5] = points[7] = y - dy;\n      return points;\n    }\n    let j1 = 0;\n    let j2 = n * 4 + (dx ? 2 : 0) + 2;\n    let j3 = j2;\n    let j4 = m;\n    let x0 = dx + rx;\n    let y0 = dy;\n    let x1 = x + x0;\n    let x2 = x - x0;\n    let y1 = y + y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j2] = y1;\n    points[--j2] = x2;\n    if (dy) {\n      const y22 = y - y0;\n      points[j3++] = x2;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x1;\n    }\n    for (let i = 1; i < n; i++) {\n      const a = Math.PI / 2 * (i / n);\n      const x02 = dx + Math.cos(a) * rx;\n      const y02 = dy + Math.sin(a) * ry;\n      const x12 = x + x02;\n      const x22 = x - x02;\n      const y12 = y + y02;\n      const y22 = y - y02;\n      points[j1++] = x12;\n      points[j1++] = y12;\n      points[--j2] = y12;\n      points[--j2] = x22;\n      points[j3++] = x22;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x12;\n    }\n    x0 = dx;\n    y0 = dy + ry;\n    x1 = x + x0;\n    x2 = x - x0;\n    y1 = y + y0;\n    const y2 = y - y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j4] = y2;\n    points[--j4] = x1;\n    if (dx) {\n      points[j1++] = x2;\n      points[j1++] = y1;\n      points[--j4] = y2;\n      points[--j4] = x2;\n    }\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    if (points.length === 0) {\n      return;\n    }\n    let centerX = 0;\n    let centerY = 0;\n    for (let i = 0; i < points.length; i += 2) {\n      centerX += points[i];\n      centerY += points[i + 1];\n    }\n    centerX /= points.length / 2;\n    centerY /= points.length / 2;\n    let count = verticesOffset;\n    vertices[count * verticesStride] = centerX;\n    vertices[count * verticesStride + 1] = centerY;\n    const centerIndex = count++;\n    for (let i = 0; i < points.length; i += 2) {\n      vertices[count * verticesStride] = points[i];\n      vertices[count * verticesStride + 1] = points[i + 1];\n      if (i > 0) {\n        indices[indicesOffset++] = count;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n      }\n      count++;\n    }\n    indices[indicesOffset++] = centerIndex + 1;\n    indices[indicesOffset++] = centerIndex;\n    indices[indicesOffset++] = count - 1;\n  }\n};\nconst buildEllipse = { ...buildCircle, extension: { ...buildCircle.extension, name: \"ellipse\" } };\nconst buildRoundedRectangle = { ...buildCircle, extension: { ...buildCircle.extension, name: \"roundedRectangle\" } };\n\nexport { buildCircle, buildEllipse, buildRoundedRectangle };\n\n", "\"use strict\";\nconst closePointEps = 1e-4;\nconst curveEps = 1e-4;\n\nexport { closePointEps, curveEps };\n\n", "\"use strict\";\nfunction getOrientationOfPoints(points) {\n  const m = points.length;\n  if (m < 6) {\n    return 1;\n  }\n  let area = 0;\n  for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2) {\n    const x2 = points[i];\n    const y2 = points[i + 1];\n    area += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  if (area < 0) {\n    return -1;\n  }\n  return 1;\n}\n\nexport { getOrientationOfPoints };\n\n", "import { Point } from '../../../../maths/point/Point.mjs';\nimport { closePointEps, curveEps } from '../const.mjs';\nimport { getOrientationOfPoints } from '../utils/getOrientationOfPoints.mjs';\n\n\"use strict\";\nfunction square(x, y, nx, ny, innerWeight, outerWeight, clockwise, verts) {\n  const ix = x - nx * innerWeight;\n  const iy = y - ny * innerWeight;\n  const ox = x + nx * outerWeight;\n  const oy = y + ny * outerWeight;\n  let exx;\n  let eyy;\n  if (clockwise) {\n    exx = ny;\n    eyy = -nx;\n  } else {\n    exx = -ny;\n    eyy = nx;\n  }\n  const eix = ix + exx;\n  const eiy = iy + eyy;\n  const eox = ox + exx;\n  const eoy = oy + eyy;\n  verts.push(eix, eiy);\n  verts.push(eox, eoy);\n  return 2;\n}\nfunction round(cx, cy, sx, sy, ex, ey, verts, clockwise) {\n  const cx2p0x = sx - cx;\n  const cy2p0y = sy - cy;\n  let angle0 = Math.atan2(cx2p0x, cy2p0y);\n  let angle1 = Math.atan2(ex - cx, ey - cy);\n  if (clockwise && angle0 < angle1) {\n    angle0 += Math.PI * 2;\n  } else if (!clockwise && angle0 > angle1) {\n    angle1 += Math.PI * 2;\n  }\n  let startAngle = angle0;\n  const angleDiff = angle1 - angle0;\n  const absAngleDiff = Math.abs(angleDiff);\n  const radius = Math.sqrt(cx2p0x * cx2p0x + cy2p0y * cy2p0y);\n  const segCount = (15 * absAngleDiff * Math.sqrt(radius) / Math.PI >> 0) + 1;\n  const angleInc = angleDiff / segCount;\n  startAngle += angleInc;\n  if (clockwise) {\n    verts.push(cx, cy);\n    verts.push(sx, sy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(cx, cy);\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n    }\n    verts.push(cx, cy);\n    verts.push(ex, ey);\n  } else {\n    verts.push(sx, sy);\n    verts.push(cx, cy);\n    for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc) {\n      verts.push(\n        cx + Math.sin(angle) * radius,\n        cy + Math.cos(angle) * radius\n      );\n      verts.push(cx, cy);\n    }\n    verts.push(ex, ey);\n    verts.push(cx, cy);\n  }\n  return segCount * 2;\n}\nfunction buildLine(points, lineStyle, flipAlignment, closed, vertices, _verticesStride, _verticesOffset, indices, _indicesOffset) {\n  const eps = closePointEps;\n  if (points.length === 0) {\n    return;\n  }\n  const style = lineStyle;\n  let alignment = style.alignment;\n  if (lineStyle.alignment !== 0.5) {\n    let orientation = getOrientationOfPoints(points);\n    if (flipAlignment)\n      orientation *= -1;\n    alignment = (alignment - 0.5) * orientation + 0.5;\n  }\n  const firstPoint = new Point(points[0], points[1]);\n  const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n  const closedShape = closed;\n  const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps && Math.abs(firstPoint.y - lastPoint.y) < eps;\n  if (closedShape) {\n    points = points.slice();\n    if (closedPath) {\n      points.pop();\n      points.pop();\n      lastPoint.set(points[points.length - 2], points[points.length - 1]);\n    }\n    const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n    const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n  const verts = vertices;\n  const length = points.length / 2;\n  let indexCount = points.length;\n  const indexStart = verts.length / 2;\n  const width = style.width / 2;\n  const widthSquared = width * width;\n  const miterLimitSquared = style.miterLimit * style.miterLimit;\n  let x0 = points[0];\n  let y0 = points[1];\n  let x1 = points[2];\n  let y1 = points[3];\n  let x2 = 0;\n  let y2 = 0;\n  let perpX = -(y0 - y1);\n  let perpY = x0 - x1;\n  let perp1x = 0;\n  let perp1y = 0;\n  let dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  const ratio = alignment;\n  const innerWeight = (1 - ratio) * 2;\n  const outerWeight = ratio * 2;\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x0 - perpX * (innerWeight - outerWeight) * 0.5,\n        y0 - perpY * (innerWeight - outerWeight) * 0.5,\n        x0 - perpX * innerWeight,\n        y0 - perpY * innerWeight,\n        x0 + perpX * outerWeight,\n        y0 + perpY * outerWeight,\n        verts,\n        true\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n    }\n  }\n  verts.push(\n    x0 - perpX * innerWeight,\n    y0 - perpY * innerWeight\n  );\n  verts.push(\n    x0 + perpX * outerWeight,\n    y0 + perpY * outerWeight\n  );\n  for (let i = 1; i < length - 1; ++i) {\n    x0 = points[(i - 1) * 2];\n    y0 = points[(i - 1) * 2 + 1];\n    x1 = points[i * 2];\n    y1 = points[i * 2 + 1];\n    x2 = points[(i + 1) * 2];\n    y2 = points[(i + 1) * 2 + 1];\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n    dist = Math.sqrt(perpX * perpX + perpY * perpY);\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n    perp1x = -(y1 - y2);\n    perp1y = x1 - x2;\n    dist = Math.sqrt(perp1x * perp1x + perp1y * perp1y);\n    perp1x /= dist;\n    perp1y /= dist;\n    perp1x *= width;\n    perp1y *= width;\n    const dx0 = x1 - x0;\n    const dy0 = y0 - y1;\n    const dx1 = x1 - x2;\n    const dy1 = y2 - y1;\n    const dot = dx0 * dx1 + dy0 * dy1;\n    const cross = dy0 * dx1 - dy1 * dx0;\n    const clockwise = cross < 0;\n    if (Math.abs(cross) < 1e-3 * Math.abs(dot)) {\n      verts.push(\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight\n      );\n      verts.push(\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight\n      );\n      if (dot >= 0) {\n        if (style.join === \"round\") {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n        } else {\n          indexCount += 2;\n        }\n        verts.push(\n          x1 - perp1x * outerWeight,\n          y1 - perp1y * outerWeight\n        );\n        verts.push(\n          x1 + perp1x * innerWeight,\n          y1 + perp1y * innerWeight\n        );\n      }\n      continue;\n    }\n    const c1 = (-perpX + x0) * (-perpY + y1) - (-perpX + x1) * (-perpY + y0);\n    const c2 = (-perp1x + x2) * (-perp1y + y1) - (-perp1x + x1) * (-perp1y + y2);\n    const px = (dx0 * c2 - dx1 * c1) / cross;\n    const py = (dy1 * c1 - dy0 * c2) / cross;\n    const pDist = (px - x1) * (px - x1) + (py - y1) * (py - y1);\n    const imx = x1 + (px - x1) * innerWeight;\n    const imy = y1 + (py - y1) * innerWeight;\n    const omx = x1 - (px - x1) * outerWeight;\n    const omy = y1 - (py - y1) * outerWeight;\n    const smallerInsideSegmentSq = Math.min(dx0 * dx0 + dy0 * dy0, dx1 * dx1 + dy1 * dy1);\n    const insideWeight = clockwise ? innerWeight : outerWeight;\n    const smallerInsideDiagonalSq = smallerInsideSegmentSq + insideWeight * insideWeight * widthSquared;\n    const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n    if (insideMiterOk) {\n      if (style.join === \"bevel\" || pDist / widthSquared > miterLimitSquared) {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n        indexCount += 2;\n      } else if (style.join === \"round\") {\n        if (clockwise) {\n          verts.push(imx, imy);\n          verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 4;\n          verts.push(imx, imy);\n          verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n        } else {\n          verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n          verts.push(omx, omy);\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 4;\n          verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n          verts.push(omx, omy);\n        }\n      } else {\n        verts.push(imx, imy);\n        verts.push(omx, omy);\n      }\n    } else {\n      verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n      verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n      if (style.join === \"round\") {\n        if (clockwise) {\n          indexCount += round(\n            x1,\n            y1,\n            x1 + perpX * outerWeight,\n            y1 + perpY * outerWeight,\n            x1 + perp1x * outerWeight,\n            y1 + perp1y * outerWeight,\n            verts,\n            true\n          ) + 2;\n        } else {\n          indexCount += round(\n            x1,\n            y1,\n            x1 - perpX * innerWeight,\n            y1 - perpY * innerWeight,\n            x1 - perp1x * innerWeight,\n            y1 - perp1y * innerWeight,\n            verts,\n            false\n          ) + 2;\n        }\n      } else if (style.join === \"miter\" && pDist / widthSquared <= miterLimitSquared) {\n        if (clockwise) {\n          verts.push(omx, omy);\n          verts.push(omx, omy);\n        } else {\n          verts.push(imx, imy);\n          verts.push(imx, imy);\n        }\n        indexCount += 2;\n      }\n      verts.push(x1 - perp1x * innerWeight, y1 - perp1y * innerWeight);\n      verts.push(x1 + perp1x * outerWeight, y1 + perp1y * outerWeight);\n      indexCount += 2;\n    }\n  }\n  x0 = points[(length - 2) * 2];\n  y0 = points[(length - 2) * 2 + 1];\n  x1 = points[(length - 1) * 2];\n  y1 = points[(length - 1) * 2 + 1];\n  perpX = -(y0 - y1);\n  perpY = x0 - x1;\n  dist = Math.sqrt(perpX * perpX + perpY * perpY);\n  perpX /= dist;\n  perpY /= dist;\n  perpX *= width;\n  perpY *= width;\n  verts.push(x1 - perpX * innerWeight, y1 - perpY * innerWeight);\n  verts.push(x1 + perpX * outerWeight, y1 + perpY * outerWeight);\n  if (!closedShape) {\n    if (style.cap === \"round\") {\n      indexCount += round(\n        x1 - perpX * (innerWeight - outerWeight) * 0.5,\n        y1 - perpY * (innerWeight - outerWeight) * 0.5,\n        x1 - perpX * innerWeight,\n        y1 - perpY * innerWeight,\n        x1 + perpX * outerWeight,\n        y1 + perpY * outerWeight,\n        verts,\n        false\n      ) + 2;\n    } else if (style.cap === \"square\") {\n      indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n    }\n  }\n  const eps2 = curveEps * curveEps;\n  for (let i = indexStart; i < indexCount + indexStart - 2; ++i) {\n    x0 = verts[i * 2];\n    y0 = verts[i * 2 + 1];\n    x1 = verts[(i + 1) * 2];\n    y1 = verts[(i + 1) * 2 + 1];\n    x2 = verts[(i + 2) * 2];\n    y2 = verts[(i + 2) * 2 + 1];\n    if (Math.abs(x0 * (y1 - y2) + x1 * (y2 - y0) + x2 * (y0 - y1)) < eps2) {\n      continue;\n    }\n    indices.push(i, i + 1, i + 2);\n  }\n}\n\nexport { buildLine };\n\n", "import earcut from 'earcut';\n\n\"use strict\";\nfunction triangulateWithHoles(points, holes, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n  const triangles = earcut(points, holes, 2);\n  if (!triangles) {\n    return;\n  }\n  for (let i = 0; i < triangles.length; i += 3) {\n    indices[indicesOffset++] = triangles[i] + verticesOffset;\n    indices[indicesOffset++] = triangles[i + 1] + verticesOffset;\n    indices[indicesOffset++] = triangles[i + 2] + verticesOffset;\n  }\n  let index = verticesOffset * verticesStride;\n  for (let i = 0; i < points.length; i += 2) {\n    vertices[index] = points[i];\n    vertices[index + 1] = points[i + 1];\n    index += verticesStride;\n  }\n}\n\nexport { triangulateWithHoles };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { triangulateWithHoles } from '../utils/triangulateWithHoles.mjs';\n\n\"use strict\";\nconst emptyArray = [];\nconst buildPolygon = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"polygon\"\n  },\n  build(shape, points) {\n    for (let i = 0; i < shape.points.length; i++) {\n      points[i] = shape.points[i];\n    }\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    triangulateWithHoles(points, emptyArray, vertices, verticesStride, verticesOffset, indices, indicesOffset);\n  }\n};\n\nexport { buildPolygon };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildRectangle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"rectangle\"\n  },\n  build(shape, points) {\n    const rectData = shape;\n    const x = rectData.x;\n    const y = rectData.y;\n    const width = rectData.width;\n    const height = rectData.height;\n    if (!(width >= 0 && height >= 0)) {\n      return points;\n    }\n    points[0] = x;\n    points[1] = y;\n    points[2] = x + width;\n    points[3] = y;\n    points[4] = x + width;\n    points[5] = y + height;\n    points[6] = x;\n    points[7] = y + height;\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    let count = 0;\n    verticesOffset *= verticesStride;\n    vertices[verticesOffset + count] = points[0];\n    vertices[verticesOffset + count + 1] = points[1];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[2];\n    vertices[verticesOffset + count + 1] = points[3];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[6];\n    vertices[verticesOffset + count + 1] = points[7];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[4];\n    vertices[verticesOffset + count + 1] = points[5];\n    count += verticesStride;\n    const verticesIndex = verticesOffset / verticesStride;\n    indices[indicesOffset++] = verticesIndex;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 2;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 3;\n    indices[indicesOffset++] = verticesIndex + 2;\n  }\n};\n\nexport { buildRectangle };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst buildTriangle = {\n  extension: {\n    type: ExtensionType.ShapeBuilder,\n    name: \"triangle\"\n  },\n  build(shape, points) {\n    points[0] = shape.x;\n    points[1] = shape.y;\n    points[2] = shape.x2;\n    points[3] = shape.y2;\n    points[4] = shape.x3;\n    points[5] = shape.y3;\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    let count = 0;\n    verticesOffset *= verticesStride;\n    vertices[verticesOffset + count] = points[0];\n    vertices[verticesOffset + count + 1] = points[1];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[2];\n    vertices[verticesOffset + count + 1] = points[3];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[4];\n    vertices[verticesOffset + count + 1] = points[5];\n    const verticesIndex = verticesOffset / verticesStride;\n    indices[indicesOffset++] = verticesIndex;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 2;\n  }\n};\n\nexport { buildTriangle };\n\n", "import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { buildUvs, buildSimpleUvs } from '../../../../rendering/renderers/shared/geometry/utils/buildUvs.mjs';\nimport { transformVertices } from '../../../../rendering/renderers/shared/geometry/utils/transformVertices.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../../../utils/pool/PoolGroup.mjs';\nimport { BatchableGraphics } from '../BatchableGraphics.mjs';\nimport { buildCircle, buildEllipse, buildRoundedRectangle } from '../buildCommands/buildCircle.mjs';\nimport { buildLine } from '../buildCommands/buildLine.mjs';\nimport { buildPolygon } from '../buildCommands/buildPolygon.mjs';\nimport { buildRectangle } from '../buildCommands/buildRectangle.mjs';\nimport { buildTriangle } from '../buildCommands/buildTriangle.mjs';\nimport { triangulateWithHoles } from './triangulateWithHoles.mjs';\n\n\"use strict\";\nconst shapeBuilders = {};\nextensions.handleByMap(ExtensionType.ShapeBuilder, shapeBuilders);\nextensions.add(buildRectangle, buildPolygon, buildTriangle, buildCircle, buildEllipse, buildRoundedRectangle);\nconst tempRect = new Rectangle();\nfunction buildContextBatches(context, gpuContext) {\n  const { geometryData, batches } = gpuContext;\n  batches.length = 0;\n  geometryData.indices.length = 0;\n  geometryData.vertices.length = 0;\n  geometryData.uvs.length = 0;\n  for (let i = 0; i < context.instructions.length; i++) {\n    const instruction = context.instructions[i];\n    if (instruction.action === \"texture\") {\n      addTextureToGeometryData(instruction.data, batches, geometryData);\n    } else if (instruction.action === \"fill\" || instruction.action === \"stroke\") {\n      const isStroke = instruction.action === \"stroke\";\n      const shapePath = instruction.data.path.shapePath;\n      const style = instruction.data.style;\n      const hole = instruction.data.hole;\n      if (isStroke && hole) {\n        addShapePathToGeometryData(hole.shapePath, style, null, true, batches, geometryData);\n      }\n      addShapePathToGeometryData(shapePath, style, hole, isStroke, batches, geometryData);\n    }\n  }\n}\nfunction addTextureToGeometryData(data, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  const indexOffset = indices.length;\n  const vertOffset = vertices.length / 2;\n  const points = [];\n  const build = shapeBuilders.rectangle;\n  const rect = tempRect;\n  const texture = data.image;\n  rect.x = data.dx;\n  rect.y = data.dy;\n  rect.width = data.dw;\n  rect.height = data.dh;\n  const matrix = data.transform;\n  build.build(rect, points);\n  if (matrix) {\n    transformVertices(points, matrix);\n  }\n  build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n  const textureUvs = texture.uvs;\n  uvs.push(\n    textureUvs.x0,\n    textureUvs.y0,\n    textureUvs.x1,\n    textureUvs.y1,\n    textureUvs.x3,\n    textureUvs.y3,\n    textureUvs.x2,\n    textureUvs.y2\n  );\n  const graphicsBatch = BigPool.get(BatchableGraphics);\n  graphicsBatch.indexOffset = indexOffset;\n  graphicsBatch.indexSize = indices.length - indexOffset;\n  graphicsBatch.attributeOffset = vertOffset;\n  graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n  graphicsBatch.baseColor = data.style;\n  graphicsBatch.alpha = data.alpha;\n  graphicsBatch.texture = texture;\n  graphicsBatch.geometryData = geometryData;\n  batches.push(graphicsBatch);\n}\nfunction addShapePathToGeometryData(shapePath, style, hole, isStroke, batches, geometryData) {\n  const { vertices, uvs, indices } = geometryData;\n  const lastIndex = shapePath.shapePrimitives.length - 1;\n  shapePath.shapePrimitives.forEach(({ shape, transform: matrix }, i) => {\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n    const points = [];\n    const build = shapeBuilders[shape.type];\n    build.build(shape, points);\n    if (matrix) {\n      transformVertices(points, matrix);\n    }\n    if (!isStroke) {\n      if (hole && lastIndex === i) {\n        if (lastIndex !== 0) {\n          console.warn(\"[Pixi Graphics] only the last shape have be cut out\");\n        }\n        const holeIndices = [];\n        const otherPoints = points.slice();\n        const holeArrays = getHoleArrays(hole.shapePath);\n        holeArrays.forEach((holePoints) => {\n          holeIndices.push(otherPoints.length / 2);\n          otherPoints.push(...holePoints);\n        });\n        triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n      } else {\n        build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n      }\n    } else {\n      const close = shape.closePath ?? true;\n      const lineStyle = style;\n      buildLine(points, lineStyle, false, close, vertices, 2, vertOffset, indices, indexOffset);\n    }\n    const uvsOffset = uvs.length / 2;\n    const texture = style.texture;\n    if (texture !== Texture.WHITE) {\n      const textureMatrix = style.matrix;\n      if (textureMatrix) {\n        if (matrix) {\n          textureMatrix.append(matrix.clone().invert());\n        }\n        buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, vertices.length / 2 - vertOffset, textureMatrix);\n      }\n    } else {\n      buildSimpleUvs(uvs, uvsOffset, 2, vertices.length / 2 - vertOffset);\n    }\n    const graphicsBatch = BigPool.get(BatchableGraphics);\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n    graphicsBatch.attributeOffset = vertOffset;\n    graphicsBatch.attributeSize = vertices.length / 2 - vertOffset;\n    graphicsBatch.baseColor = style.color;\n    graphicsBatch.alpha = style.alpha;\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n    batches.push(graphicsBatch);\n  });\n}\nfunction getHoleArrays(shape) {\n  if (!shape)\n    return [];\n  const holePrimitives = shape.shapePrimitives;\n  const holeArrays = [];\n  for (let k = 0; k < holePrimitives.length; k++) {\n    const holePrimitive = holePrimitives[k].shape;\n    const holePoints = [];\n    const holeBuilder = shapeBuilders[holePrimitive.type];\n    holeBuilder.build(holePrimitive, holePoints);\n    holeArrays.push(holePoints);\n  }\n  return holeArrays;\n}\n\nexport { buildContextBatches, shapeBuilders };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup.mjs';\nimport { DefaultBatcher } from '../../../rendering/batcher/shared/DefaultBatcher.mjs';\nimport { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet.mjs';\nimport { deprecation, v8_3_4 } from '../../../utils/logging/deprecation.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { buildContextBatches } from './utils/buildContextBatches.mjs';\n\n\"use strict\";\nclass GpuGraphicsContext {\n  constructor() {\n    this.batches = [];\n    this.geometryData = {\n      vertices: [],\n      uvs: [],\n      indices: []\n    };\n  }\n}\nclass GraphicsContextRenderData {\n  constructor() {\n    this.batcher = new DefaultBatcher();\n    this.instructions = new InstructionSet();\n  }\n  init() {\n    this.instructions.reset();\n  }\n  /**\n   * @deprecated since version 8.0.0\n   * Use `batcher.geometry` instead.\n   * @see {Batcher#geometry}\n   */\n  get geometry() {\n    deprecation(v8_3_4, \"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead.\");\n    return this.batcher.geometry;\n  }\n}\nconst _GraphicsContextSystem = class _GraphicsContextSystem {\n  constructor() {\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    this._gpuContextHash = {};\n    // used for non-batchable graphics\n    this._graphicsDataContextHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Runner init called, update the default options\n   * @ignore\n   */\n  init(options) {\n    _GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness ?? _GraphicsContextSystem.defaultOptions.bezierSmoothness;\n  }\n  getContextRenderData(context) {\n    return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n  }\n  // Context management functions\n  updateGpuContext(context) {\n    let gpuContext = this._gpuContextHash[context.uid] || this._initContext(context);\n    if (context.dirty) {\n      if (gpuContext) {\n        this._cleanGraphicsContextData(context);\n      } else {\n        gpuContext = this._initContext(context);\n      }\n      buildContextBatches(context, gpuContext);\n      const batchMode = context.batchMode;\n      if (context.customShader || batchMode === \"no-batch\") {\n        gpuContext.isBatchable = false;\n      } else if (batchMode === \"auto\") {\n        gpuContext.isBatchable = gpuContext.geometryData.vertices.length < 400;\n      }\n      context.dirty = false;\n    }\n    return gpuContext;\n  }\n  getGpuContext(context) {\n    return this._gpuContextHash[context.uid] || this._initContext(context);\n  }\n  _initContextRenderData(context) {\n    const graphicsData = BigPool.get(GraphicsContextRenderData);\n    const { batches, geometryData } = this._gpuContextHash[context.uid];\n    const vertexSize = geometryData.vertices.length;\n    const indexSize = geometryData.indices.length;\n    for (let i = 0; i < batches.length; i++) {\n      batches[i].applyTransform = false;\n    }\n    const batcher = graphicsData.batcher;\n    batcher.ensureAttributeBuffer(vertexSize);\n    batcher.ensureIndexBuffer(indexSize);\n    batcher.begin();\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batcher.add(batch);\n    }\n    batcher.finish(graphicsData.instructions);\n    const geometry = batcher.geometry;\n    geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n    geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n    const drawBatches = batcher.batches;\n    for (let i = 0; i < drawBatches.length; i++) {\n      const batch = drawBatches[i];\n      batch.bindGroup = getTextureBatchBindGroup(batch.textures.textures, batch.textures.count);\n    }\n    this._graphicsDataContextHash[context.uid] = graphicsData;\n    return graphicsData;\n  }\n  _initContext(context) {\n    const gpuContext = new GpuGraphicsContext();\n    gpuContext.context = context;\n    this._gpuContextHash[context.uid] = gpuContext;\n    context.on(\"destroy\", this.onGraphicsContextDestroy, this);\n    return this._gpuContextHash[context.uid];\n  }\n  onGraphicsContextDestroy(context) {\n    this._cleanGraphicsContextData(context);\n    context.off(\"destroy\", this.onGraphicsContextDestroy, this);\n    this._gpuContextHash[context.uid] = null;\n  }\n  _cleanGraphicsContextData(context) {\n    const gpuContext = this._gpuContextHash[context.uid];\n    if (!gpuContext.isBatchable) {\n      if (this._graphicsDataContextHash[context.uid]) {\n        BigPool.return(this.getContextRenderData(context));\n        this._graphicsDataContextHash[context.uid] = null;\n      }\n    }\n    if (gpuContext.batches) {\n      gpuContext.batches.forEach((batch) => {\n        BigPool.return(batch);\n      });\n    }\n  }\n  destroy() {\n    for (const i in this._gpuContextHash) {\n      if (this._gpuContextHash[i]) {\n        this.onGraphicsContextDestroy(this._gpuContextHash[i].context);\n      }\n    }\n  }\n};\n/** @ignore */\n_GraphicsContextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"graphicsContext\"\n};\n/** The default options for the GraphicsContextSystem. */\n_GraphicsContextSystem.defaultOptions = {\n  /**\n   * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n   * @default 0.5\n   */\n  bezierSmoothness: 0.5\n};\nlet GraphicsContextSystem = _GraphicsContextSystem;\n\nexport { GpuGraphicsContext, GraphicsContextRenderData, GraphicsContextSystem };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics._didGraphicsUpdate) {\n      graphics._didGraphicsUpdate = false;\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n\n", "\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      const texture = mesh.texture;\n      if (batchableMesh.texture._source !== texture._source) {\n        if (batchableMesh.texture._source !== texture._source) {\n          return !batchableMesh._batcher.checkAndUpdateTexture(batchableMesh, texture);\n        }\n      }\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      const { width, height } = this._renderer.canvasText.getTextureSize(\n        text.text,\n        text.resolution,\n        text._style\n      );\n      if (\n        // is only being used by this text:\n        this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1 && width === gpuText.texture._source.width && height === gpuText.texture._source.height\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n\n", "import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nconst _FillGradient = class _FillGradient {\n  constructor(x0, y0, x1, y1) {\n    /** unique id for this fill gradient */\n    this.uid = uid(\"fillGradient\");\n    this.type = \"linear\";\n    this.gradientStops = [];\n    this._styleKey = null;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n  addColorStop(offset, color) {\n    this.gradientStops.push({ offset, color: Color.shared.setValue(color).toHexa() });\n    this._styleKey = null;\n    return this;\n  }\n  // TODO move to the system!\n  buildLinearGradient() {\n    const defaultSize = _FillGradient.defaultTextureSize;\n    const { gradientStops } = this;\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = defaultSize;\n    canvas.height = defaultSize;\n    const ctx = canvas.getContext(\"2d\");\n    const gradient = ctx.createLinearGradient(0, 0, _FillGradient.defaultTextureSize, 1);\n    for (let i = 0; i < gradientStops.length; i++) {\n      const stop = gradientStops[i];\n      gradient.addColorStop(stop.offset, stop.color);\n    }\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, defaultSize, defaultSize);\n    this.texture = new Texture({\n      source: new ImageSource({\n        resource: canvas,\n        addressModeU: \"clamp-to-edge\",\n        addressModeV: \"repeat\"\n      })\n    });\n    const { x0, y0, x1, y1 } = this;\n    const m = new Matrix();\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx);\n    m.translate(-x0, -y0);\n    m.scale(1 / defaultSize, 1 / defaultSize);\n    m.rotate(-angle);\n    m.scale(256 / dist, 1);\n    this.transform = m;\n    this._styleKey = null;\n  }\n  get styleKey() {\n    if (this._styleKey) {\n      return this._styleKey;\n    }\n    const stops = this.gradientStops.map((stop) => `${stop.offset}-${stop.color}`).join(\"-\");\n    const texture = this.texture.uid;\n    const transform = this.transform.toArray().join(\"-\");\n    return `fill-gradient-${this.uid}-${stops}-${texture}-${transform}-${this.x0}-${this.y0}-${this.x1}-${this.y1}`;\n  }\n};\n_FillGradient.defaultTextureSize = 256;\nlet FillGradient = _FillGradient;\n\nexport { FillGradient };\n\n", "import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nconst repetitionMap = {\n  repeat: {\n    addressModeU: \"repeat\",\n    addressModeV: \"repeat\"\n  },\n  \"repeat-x\": {\n    addressModeU: \"repeat\",\n    addressModeV: \"clamp-to-edge\"\n  },\n  \"repeat-y\": {\n    addressModeU: \"clamp-to-edge\",\n    addressModeV: \"repeat\"\n  },\n  \"no-repeat\": {\n    addressModeU: \"clamp-to-edge\",\n    addressModeV: \"clamp-to-edge\"\n  }\n};\nclass FillPattern {\n  constructor(texture, repetition) {\n    /** unique id for this fill pattern */\n    this.uid = uid(\"fillPattern\");\n    this.transform = new Matrix();\n    this._styleKey = null;\n    this.texture = texture;\n    this.transform.scale(\n      1 / texture.frame.width,\n      1 / texture.frame.height\n    );\n    if (repetition) {\n      texture.source.style.addressModeU = repetitionMap[repetition].addressModeU;\n      texture.source.style.addressModeV = repetitionMap[repetition].addressModeV;\n    }\n  }\n  setTransform(transform) {\n    const texture = this.texture;\n    this.transform.copyFrom(transform);\n    this.transform.invert();\n    this.transform.scale(\n      1 / texture.frame.width,\n      1 / texture.frame.height\n    );\n    this._styleKey = null;\n  }\n  get styleKey() {\n    if (this._styleKey)\n      return this._styleKey;\n    this._styleKey = `fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join(\"-\")}`;\n    return this._styleKey;\n  }\n}\n\nexport { FillPattern };\n\n", "import parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nfunction SVGToGraphicsPath(svgPath, path) {\n  const commands = parse(svgPath);\n  const subpaths = [];\n  let currentSubPath = null;\n  let lastX = 0;\n  let lastY = 0;\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i];\n    const type = command[0];\n    const data = command;\n    switch (type) {\n      case \"M\":\n        lastX = data[1];\n        lastY = data[2];\n        path.moveTo(lastX, lastY);\n        break;\n      case \"m\":\n        lastX += data[1];\n        lastY += data[2];\n        path.moveTo(lastX, lastY);\n        break;\n      case \"H\":\n        lastX = data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"h\":\n        lastX += data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"V\":\n        lastY = data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"v\":\n        lastY += data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"L\":\n        lastX = data[1];\n        lastY = data[2];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"l\":\n        lastX += data[1];\n        lastY += data[2];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"C\":\n        lastX = data[5];\n        lastY = data[6];\n        path.bezierCurveTo(\n          data[1],\n          data[2],\n          data[3],\n          data[4],\n          lastX,\n          lastY\n        );\n        break;\n      case \"c\":\n        path.bezierCurveTo(\n          lastX + data[1],\n          lastY + data[2],\n          lastX + data[3],\n          lastY + data[4],\n          lastX + data[5],\n          lastY + data[6]\n        );\n        lastX += data[5];\n        lastY += data[6];\n        break;\n      case \"S\":\n        lastX = data[3];\n        lastY = data[4];\n        path.bezierCurveToShort(\n          data[1],\n          data[2],\n          lastX,\n          lastY\n        );\n        break;\n      case \"s\":\n        path.bezierCurveToShort(\n          lastX + data[1],\n          lastY + data[2],\n          lastX + data[3],\n          lastY + data[4]\n        );\n        lastX += data[3];\n        lastY += data[4];\n        break;\n      case \"Q\":\n        lastX = data[3];\n        lastY = data[4];\n        path.quadraticCurveTo(\n          data[1],\n          data[2],\n          lastX,\n          lastY\n        );\n        break;\n      case \"q\":\n        path.quadraticCurveTo(\n          lastX + data[1],\n          lastY + data[2],\n          lastX + data[3],\n          lastY + data[4]\n        );\n        lastX += data[3];\n        lastY += data[4];\n        break;\n      case \"T\":\n        lastX = data[1];\n        lastY = data[2];\n        path.quadraticCurveToShort(\n          lastX,\n          lastY\n        );\n        break;\n      case \"t\":\n        lastX += data[1];\n        lastY += data[2];\n        path.quadraticCurveToShort(\n          lastX,\n          lastY\n        );\n        break;\n      case \"A\":\n        lastX = data[6];\n        lastY = data[7];\n        path.arcToSvg(\n          data[1],\n          data[2],\n          data[3],\n          data[4],\n          data[5],\n          lastX,\n          lastY\n        );\n        break;\n      case \"a\":\n        lastX += data[6];\n        lastY += data[7];\n        path.arcToSvg(\n          data[1],\n          data[2],\n          data[3],\n          data[4],\n          data[5],\n          lastX,\n          lastY\n        );\n        break;\n      case \"Z\":\n      case \"z\":\n        path.closePath();\n        if (subpaths.length > 0) {\n          currentSubPath = subpaths.pop();\n          if (currentSubPath) {\n            lastX = currentSubPath.startX;\n            lastY = currentSubPath.startY;\n          } else {\n            lastX = 0;\n            lastY = 0;\n          }\n        }\n        currentSubPath = null;\n        break;\n      default:\n        warn(`Unknown SVG path command: ${type}`);\n    }\n    if (type !== \"Z\" && type !== \"z\") {\n      if (currentSubPath === null) {\n        currentSubPath = { startX: lastX, startY: lastY };\n        subpaths.push(currentSubPath);\n      }\n    }\n  }\n  return path;\n}\n\nexport { SVGToGraphicsPath };\n\n", "import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nclass Circle {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  constructor(x = 0, y = 0, radius = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    this.type = \"circle\";\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   * @returns A copy of the Circle\n   */\n  clone() {\n    return new Circle(this.x, this.y, this.radius);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  contains(x, y) {\n    if (this.radius <= 0)\n      return false;\n    const r2 = this.radius * this.radius;\n    let dx = this.x - x;\n    let dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param width - The width of the line to check\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  strokeContains(x, y, width) {\n    if (this.radius === 0)\n      return false;\n    const dx = this.x - x;\n    const dy = this.y - y;\n    const r = this.radius;\n    const w2 = width / 2;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < r + w2 && distance > r - w2;\n  }\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    out.x = this.x - this.radius;\n    out.y = this.y - this.radius;\n    out.width = this.radius * 2;\n    out.height = this.radius * 2;\n    return out;\n  }\n  /**\n   * Copies another circle to this one.\n   * @param circle - The circle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(circle) {\n    this.x = circle.x;\n    this.y = circle.y;\n    this.radius = circle.radius;\n    return this;\n  }\n  /**\n   * Copies this circle to another one.\n   * @param circle - The circle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(circle) {\n    circle.copyFrom(this);\n    return circle;\n  }\n  toString() {\n    return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n  }\n}\n\nexport { Circle };\n\n", "import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nclass Ellipse {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    this.type = \"ellipse\";\n    this.x = x;\n    this.y = y;\n    this.halfWidth = halfWidth;\n    this.halfHeight = halfHeight;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {Ellipse} A copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.halfWidth <= 0 || this.halfHeight <= 0) {\n      return false;\n    }\n    let normx = (x - this.x) / this.halfWidth;\n    let normy = (y - this.y) / this.halfHeight;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param width\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  strokeContains(x, y, width) {\n    const { halfWidth, halfHeight } = this;\n    if (halfWidth <= 0 || halfHeight <= 0) {\n      return false;\n    }\n    const halfStrokeWidth = width / 2;\n    const innerA = halfWidth - halfStrokeWidth;\n    const innerB = halfHeight - halfStrokeWidth;\n    const outerA = halfWidth + halfStrokeWidth;\n    const outerB = halfHeight + halfStrokeWidth;\n    const normalizedX = x - this.x;\n    const normalizedY = y - this.y;\n    const innerEllipse = normalizedX * normalizedX / (innerA * innerA) + normalizedY * normalizedY / (innerB * innerB);\n    const outerEllipse = normalizedX * normalizedX / (outerA * outerA) + normalizedY * normalizedY / (outerB * outerB);\n    return innerEllipse > 1 && outerEllipse <= 1;\n  }\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    out.x = this.x - this.halfWidth;\n    out.y = this.y - this.halfHeight;\n    out.width = this.halfWidth * 2;\n    out.height = this.halfHeight * 2;\n    return out;\n  }\n  /**\n   * Copies another ellipse to this one.\n   * @param ellipse - The ellipse to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(ellipse) {\n    this.x = ellipse.x;\n    this.y = ellipse.y;\n    this.halfWidth = ellipse.halfWidth;\n    this.halfHeight = ellipse.halfHeight;\n    return this;\n  }\n  /**\n   * Copies this ellipse to another one.\n   * @param ellipse - The ellipse to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(ellipse) {\n    ellipse.copyFrom(this);\n    return ellipse;\n  }\n  toString() {\n    return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n  }\n}\n\nexport { Ellipse };\n\n", "\"use strict\";\nfunction squaredDistanceToLineSegment(x, y, x1, y1, x2, y2) {\n  const a = x - x1;\n  const b = y - y1;\n  const c = x2 - x1;\n  const d = y2 - y1;\n  const dot = a * c + b * d;\n  const lenSq = c * c + d * d;\n  let param = -1;\n  if (lenSq !== 0) {\n    param = dot / lenSq;\n  }\n  let xx;\n  let yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * c;\n    yy = y1 + param * d;\n  }\n  const dx = x - xx;\n  const dy = y - yy;\n  return dx * dx + dy * dy;\n}\n\nexport { squaredDistanceToLineSegment };\n\n", "import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment.mjs';\nimport { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nclass Polygon {\n  /**\n   * @param points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  constructor(...points) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'polygon'\n     */\n    this.type = \"polygon\";\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] !== \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.closePath = true;\n  }\n  /**\n   * Creates a clone of this polygon.\n   * @returns - A copy of the polygon.\n   */\n  clone() {\n    const points = this.points.slice();\n    const polygon = new Polygon(points);\n    polygon.closePath = this.closePath;\n    return polygon;\n  }\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this polygon.\n   */\n  contains(x, y) {\n    let inside = false;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2];\n      const yi = this.points[i * 2 + 1];\n      const xj = this.points[j * 2];\n      const yj = this.points[j * 2 + 1];\n      const intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this polygon including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @returns Whether the x/y coordinates are within this polygon\n   */\n  strokeContains(x, y, strokeWidth) {\n    const halfStrokeWidth = strokeWidth / 2;\n    const halfStrokeWidthSqrd = halfStrokeWidth * halfStrokeWidth;\n    const { points } = this;\n    const iterationLength = points.length - (this.closePath ? 0 : 2);\n    for (let i = 0; i < iterationLength; i += 2) {\n      const x1 = points[i];\n      const y1 = points[i + 1];\n      const x2 = points[(i + 2) % points.length];\n      const y2 = points[(i + 3) % points.length];\n      const distanceSqrd = squaredDistanceToLineSegment(x, y, x1, y1, x2, y2);\n      if (distanceSqrd <= halfStrokeWidthSqrd) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Returns the framing rectangle of the polygon as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    const points = this.points;\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i];\n      const y = points[i + 1];\n      minX = x < minX ? x : minX;\n      maxX = x > maxX ? x : maxX;\n      minY = y < minY ? y : minY;\n      maxY = y > maxY ? y : maxY;\n    }\n    out.x = minX;\n    out.width = maxX - minX;\n    out.y = minY;\n    out.height = maxY - minY;\n    return out;\n  }\n  /**\n   * Copies another polygon to this one.\n   * @param polygon - The polygon to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(polygon) {\n    this.points = polygon.points.slice();\n    this.closePath = polygon.closePath;\n    return this;\n  }\n  /**\n   * Copies this polygon to another one.\n   * @param polygon - The polygon to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(polygon) {\n    polygon.copyFrom(this);\n    return polygon;\n  }\n  toString() {\n    return `[pixi.js/math:PolygoncloseStroke=${this.closePath}points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, \"\")}]`;\n  }\n  /**\n   * Get the last X coordinate of the polygon\n   * @readonly\n   */\n  get lastX() {\n    return this.points[this.points.length - 2];\n  }\n  /**\n   * Get the last Y coordinate of the polygon\n   * @readonly\n   */\n  get lastY() {\n    return this.points[this.points.length - 1];\n  }\n  /**\n   * Get the first X coordinate of the polygon\n   * @readonly\n   */\n  get x() {\n    return this.points[this.points.length - 2];\n  }\n  /**\n   * Get the first Y coordinate of the polygon\n   * @readonly\n   */\n  get y() {\n    return this.points[this.points.length - 1];\n  }\n}\n\nexport { Polygon };\n\n", "import { Rectangle } from './Rectangle.mjs';\n\n\"use strict\";\nconst isCornerWithinStroke = (pX, pY, cornerX, cornerY, radius, halfStrokeWidth) => {\n  const dx = pX - cornerX;\n  const dy = pY - cornerY;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance >= radius - halfStrokeWidth && distance <= radius + halfStrokeWidth;\n};\nclass RoundedRectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0, radius = 20) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    this.type = \"roundedRectangle\";\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n  }\n  /**\n   * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    out.x = this.x;\n    out.y = this.y;\n    out.width = this.width;\n    out.height = this.height;\n    return out;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        let dx = x - (this.x + radius);\n        let dy = y - (this.y + radius);\n        const radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param pX - The X coordinate of the point to test\n   * @param pY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(pX, pY, strokeWidth) {\n    const { x, y, width, height, radius } = this;\n    const halfStrokeWidth = strokeWidth / 2;\n    const innerX = x + radius;\n    const innerY = y + radius;\n    const innerWidth = width - radius * 2;\n    const innerHeight = height - radius * 2;\n    const rightBound = x + width;\n    const bottomBound = y + height;\n    if ((pX >= x - halfStrokeWidth && pX <= x + halfStrokeWidth || pX >= rightBound - halfStrokeWidth && pX <= rightBound + halfStrokeWidth) && pY >= innerY && pY <= innerY + innerHeight) {\n      return true;\n    }\n    if ((pY >= y - halfStrokeWidth && pY <= y + halfStrokeWidth || pY >= bottomBound - halfStrokeWidth && pY <= bottomBound + halfStrokeWidth) && pX >= innerX && pX <= innerX + innerWidth) {\n      return true;\n    }\n    return (\n      // Top-left\n      pX < innerX && pY < innerY && isCornerWithinStroke(pX, pY, innerX, innerY, radius, halfStrokeWidth) || pX > rightBound - radius && pY < innerY && isCornerWithinStroke(pX, pY, rightBound - radius, innerY, radius, halfStrokeWidth) || pX > rightBound - radius && pY > bottomBound - radius && isCornerWithinStroke(pX, pY, rightBound - radius, bottomBound - radius, radius, halfStrokeWidth) || pX < innerX && pY > bottomBound - radius && isCornerWithinStroke(pX, pY, innerX, bottomBound - radius, radius, halfStrokeWidth)\n    );\n  }\n  toString() {\n    return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n  }\n}\n\nexport { RoundedRectangle };\n\n", "import { GraphicsContextSystem } from '../GraphicsContextSystem.mjs';\n\n\"use strict\";\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 11920929e-14;\nconst PATH_DISTANCE_EPSILON = 1;\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nconst mCuspLimit = 0;\nfunction buildAdaptiveBezier(points, sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, smoothness) {\n  const scale = 1;\n  const smoothing = Math.min(\n    0.99,\n    // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n    Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n  );\n  let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n  distanceTolerance *= distanceTolerance;\n  begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance);\n  return points;\n}\nfunction begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance) {\n  recursive(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance, 0);\n  points.push(eX, eY);\n}\nfunction recursive(x1, y1, x2, y2, x3, y3, x4, y4, points, distanceTolerance, level) {\n  if (level > RECURSION_LIMIT) {\n    return;\n  }\n  const pi = Math.PI;\n  const x12 = (x1 + x2) / 2;\n  const y12 = (y1 + y2) / 2;\n  const x23 = (x2 + x3) / 2;\n  const y23 = (y2 + y3) / 2;\n  const x34 = (x3 + x4) / 2;\n  const y34 = (y3 + y4) / 2;\n  const x123 = (x12 + x23) / 2;\n  const y123 = (y12 + y23) / 2;\n  const x234 = (x23 + x34) / 2;\n  const y234 = (y23 + y34) / 2;\n  const x1234 = (x123 + x234) / 2;\n  const y1234 = (y123 + y234) / 2;\n  if (level > 0) {\n    let dx = x4 - x1;\n    let dy = y4 - y1;\n    const d2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx);\n    const d3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx);\n    let da1;\n    let da2;\n    if (d2 > FLT_EPSILON && d3 > FLT_EPSILON) {\n      if ((d2 + d3) * (d2 + d3) <= distanceTolerance * (dx * dx + dy * dy)) {\n        if (mAngleTolerance < curveAngleToleranceEpsilon) {\n          points.push(x1234, y1234);\n          return;\n        }\n        const a23 = Math.atan2(y3 - y2, x3 - x2);\n        da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));\n        da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);\n        if (da1 >= pi)\n          da1 = 2 * pi - da1;\n        if (da2 >= pi)\n          da2 = 2 * pi - da2;\n        if (da1 + da2 < mAngleTolerance) {\n          points.push(x1234, y1234);\n          return;\n        }\n        if (mCuspLimit !== 0) {\n          if (da1 > mCuspLimit) {\n            points.push(x2, y2);\n            return;\n          }\n          if (da2 > mCuspLimit) {\n            points.push(x3, y3);\n            return;\n          }\n        }\n      }\n    } else if (d2 > FLT_EPSILON) {\n      if (d2 * d2 <= distanceTolerance * (dx * dx + dy * dy)) {\n        if (mAngleTolerance < curveAngleToleranceEpsilon) {\n          points.push(x1234, y1234);\n          return;\n        }\n        da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n        if (da1 >= pi)\n          da1 = 2 * pi - da1;\n        if (da1 < mAngleTolerance) {\n          points.push(x2, y2);\n          points.push(x3, y3);\n          return;\n        }\n        if (mCuspLimit !== 0) {\n          if (da1 > mCuspLimit) {\n            points.push(x2, y2);\n            return;\n          }\n        }\n      }\n    } else if (d3 > FLT_EPSILON) {\n      if (d3 * d3 <= distanceTolerance * (dx * dx + dy * dy)) {\n        if (mAngleTolerance < curveAngleToleranceEpsilon) {\n          points.push(x1234, y1234);\n          return;\n        }\n        da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));\n        if (da1 >= pi)\n          da1 = 2 * pi - da1;\n        if (da1 < mAngleTolerance) {\n          points.push(x2, y2);\n          points.push(x3, y3);\n          return;\n        }\n        if (mCuspLimit !== 0) {\n          if (da1 > mCuspLimit) {\n            points.push(x3, y3);\n            return;\n          }\n        }\n      }\n    } else {\n      dx = x1234 - (x1 + x4) / 2;\n      dy = y1234 - (y1 + y4) / 2;\n      if (dx * dx + dy * dy <= distanceTolerance) {\n        points.push(x1234, y1234);\n        return;\n      }\n    }\n  }\n  recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1);\n  recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1);\n}\n\nexport { buildAdaptiveBezier };\n\n", "import { GraphicsContextSystem } from '../GraphicsContextSystem.mjs';\n\n\"use strict\";\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 11920929e-14;\nconst PATH_DISTANCE_EPSILON = 1;\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nfunction buildAdaptiveQuadratic(points, sX, sY, cp1x, cp1y, eX, eY, smoothness) {\n  const scale = 1;\n  const smoothing = Math.min(\n    0.99,\n    // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n    Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n  );\n  let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n  distanceTolerance *= distanceTolerance;\n  begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance);\n  return points;\n}\nfunction begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance) {\n  recursive(points, sX, sY, cp1x, cp1y, eX, eY, distanceTolerance, 0);\n  points.push(eX, eY);\n}\nfunction recursive(points, x1, y1, x2, y2, x3, y3, distanceTolerance, level) {\n  if (level > RECURSION_LIMIT) {\n    return;\n  }\n  const pi = Math.PI;\n  const x12 = (x1 + x2) / 2;\n  const y12 = (y1 + y2) / 2;\n  const x23 = (x2 + x3) / 2;\n  const y23 = (y2 + y3) / 2;\n  const x123 = (x12 + x23) / 2;\n  const y123 = (y12 + y23) / 2;\n  let dx = x3 - x1;\n  let dy = y3 - y1;\n  const d = Math.abs((x2 - x3) * dy - (y2 - y3) * dx);\n  if (d > FLT_EPSILON) {\n    if (d * d <= distanceTolerance * (dx * dx + dy * dy)) {\n      if (mAngleTolerance < curveAngleToleranceEpsilon) {\n        points.push(x123, y123);\n        return;\n      }\n      let da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n      if (da >= pi)\n        da = 2 * pi - da;\n      if (da < mAngleTolerance) {\n        points.push(x123, y123);\n        return;\n      }\n    }\n  } else {\n    dx = x123 - (x1 + x3) / 2;\n    dy = y123 - (y1 + y3) / 2;\n    if (dx * dx + dy * dy <= distanceTolerance) {\n      points.push(x123, y123);\n      return;\n    }\n  }\n  recursive(points, x1, y1, x12, y12, x123, y123, distanceTolerance, level + 1);\n  recursive(points, x123, y123, x23, y23, x3, y3, distanceTolerance, level + 1);\n}\n\nexport { buildAdaptiveQuadratic };\n\n", "\"use strict\";\nfunction buildArc(points, x, y, radius, start, end, clockwise, steps) {\n  let dist = Math.abs(start - end);\n  if (!clockwise && start > end) {\n    dist = 2 * Math.PI - dist;\n  } else if (clockwise && end > start) {\n    dist = 2 * Math.PI - dist;\n  }\n  steps = steps || Math.max(6, Math.floor(6 * Math.pow(radius, 1 / 3) * (dist / Math.PI)));\n  steps = Math.max(steps, 3);\n  let f = dist / steps;\n  let t = start;\n  f *= clockwise ? -1 : 1;\n  for (let i = 0; i < steps + 1; i++) {\n    const cs = Math.cos(t);\n    const sn = Math.sin(t);\n    const nx = x + cs * radius;\n    const ny = y + sn * radius;\n    points.push(nx, ny);\n    t += f;\n  }\n}\n\nexport { buildArc };\n\n", "import { buildArc } from './buildArc.mjs';\n\n\"use strict\";\nfunction buildArcTo(points, x1, y1, x2, y2, radius) {\n  const fromX = points[points.length - 2];\n  const fromY = points[points.length - 1];\n  const a1 = fromY - y1;\n  const b1 = fromX - x1;\n  const a2 = y2 - y1;\n  const b2 = x2 - x1;\n  const mm = Math.abs(a1 * b2 - b1 * a2);\n  if (mm < 1e-8 || radius === 0) {\n    if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) {\n      points.push(x1, y1);\n    }\n    return;\n  }\n  const dd = a1 * a1 + b1 * b1;\n  const cc = a2 * a2 + b2 * b2;\n  const tt = a1 * a2 + b1 * b2;\n  const k1 = radius * Math.sqrt(dd) / mm;\n  const k2 = radius * Math.sqrt(cc) / mm;\n  const j1 = k1 * tt / dd;\n  const j2 = k2 * tt / cc;\n  const cx = k1 * b2 + k2 * b1;\n  const cy = k1 * a2 + k2 * a1;\n  const px = b1 * (k2 + j1);\n  const py = a1 * (k2 + j1);\n  const qx = b2 * (k1 + j2);\n  const qy = a2 * (k1 + j2);\n  const startAngle = Math.atan2(py - cy, px - cx);\n  const endAngle = Math.atan2(qy - cy, qx - cx);\n  buildArc(\n    points,\n    cx + x1,\n    cy + y1,\n    radius,\n    startAngle,\n    endAngle,\n    b1 * a2 > b2 * a1\n  );\n}\n\nexport { buildArcTo };\n\n", "import { buildAdaptiveBezier } from './buildAdaptiveBezier.mjs';\n\n\"use strict\";\nconst TAU = Math.PI * 2;\nconst out = {\n  centerX: 0,\n  centerY: 0,\n  ang1: 0,\n  ang2: 0\n};\nconst mapToEllipse = ({ x, y }, rx, ry, cosPhi, sinPhi, centerX, centerY, out2) => {\n  x *= rx;\n  y *= ry;\n  const xp = cosPhi * x - sinPhi * y;\n  const yp = sinPhi * x + cosPhi * y;\n  out2.x = xp + centerX;\n  out2.y = yp + centerY;\n  return out2;\n};\nfunction approxUnitArc(ang1, ang2) {\n  const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n  const x1 = Math.cos(ang1);\n  const y1 = Math.sin(ang1);\n  const x2 = Math.cos(ang1 + ang2);\n  const y2 = Math.sin(ang1 + ang2);\n  return [\n    {\n      x: x1 - y1 * a,\n      y: y1 + x1 * a\n    },\n    {\n      x: x2 + y2 * a,\n      y: y2 - x2 * a\n    },\n    {\n      x: x2,\n      y: y2\n    }\n  ];\n}\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  let dot = ux * vx + uy * vy;\n  if (dot > 1) {\n    dot = 1;\n  }\n  if (dot < -1) {\n    dot = -1;\n  }\n  return sign * Math.acos(dot);\n};\nconst getArcCenter = (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinPhi, cosPhi, pxp, pyp, out2) => {\n  const rxSq = Math.pow(rx, 2);\n  const rySq = Math.pow(ry, 2);\n  const pxpSq = Math.pow(pxp, 2);\n  const pypSq = Math.pow(pyp, 2);\n  let radicant = rxSq * rySq - rxSq * pypSq - rySq * pxpSq;\n  if (radicant < 0) {\n    radicant = 0;\n  }\n  radicant /= rxSq * pypSq + rySq * pxpSq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  const centerXp = radicant * rx / ry * pyp;\n  const centerYp = radicant * -ry / rx * pxp;\n  const centerX = cosPhi * centerXp - sinPhi * centerYp + (px + cx) / 2;\n  const centerY = sinPhi * centerXp + cosPhi * centerYp + (py + cy) / 2;\n  const vx1 = (pxp - centerXp) / rx;\n  const vy1 = (pyp - centerYp) / ry;\n  const vx2 = (-pxp - centerXp) / rx;\n  const vy2 = (-pyp - centerYp) / ry;\n  const ang1 = vectorAngle(1, 0, vx1, vy1);\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n  out2.centerX = centerX;\n  out2.centerY = centerY;\n  out2.ang1 = ang1;\n  out2.ang2 = ang2;\n};\nfunction buildArcToSvg(points, px, py, cx, cy, rx, ry, xAxisRotation = 0, largeArcFlag = 0, sweepFlag = 0) {\n  if (rx === 0 || ry === 0) {\n    return;\n  }\n  const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n  const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n  const pxp = cosPhi * (px - cx) / 2 + sinPhi * (py - cy) / 2;\n  const pyp = -sinPhi * (px - cx) / 2 + cosPhi * (py - cy) / 2;\n  if (pxp === 0 && pyp === 0) {\n    return;\n  }\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  const lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n  getArcCenter(\n    px,\n    py,\n    cx,\n    cy,\n    rx,\n    ry,\n    largeArcFlag,\n    sweepFlag,\n    sinPhi,\n    cosPhi,\n    pxp,\n    pyp,\n    out\n  );\n  let { ang1, ang2 } = out;\n  const { centerX, centerY } = out;\n  let ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1 - ratio) < 1e-7) {\n    ratio = 1;\n  }\n  const segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n  let lastX = points[points.length - 2];\n  let lastY = points[points.length - 1];\n  const outCurvePoint = { x: 0, y: 0 };\n  for (let i = 0; i < segments; i++) {\n    const curve = approxUnitArc(ang1, ang2);\n    const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    buildAdaptiveBezier(\n      points,\n      lastX,\n      lastY,\n      x1,\n      y1,\n      x2,\n      y2,\n      x,\n      y\n    );\n    lastX = x;\n    lastY = y;\n    ang1 += ang2;\n  }\n}\n\nexport { buildArcToSvg };\n\n", "\"use strict\";\nfunction roundedShapeArc(g, points, radius) {\n  const vecFrom = (p, pp) => {\n    const x = pp.x - p.x;\n    const y = pp.y - p.y;\n    const len = Math.sqrt(x * x + y * y);\n    const nx = x / len;\n    const ny = y / len;\n    return { len, nx, ny };\n  };\n  const sharpCorner = (i, p) => {\n    if (i === 0) {\n      g.moveTo(p.x, p.y);\n    } else {\n      g.lineTo(p.x, p.y);\n    }\n  };\n  let p1 = points[points.length - 1];\n  for (let i = 0; i < points.length; i++) {\n    const p2 = points[i % points.length];\n    const pRadius = p2.radius ?? radius;\n    if (pRadius <= 0) {\n      sharpCorner(i, p2);\n      p1 = p2;\n      continue;\n    }\n    const p3 = points[(i + 1) % points.length];\n    const v1 = vecFrom(p2, p1);\n    const v2 = vecFrom(p2, p3);\n    if (v1.len < 1e-4 || v2.len < 1e-4) {\n      sharpCorner(i, p2);\n      p1 = p2;\n      continue;\n    }\n    let angle = Math.asin(v1.nx * v2.ny - v1.ny * v2.nx);\n    let radDirection = 1;\n    let drawDirection = false;\n    if (v1.nx * v2.nx - v1.ny * -v2.ny < 0) {\n      if (angle < 0) {\n        angle = Math.PI + angle;\n      } else {\n        angle = Math.PI - angle;\n        radDirection = -1;\n        drawDirection = true;\n      }\n    } else if (angle > 0) {\n      radDirection = -1;\n      drawDirection = true;\n    }\n    const halfAngle = angle / 2;\n    let cRadius;\n    let lenOut = Math.abs(\n      Math.cos(halfAngle) * pRadius / Math.sin(halfAngle)\n    );\n    if (lenOut > Math.min(v1.len / 2, v2.len / 2)) {\n      lenOut = Math.min(v1.len / 2, v2.len / 2);\n      cRadius = Math.abs(lenOut * Math.sin(halfAngle) / Math.cos(halfAngle));\n    } else {\n      cRadius = pRadius;\n    }\n    const cX = p2.x + v2.nx * lenOut + -v2.ny * cRadius * radDirection;\n    const cY = p2.y + v2.ny * lenOut + v2.nx * cRadius * radDirection;\n    const startAngle = Math.atan2(v1.ny, v1.nx) + Math.PI / 2 * radDirection;\n    const endAngle = Math.atan2(v2.ny, v2.nx) - Math.PI / 2 * radDirection;\n    if (i === 0) {\n      g.moveTo(\n        cX + Math.cos(startAngle) * cRadius,\n        cY + Math.sin(startAngle) * cRadius\n      );\n    }\n    g.arc(cX, cY, cRadius, startAngle, endAngle, drawDirection);\n    p1 = p2;\n  }\n}\nfunction roundedShapeQuadraticCurve(g, points, radius, smoothness) {\n  const distance = (p1, p2) => Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n  const pointLerp = (p1, p2, t) => ({\n    x: p1.x + (p2.x - p1.x) * t,\n    y: p1.y + (p2.y - p1.y) * t\n  });\n  const numPoints = points.length;\n  for (let i = 0; i < numPoints; i++) {\n    const thisPoint = points[(i + 1) % numPoints];\n    const pRadius = thisPoint.radius ?? radius;\n    if (pRadius <= 0) {\n      if (i === 0) {\n        g.moveTo(thisPoint.x, thisPoint.y);\n      } else {\n        g.lineTo(thisPoint.x, thisPoint.y);\n      }\n      continue;\n    }\n    const lastPoint = points[i];\n    const nextPoint = points[(i + 2) % numPoints];\n    const lastEdgeLength = distance(lastPoint, thisPoint);\n    let start;\n    if (lastEdgeLength < 1e-4) {\n      start = thisPoint;\n    } else {\n      const lastOffsetDistance = Math.min(lastEdgeLength / 2, pRadius);\n      start = pointLerp(\n        thisPoint,\n        lastPoint,\n        lastOffsetDistance / lastEdgeLength\n      );\n    }\n    const nextEdgeLength = distance(nextPoint, thisPoint);\n    let end;\n    if (nextEdgeLength < 1e-4) {\n      end = thisPoint;\n    } else {\n      const nextOffsetDistance = Math.min(nextEdgeLength / 2, pRadius);\n      end = pointLerp(\n        thisPoint,\n        nextPoint,\n        nextOffsetDistance / nextEdgeLength\n      );\n    }\n    if (i === 0) {\n      g.moveTo(start.x, start.y);\n    } else {\n      g.lineTo(start.x, start.y);\n    }\n    g.quadraticCurveTo(thisPoint.x, thisPoint.y, end.x, end.y, smoothness);\n  }\n}\n\nexport { roundedShapeArc, roundedShapeQuadraticCurve };\n\n", "import { Circle } from '../../../../maths/shapes/Circle.mjs';\nimport { Ellipse } from '../../../../maths/shapes/Ellipse.mjs';\nimport { Polygon } from '../../../../maths/shapes/Polygon.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle.mjs';\nimport { Bounds } from '../../../container/bounds/Bounds.mjs';\nimport { buildAdaptiveBezier } from '../buildCommands/buildAdaptiveBezier.mjs';\nimport { buildAdaptiveQuadratic } from '../buildCommands/buildAdaptiveQuadratic.mjs';\nimport { buildArc } from '../buildCommands/buildArc.mjs';\nimport { buildArcTo } from '../buildCommands/buildArcTo.mjs';\nimport { buildArcToSvg } from '../buildCommands/buildArcToSvg.mjs';\nimport { roundedShapeQuadraticCurve, roundedShapeArc } from './roundShape.mjs';\n\n\"use strict\";\nconst tempRectangle = new Rectangle();\nclass ShapePath {\n  constructor(graphicsPath2D) {\n    /** The list of shape primitives that make up the path. */\n    this.shapePrimitives = [];\n    this._currentPoly = null;\n    this._bounds = new Bounds();\n    this._graphicsPath2D = graphicsPath2D;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this.startPoly(x, y);\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._ensurePoly();\n    const points = this._currentPoly.points;\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n    if (fromX !== x || fromY !== y) {\n      points.push(x, y);\n    }\n    return this;\n  }\n  /**\n   * Adds an arc to the path. The arc is centered at (x, y)\n   *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The radius of the arc.\n   * @param startAngle - The starting angle of the arc, in radians.\n   * @param endAngle - The ending angle of the arc, in radians.\n   * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n   * @returns The instance of the current object for chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._ensurePoly(false);\n    const points = this._currentPoly.points;\n    buildArc(points, x, y, radius, startAngle, endAngle, counterclockwise);\n    return this;\n  }\n  /**\n   * Adds an arc to the path with the arc tangent to the line joining two specified points.\n   * The arc radius is specified by `radius`.\n   * @param x1 - The x-coordinate of the first point.\n   * @param y1 - The y-coordinate of the first point.\n   * @param x2 - The x-coordinate of the second point.\n   * @param y2 - The y-coordinate of the second point.\n   * @param radius - The radius of the arc.\n   * @returns The instance of the current object for chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._ensurePoly();\n    const points = this._currentPoly.points;\n    buildArcTo(points, x1, y1, x2, y2, radius);\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    const points = this._currentPoly.points;\n    buildArcToSvg(\n      points,\n      this._currentPoly.lastX,\n      this._currentPoly.lastY,\n      x,\n      y,\n      rx,\n      ry,\n      xAxisRotation,\n      largeArcFlag,\n      sweepFlag\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._ensurePoly();\n    const currentPoly = this._currentPoly;\n    buildAdaptiveBezier(\n      this._currentPoly.points,\n      currentPoly.lastX,\n      currentPoly.lastY,\n      cp1x,\n      cp1y,\n      cp2x,\n      cp2y,\n      x,\n      y,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the control point.\n   * @param cp1y - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothing - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cp1x, cp1y, x, y, smoothing) {\n    this._ensurePoly();\n    const currentPoly = this._currentPoly;\n    buildAdaptiveQuadratic(\n      this._currentPoly.points,\n      currentPoly.lastX,\n      currentPoly.lastY,\n      cp1x,\n      cp1y,\n      x,\n      y,\n      smoothing\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this.endPoly(true);\n    return this;\n  }\n  /**\n   * Adds another path to the current path. This method allows for the combination of multiple paths into one.\n   * @param path - The `GraphicsPath` object representing the path to add.\n   * @param transform - An optional `Matrix` object to apply a transformation to the path before adding it.\n   * @returns The instance of the current object for chaining.\n   */\n  addPath(path, transform) {\n    this.endPoly();\n    if (transform && !transform.isIdentity()) {\n      path = path.clone(true);\n      path.transform(transform);\n    }\n    for (let i = 0; i < path.instructions.length; i++) {\n      const instruction = path.instructions[i];\n      this[instruction.action](...instruction.data);\n    }\n    return this;\n  }\n  /**\n   * Finalizes the drawing of the current path. Optionally, it can close the path.\n   * @param closePath - A boolean indicating whether to close the path after finishing. False by default.\n   */\n  finish(closePath = false) {\n    this.endPoly(closePath);\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h, transform) {\n    this.drawShape(new Rectangle(x, y, w, h), transform);\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius, transform) {\n    this.drawShape(new Circle(x, y, radius), transform);\n    return this;\n  }\n  /**\n   * Draws a polygon shape. This method allows for the creation of complex polygons by specifying a sequence of points.\n   * @param points - An array of numbers, or or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  poly(points, close, transform) {\n    const polygon = new Polygon(points);\n    polygon.closePath = close;\n    this.drawShape(polygon, transform);\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    sides = Math.max(sides | 0, 3);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const delta = Math.PI * 2 / sides;\n    const polygon = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i * delta + startAngle;\n      polygon.push(\n        x + radius * Math.cos(angle),\n        y + radius * Math.sin(angle)\n      );\n    }\n    this.poly(polygon, true, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param smoothness - Optional parameter to adjust the smoothness of the rounding.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation = 0, smoothness) {\n    sides = Math.max(sides | 0, 3);\n    if (corner <= 0) {\n      return this.regularPoly(x, y, radius, sides, rotation);\n    }\n    const sideLength = radius * Math.sin(Math.PI / sides) - 1e-3;\n    corner = Math.min(corner, sideLength);\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const delta = Math.PI * 2 / sides;\n    const internalAngle = (sides - 2) * Math.PI / sides / 2;\n    for (let i = 0; i < sides; i++) {\n      const angle = i * delta + startAngle;\n      const x0 = x + radius * Math.cos(angle);\n      const y0 = y + radius * Math.sin(angle);\n      const a1 = angle + Math.PI + internalAngle;\n      const a2 = angle - Math.PI - internalAngle;\n      const x1 = x0 + corner * Math.cos(a1);\n      const y1 = y0 + corner * Math.sin(a1);\n      const x3 = x0 + corner * Math.cos(a2);\n      const y3 = y0 + corner * Math.sin(a2);\n      if (i === 0) {\n        this.moveTo(x1, y1);\n      } else {\n        this.lineTo(x1, y1);\n      }\n      this.quadraticCurveTo(x0, y0, x3, y3, smoothness);\n    }\n    return this.closePath();\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic = false, smoothness) {\n    if (points.length < 3) {\n      return this;\n    }\n    if (useQuadratic) {\n      roundedShapeQuadraticCurve(this, points, radius, smoothness);\n    } else {\n      roundedShapeArc(this, points, radius);\n    }\n    return this.closePath();\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    if (fillet === 0) {\n      return this.rect(x, y, width, height);\n    }\n    const maxFillet = Math.min(width, height) / 2;\n    const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n    const right = x + width;\n    const bottom = y + height;\n    const dir = inset < 0 ? -inset : 0;\n    const size = Math.abs(inset);\n    return this.moveTo(x, y + size).arcTo(x + dir, y + dir, x + size, y, size).lineTo(right - size, y).arcTo(right - dir, y + dir, right, y + size, size).lineTo(right, bottom - size).arcTo(right - dir, bottom - dir, x + width - size, bottom, size).lineTo(x + size, bottom).arcTo(x + dir, bottom - dir, x, bottom - size, size).closePath();\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    if (chamfer <= 0) {\n      return this.rect(x, y, width, height);\n    }\n    const inset = Math.min(chamfer, Math.min(width, height) / 2);\n    const right = x + width;\n    const bottom = y + height;\n    const points = [\n      x + inset,\n      y,\n      right - inset,\n      y,\n      right,\n      y + inset,\n      right,\n      bottom - inset,\n      right - inset,\n      bottom,\n      x + inset,\n      bottom,\n      x,\n      bottom - inset,\n      x,\n      y + inset\n    ];\n    for (let i = points.length - 1; i >= 2; i -= 2) {\n      if (points[i] === points[i - 2] && points[i - 1] === points[i - 3]) {\n        points.splice(i - 1, 2);\n      }\n    }\n    return this.poly(points, true, transform);\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY, transform) {\n    this.drawShape(new Ellipse(x, y, radiusX, radiusY), transform);\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius, transform) {\n    this.drawShape(new RoundedRectangle(x, y, w, h, radius), transform);\n    return this;\n  }\n  /**\n   * Draws a given shape on the canvas.\n   * This is a generic method that can draw any type of shape specified by the `ShapePrimitive` parameter.\n   * An optional transformation matrix can be applied to the shape, allowing for complex transformations.\n   * @param shape - The shape to draw, defined as a `ShapePrimitive` object.\n   * @param matrix - An optional `Matrix` for transforming the shape. This can include rotations,\n   * scaling, and translations.\n   * @returns The instance of the current object for chaining.\n   */\n  drawShape(shape, matrix) {\n    this.endPoly();\n    this.shapePrimitives.push({ shape, transform: matrix });\n    return this;\n  }\n  /**\n   * Starts a new polygon path from the specified starting point.\n   * This method initializes a new polygon or ends the current one if it exists.\n   * @param x - The x-coordinate of the starting point of the new polygon.\n   * @param y - The y-coordinate of the starting point of the new polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  startPoly(x, y) {\n    let currentPoly = this._currentPoly;\n    if (currentPoly) {\n      this.endPoly();\n    }\n    currentPoly = new Polygon();\n    currentPoly.points.push(x, y);\n    this._currentPoly = currentPoly;\n    return this;\n  }\n  /**\n   * Ends the current polygon path. If `closePath` is set to true,\n   * the path is closed by connecting the last point to the first one.\n   * This method finalizes the current polygon and prepares it for drawing or adding to the shape primitives.\n   * @param closePath - A boolean indicating whether to close the polygon by connecting the last point\n   *  back to the starting point. False by default.\n   * @returns The instance of the current object for chaining.\n   */\n  endPoly(closePath = false) {\n    const shape = this._currentPoly;\n    if (shape && shape.points.length > 2) {\n      shape.closePath = closePath;\n      this.shapePrimitives.push({ shape });\n    }\n    this._currentPoly = null;\n    return this;\n  }\n  _ensurePoly(start = true) {\n    if (this._currentPoly)\n      return;\n    this._currentPoly = new Polygon();\n    if (start) {\n      const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n      if (lastShape) {\n        let lx = lastShape.shape.x;\n        let ly = lastShape.shape.y;\n        if (lastShape.transform && !lastShape.transform.isIdentity()) {\n          const t = lastShape.transform;\n          const tempX = lx;\n          lx = t.a * lx + t.c * ly + t.tx;\n          ly = t.b * tempX + t.d * ly + t.ty;\n        }\n        this._currentPoly.points.push(lx, ly);\n      } else {\n        this._currentPoly.points.push(0, 0);\n      }\n    }\n  }\n  /** Builds the path. */\n  buildPath() {\n    const path = this._graphicsPath2D;\n    this.shapePrimitives.length = 0;\n    this._currentPoly = null;\n    for (let i = 0; i < path.instructions.length; i++) {\n      const instruction = path.instructions[i];\n      this[instruction.action](...instruction.data);\n    }\n    this.finish();\n  }\n  /** Gets the bounds of the path. */\n  get bounds() {\n    const bounds = this._bounds;\n    bounds.clear();\n    const shapePrimitives = this.shapePrimitives;\n    for (let i = 0; i < shapePrimitives.length; i++) {\n      const shapePrimitive = shapePrimitives[i];\n      const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n      if (shapePrimitive.transform) {\n        bounds.addRect(boundsRect, shapePrimitive.transform);\n      } else {\n        bounds.addRect(boundsRect);\n      }\n    }\n    return bounds;\n  }\n}\n\nexport { ShapePath };\n\n", "import { Point } from '../../../../maths/point/Point.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { SVGToGraphicsPath } from '../svg/SVGToGraphicsPath.mjs';\nimport { ShapePath } from './ShapePath.mjs';\n\n\"use strict\";\nclass GraphicsPath {\n  /**\n   * Creates a `GraphicsPath` instance optionally from an SVG path string or an array of `PathInstruction`.\n   * @param instructions - An SVG path string or an array of `PathInstruction` objects.\n   */\n  constructor(instructions) {\n    this.instructions = [];\n    /** unique id for this graphics path */\n    this.uid = uid(\"graphicsPath\");\n    this._dirty = true;\n    if (typeof instructions === \"string\") {\n      SVGToGraphicsPath(instructions, this);\n    } else {\n      this.instructions = instructions?.slice() ?? [];\n    }\n  }\n  /**\n   * Provides access to the internal shape path, ensuring it is up-to-date with the current instructions.\n   * @returns The `ShapePath` instance associated with this `GraphicsPath`.\n   */\n  get shapePath() {\n    if (!this._shapePath) {\n      this._shapePath = new ShapePath(this);\n    }\n    if (this._dirty) {\n      this._dirty = false;\n      this._shapePath.buildPath();\n    }\n    return this._shapePath;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @param transform - An optional transformation to apply to the added path.\n   * @returns The instance of the current object for chaining.\n   */\n  addPath(path, transform) {\n    path = path.clone();\n    this.instructions.push({ action: \"addPath\", data: [path, transform] });\n    this._dirty = true;\n    return this;\n  }\n  arc(...args) {\n    this.instructions.push({ action: \"arc\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  arcTo(...args) {\n    this.instructions.push({ action: \"arcTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  arcToSvg(...args) {\n    this.instructions.push({ action: \"arcToSvg\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  bezierCurveTo(...args) {\n    this.instructions.push({ action: \"bezierCurveTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires two points: the second control point and the end point. The first control point is assumed to be\n   * The starting point is the last point in the current path.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveToShort(cp2x, cp2y, x, y, smoothness) {\n    const last = this.instructions[this.instructions.length - 1];\n    const lastPoint = this.getLastPoint(Point.shared);\n    let cp1x = 0;\n    let cp1y = 0;\n    if (!last || last.action !== \"bezierCurveTo\") {\n      cp1x = lastPoint.x;\n      cp1y = lastPoint.y;\n    } else {\n      cp1x = last.data[2];\n      cp1y = last.data[3];\n      const currentX = lastPoint.x;\n      const currentY = lastPoint.y;\n      cp1x = currentX + (currentX - cp1x);\n      cp1y = currentY + (currentY - cp1y);\n    }\n    this.instructions.push({ action: \"bezierCurveTo\", data: [cp1x, cp1y, cp2x, cp2y, x, y, smoothness] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this.instructions.push({ action: \"closePath\", data: [] });\n    this._dirty = true;\n    return this;\n  }\n  ellipse(...args) {\n    this.instructions.push({ action: \"ellipse\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  lineTo(...args) {\n    this.instructions.push({ action: \"lineTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  moveTo(...args) {\n    this.instructions.push({ action: \"moveTo\", data: args });\n    return this;\n  }\n  quadraticCurveTo(...args) {\n    this.instructions.push({ action: \"quadraticCurveTo\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It uses the previous point as the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveToShort(x, y, smoothness) {\n    const last = this.instructions[this.instructions.length - 1];\n    const lastPoint = this.getLastPoint(Point.shared);\n    let cpx1 = 0;\n    let cpy1 = 0;\n    if (!last || last.action !== \"quadraticCurveTo\") {\n      cpx1 = lastPoint.x;\n      cpy1 = lastPoint.y;\n    } else {\n      cpx1 = last.data[0];\n      cpy1 = last.data[1];\n      const currentX = lastPoint.x;\n      const currentY = lastPoint.y;\n      cpx1 = currentX + (currentX - cpx1);\n      cpy1 = currentY + (currentY - cpy1);\n    }\n    this.instructions.push({ action: \"quadraticCurveTo\", data: [cpx1, cpy1, x, y, smoothness] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h, transform) {\n    this.instructions.push({ action: \"rect\", data: [x, y, w, h, transform] });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius, transform) {\n    this.instructions.push({ action: \"circle\", data: [x, y, radius, transform] });\n    this._dirty = true;\n    return this;\n  }\n  roundRect(...args) {\n    this.instructions.push({ action: \"roundRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  poly(...args) {\n    this.instructions.push({ action: \"poly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  regularPoly(...args) {\n    this.instructions.push({ action: \"regularPoly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  roundPoly(...args) {\n    this.instructions.push({ action: \"roundPoly\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  roundShape(...args) {\n    this.instructions.push({ action: \"roundShape\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  filletRect(...args) {\n    this.instructions.push({ action: \"filletRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  chamferRect(...args) {\n    this.instructions.push({ action: \"chamferRect\", data: args });\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @param transform - An optional `Matrix` object to apply a transformation to the star.\n   * This can include rotations, scaling, and translations.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  // eslint-disable-next-line max-len\n  star(x, y, points, radius, innerRadius, rotation, transform) {\n    innerRadius = innerRadius || radius / 2;\n    const startAngle = -1 * Math.PI / 2 + rotation;\n    const len = points * 2;\n    const delta = Math.PI * 2 / len;\n    const polygon = [];\n    for (let i = 0; i < len; i++) {\n      const r = i % 2 ? innerRadius : radius;\n      const angle = i * delta + startAngle;\n      polygon.push(\n        x + r * Math.cos(angle),\n        y + r * Math.sin(angle)\n      );\n    }\n    this.poly(polygon, true, transform);\n    return this;\n  }\n  /**\n   * Creates a copy of the current `GraphicsPath` instance. This method supports both shallow and deep cloning.\n   * A shallow clone copies the reference of the instructions array, while a deep clone creates a new array and\n   * copies each instruction individually, ensuring that modifications to the instructions of the cloned `GraphicsPath`\n   * do not affect the original `GraphicsPath` and vice versa.\n   * @param deep - A boolean flag indicating whether the clone should be deep.\n   * @returns A new `GraphicsPath` instance that is a clone of the current instance.\n   */\n  clone(deep = false) {\n    const newGraphicsPath2D = new GraphicsPath();\n    if (!deep) {\n      newGraphicsPath2D.instructions = this.instructions.slice();\n    } else {\n      for (let i = 0; i < this.instructions.length; i++) {\n        const instruction = this.instructions[i];\n        newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n      }\n    }\n    return newGraphicsPath2D;\n  }\n  clear() {\n    this.instructions.length = 0;\n    this._dirty = true;\n    return this;\n  }\n  /**\n   * Applies a transformation matrix to all drawing instructions within the `GraphicsPath`.\n   * This method enables the modification of the path's geometry according to the provided\n   * transformation matrix, which can include translations, rotations, scaling, and skewing.\n   *\n   * Each drawing instruction in the path is updated to reflect the transformation,\n   * ensuring the visual representation of the path is consistent with the applied matrix.\n   *\n   * Note: The transformation is applied directly to the coordinates and control points of the drawing instructions,\n   * not to the path as a whole. This means the transformation's effects are baked into the individual instructions,\n   * allowing for fine-grained control over the path's appearance.\n   * @param matrix - A `Matrix` object representing the transformation to apply.\n   * @returns The instance of the current object for chaining further operations.\n   */\n  transform(matrix) {\n    if (matrix.isIdentity())\n      return this;\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let x = 0;\n    let y = 0;\n    let cpx1 = 0;\n    let cpy1 = 0;\n    let cpx2 = 0;\n    let cpy2 = 0;\n    let rx = 0;\n    let ry = 0;\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const data = instruction.data;\n      switch (instruction.action) {\n        case \"moveTo\":\n        case \"lineTo\":\n          x = data[0];\n          y = data[1];\n          data[0] = a * x + c * y + tx;\n          data[1] = b * x + d * y + ty;\n          break;\n        case \"bezierCurveTo\":\n          cpx1 = data[0];\n          cpy1 = data[1];\n          cpx2 = data[2];\n          cpy2 = data[3];\n          x = data[4];\n          y = data[5];\n          data[0] = a * cpx1 + c * cpy1 + tx;\n          data[1] = b * cpx1 + d * cpy1 + ty;\n          data[2] = a * cpx2 + c * cpy2 + tx;\n          data[3] = b * cpx2 + d * cpy2 + ty;\n          data[4] = a * x + c * y + tx;\n          data[5] = b * x + d * y + ty;\n          break;\n        case \"quadraticCurveTo\":\n          cpx1 = data[0];\n          cpy1 = data[1];\n          x = data[2];\n          y = data[3];\n          data[0] = a * cpx1 + c * cpy1 + tx;\n          data[1] = b * cpx1 + d * cpy1 + ty;\n          data[2] = a * x + c * y + tx;\n          data[3] = b * x + d * y + ty;\n          break;\n        case \"arcToSvg\":\n          x = data[5];\n          y = data[6];\n          rx = data[0];\n          ry = data[1];\n          data[0] = a * rx + c * ry;\n          data[1] = b * rx + d * ry;\n          data[5] = a * x + c * y + tx;\n          data[6] = b * x + d * y + ty;\n          break;\n        case \"circle\":\n          data[4] = adjustTransform(data[3], matrix);\n          break;\n        case \"rect\":\n          data[4] = adjustTransform(data[4], matrix);\n          break;\n        case \"ellipse\":\n          data[8] = adjustTransform(data[8], matrix);\n          break;\n        case \"roundRect\":\n          data[5] = adjustTransform(data[5], matrix);\n          break;\n        case \"addPath\":\n          data[0].transform(matrix);\n          break;\n        case \"poly\":\n          data[2] = adjustTransform(data[2], matrix);\n          break;\n        default:\n          warn(\"unknown transform action\", instruction.action);\n          break;\n      }\n    }\n    this._dirty = true;\n    return this;\n  }\n  get bounds() {\n    return this.shapePath.bounds;\n  }\n  /**\n   * Retrieves the last point from the current drawing instructions in the `GraphicsPath`.\n   * This method is useful for operations that depend on the path's current endpoint,\n   * such as connecting subsequent shapes or paths. It supports various drawing instructions,\n   * ensuring the last point's position is accurately determined regardless of the path's complexity.\n   *\n   * If the last instruction is a `closePath`, the method iterates backward through the instructions\n   *  until it finds an actionable instruction that defines a point (e.g., `moveTo`, `lineTo`,\n   * `quadraticCurveTo`, etc.). For compound paths added via `addPath`, it recursively retrieves\n   * the last point from the nested path.\n   * @param out - A `Point` object where the last point's coordinates will be stored.\n   * This object is modified directly to contain the result.\n   * @returns The `Point` object containing the last point's coordinates.\n   */\n  getLastPoint(out) {\n    let index = this.instructions.length - 1;\n    let lastInstruction = this.instructions[index];\n    if (!lastInstruction) {\n      out.x = 0;\n      out.y = 0;\n      return out;\n    }\n    while (lastInstruction.action === \"closePath\") {\n      index--;\n      if (index < 0) {\n        out.x = 0;\n        out.y = 0;\n        return out;\n      }\n      lastInstruction = this.instructions[index];\n    }\n    switch (lastInstruction.action) {\n      case \"moveTo\":\n      case \"lineTo\":\n        out.x = lastInstruction.data[0];\n        out.y = lastInstruction.data[1];\n        break;\n      case \"quadraticCurveTo\":\n        out.x = lastInstruction.data[2];\n        out.y = lastInstruction.data[3];\n        break;\n      case \"bezierCurveTo\":\n        out.x = lastInstruction.data[4];\n        out.y = lastInstruction.data[5];\n        break;\n      case \"arc\":\n      case \"arcToSvg\":\n        out.x = lastInstruction.data[5];\n        out.y = lastInstruction.data[6];\n        break;\n      case \"addPath\":\n        lastInstruction.data[0].getLastPoint(out);\n        break;\n    }\n    return out;\n  }\n}\nfunction adjustTransform(currentMatrix, transform) {\n  if (currentMatrix) {\n    return currentMatrix.prepend(transform);\n  }\n  return transform.clone();\n}\n\nexport { GraphicsPath };\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { GraphicsPath } from '../path/GraphicsPath.mjs';\n\n\"use strict\";\nfunction SVGParser(svg, graphicsContext) {\n  if (typeof svg === \"string\") {\n    const div = document.createElement(\"div\");\n    div.innerHTML = svg.trim();\n    svg = div.querySelector(\"svg\");\n  }\n  const session = {\n    context: graphicsContext,\n    path: new GraphicsPath()\n  };\n  renderChildren(svg, session, null, null);\n  return graphicsContext;\n}\nfunction renderChildren(svg, session, fillStyle, strokeStyle) {\n  const children = svg.children;\n  const { fillStyle: f1, strokeStyle: s1 } = parseStyle(svg);\n  if (f1 && fillStyle) {\n    fillStyle = { ...fillStyle, ...f1 };\n  } else if (f1) {\n    fillStyle = f1;\n  }\n  if (s1 && strokeStyle) {\n    strokeStyle = { ...strokeStyle, ...s1 };\n  } else if (s1) {\n    strokeStyle = s1;\n  }\n  session.context.fillStyle = fillStyle;\n  session.context.strokeStyle = strokeStyle;\n  let x;\n  let y;\n  let x1;\n  let y1;\n  let x2;\n  let y2;\n  let cx;\n  let cy;\n  let r;\n  let rx;\n  let ry;\n  let points;\n  let pointsString;\n  let d;\n  let graphicsPath;\n  let width;\n  let height;\n  switch (svg.nodeName.toLowerCase()) {\n    case \"path\":\n      d = svg.getAttribute(\"d\");\n      graphicsPath = new GraphicsPath(d);\n      session.context.path(graphicsPath);\n      if (fillStyle)\n        session.context.fill();\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"circle\":\n      cx = parseFloatAttribute(svg, \"cx\", 0);\n      cy = parseFloatAttribute(svg, \"cy\", 0);\n      r = parseFloatAttribute(svg, \"r\", 0);\n      session.context.ellipse(cx, cy, r, r);\n      if (fillStyle)\n        session.context.fill();\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"rect\":\n      x = parseFloatAttribute(svg, \"x\", 0);\n      y = parseFloatAttribute(svg, \"y\", 0);\n      width = parseFloatAttribute(svg, \"width\", 0);\n      height = parseFloatAttribute(svg, \"height\", 0);\n      rx = parseFloatAttribute(svg, \"rx\", 0);\n      ry = parseFloatAttribute(svg, \"ry\", 0);\n      if (rx || ry) {\n        session.context.roundRect(x, y, width, height, rx || ry);\n      } else {\n        session.context.rect(x, y, width, height);\n      }\n      if (fillStyle)\n        session.context.fill();\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"ellipse\":\n      cx = parseFloatAttribute(svg, \"cx\", 0);\n      cy = parseFloatAttribute(svg, \"cy\", 0);\n      rx = parseFloatAttribute(svg, \"rx\", 0);\n      ry = parseFloatAttribute(svg, \"ry\", 0);\n      session.context.beginPath();\n      session.context.ellipse(cx, cy, rx, ry);\n      if (fillStyle)\n        session.context.fill();\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"line\":\n      x1 = parseFloatAttribute(svg, \"x1\", 0);\n      y1 = parseFloatAttribute(svg, \"y1\", 0);\n      x2 = parseFloatAttribute(svg, \"x2\", 0);\n      y2 = parseFloatAttribute(svg, \"y2\", 0);\n      session.context.beginPath();\n      session.context.moveTo(x1, y1);\n      session.context.lineTo(x2, y2);\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"polygon\":\n      pointsString = svg.getAttribute(\"points\");\n      points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n      session.context.poly(points, true);\n      if (fillStyle)\n        session.context.fill();\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"polyline\":\n      pointsString = svg.getAttribute(\"points\");\n      points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n      session.context.poly(points, false);\n      if (strokeStyle)\n        session.context.stroke();\n      break;\n    case \"g\":\n    case \"svg\":\n      break;\n    default: {\n      console.info(`[SVG parser] <${svg.nodeName}> elements unsupported`);\n      break;\n    }\n  }\n  for (let i = 0; i < children.length; i++) {\n    renderChildren(children[i], session, fillStyle, strokeStyle);\n  }\n}\nfunction parseFloatAttribute(svg, id, defaultValue) {\n  const value = svg.getAttribute(id);\n  return value ? Number(value) : defaultValue;\n}\nfunction parseStyle(svg) {\n  const style = svg.getAttribute(\"style\");\n  const strokeStyle = {};\n  const fillStyle = {};\n  let useFill = false;\n  let useStroke = false;\n  if (style) {\n    const styleParts = style.split(\";\");\n    for (let i = 0; i < styleParts.length; i++) {\n      const stylePart = styleParts[i];\n      const [key, value] = stylePart.split(\":\");\n      switch (key) {\n        case \"stroke\":\n          if (value !== \"none\") {\n            strokeStyle.color = Color.shared.setValue(value).toNumber();\n            useStroke = true;\n          }\n          break;\n        case \"stroke-width\":\n          strokeStyle.width = Number(value);\n          break;\n        case \"fill\":\n          if (value !== \"none\") {\n            useFill = true;\n            fillStyle.color = Color.shared.setValue(value).toNumber();\n          }\n          break;\n        case \"fill-opacity\":\n          fillStyle.alpha = Number(value);\n          break;\n        case \"stroke-opacity\":\n          strokeStyle.alpha = Number(value);\n          break;\n        case \"opacity\":\n          fillStyle.alpha = Number(value);\n          strokeStyle.alpha = Number(value);\n          break;\n      }\n    }\n  } else {\n    const stroke = svg.getAttribute(\"stroke\");\n    if (stroke && stroke !== \"none\") {\n      useStroke = true;\n      strokeStyle.color = Color.shared.setValue(stroke).toNumber();\n      strokeStyle.width = parseFloatAttribute(svg, \"stroke-width\", 1);\n    }\n    const fill = svg.getAttribute(\"fill\");\n    if (fill && fill !== \"none\") {\n      useFill = true;\n      fillStyle.color = Color.shared.setValue(fill).toNumber();\n    }\n  }\n  return {\n    strokeStyle: useStroke ? strokeStyle : null,\n    fillStyle: useFill ? fillStyle : null\n  };\n}\n\nexport { SVGParser };\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { FillGradient } from '../fill/FillGradient.mjs';\nimport { FillPattern } from '../fill/FillPattern.mjs';\n\n\"use strict\";\nfunction isColorLike(value) {\n  return Color.isColorLike(value);\n}\nfunction isFillPattern(value) {\n  return value instanceof FillPattern;\n}\nfunction isFillGradient(value) {\n  return value instanceof FillGradient;\n}\nfunction handleColorLike(fill, value, defaultStyle) {\n  const temp = Color.shared.setValue(value ?? 0);\n  fill.color = temp.toNumber();\n  fill.alpha = temp.alpha === 1 ? defaultStyle.alpha : temp.alpha;\n  fill.texture = Texture.WHITE;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleFillPattern(fill, value, defaultStyle) {\n  fill.fill = value;\n  fill.color = 16777215;\n  fill.texture = value.texture;\n  fill.matrix = value.transform;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleFillGradient(fill, value, defaultStyle) {\n  value.buildLinearGradient();\n  fill.fill = value;\n  fill.color = 16777215;\n  fill.texture = value.texture;\n  fill.matrix = value.transform;\n  return { ...defaultStyle, ...fill };\n}\nfunction handleFillObject(value, defaultStyle) {\n  const style = { ...defaultStyle, ...value };\n  if (style.texture) {\n    if (style.texture !== Texture.WHITE) {\n      const m = style.matrix?.invert() || new Matrix();\n      m.translate(style.texture.frame.x, style.texture.frame.y);\n      m.scale(1 / style.texture.source.width, 1 / style.texture.source.height);\n      style.matrix = m;\n    }\n    const sourceStyle = style.texture.source.style;\n    if (sourceStyle.addressMode === \"clamp-to-edge\") {\n      sourceStyle.addressMode = \"repeat\";\n      sourceStyle.update();\n    }\n  }\n  const color = Color.shared.setValue(style.color);\n  style.alpha *= color.alpha;\n  style.color = color.toNumber();\n  style.matrix = style.matrix ? style.matrix.clone() : null;\n  return style;\n}\nfunction toFillStyle(value, defaultStyle) {\n  if (value === void 0 || value === null) {\n    return null;\n  }\n  const fill = {};\n  const objectStyle = value;\n  if (isColorLike(value)) {\n    return handleColorLike(fill, value, defaultStyle);\n  } else if (isFillPattern(value)) {\n    return handleFillPattern(fill, value, defaultStyle);\n  } else if (isFillGradient(value)) {\n    return handleFillGradient(fill, value, defaultStyle);\n  } else if (objectStyle.fill && isFillPattern(objectStyle.fill)) {\n    return handleFillPattern(objectStyle, objectStyle.fill, defaultStyle);\n  } else if (objectStyle.fill && isFillGradient(objectStyle.fill)) {\n    return handleFillGradient(objectStyle, objectStyle.fill, defaultStyle);\n  }\n  return handleFillObject(objectStyle, defaultStyle);\n}\nfunction toStrokeStyle(value, defaultStyle) {\n  const { width, alignment, miterLimit, cap, join, ...rest } = defaultStyle;\n  const fill = toFillStyle(value, rest);\n  if (!fill) {\n    return null;\n  }\n  return {\n    width,\n    alignment,\n    miterLimit,\n    cap,\n    join,\n    ...fill\n  };\n}\n\nexport { toFillStyle, toStrokeStyle };\n\n", "import EventEmitter from 'eventemitter3';\nimport { Color } from '../../../color/Color.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../maths/point/Point.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { uid } from '../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\nimport { GraphicsPath } from './path/GraphicsPath.mjs';\nimport { SVGParser } from './svg/SVGParser.mjs';\nimport { toFillStyle, toStrokeStyle } from './utils/convertFillInputToFillStyle.mjs';\n\n\"use strict\";\nconst tmpPoint = new Point();\nconst tempMatrix = new Matrix();\nconst _GraphicsContext = class _GraphicsContext extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** unique id for this graphics context */\n    this.uid = uid(\"graphicsContext\");\n    this.dirty = true;\n    this.batchMode = \"auto\";\n    this.instructions = [];\n    this._activePath = new GraphicsPath();\n    this._transform = new Matrix();\n    this._fillStyle = { ..._GraphicsContext.defaultFillStyle };\n    this._strokeStyle = { ..._GraphicsContext.defaultStrokeStyle };\n    this._stateStack = [];\n    this._tick = 0;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n  }\n  /**\n   * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n   * including the current drawing state, transformations, styles, and instructions.\n   * @returns A new GraphicsContext instance with the same properties and state as this one.\n   */\n  clone() {\n    const clone = new _GraphicsContext();\n    clone.batchMode = this.batchMode;\n    clone.instructions = this.instructions.slice();\n    clone._activePath = this._activePath.clone();\n    clone._transform = this._transform.clone();\n    clone._fillStyle = { ...this._fillStyle };\n    clone._strokeStyle = { ...this._strokeStyle };\n    clone._stateStack = this._stateStack.slice();\n    clone._bounds = this._bounds.clone();\n    clone._boundsDirty = true;\n    return clone;\n  }\n  /**\n   * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n   */\n  get fillStyle() {\n    return this._fillStyle;\n  }\n  set fillStyle(value) {\n    this._fillStyle = toFillStyle(value, _GraphicsContext.defaultFillStyle);\n  }\n  /**\n   * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   */\n  get strokeStyle() {\n    return this._strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._strokeStyle = toStrokeStyle(value, _GraphicsContext.defaultStrokeStyle);\n  }\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n   *                or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(style) {\n    this._fillStyle = toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    return this;\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   *                or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(style) {\n    this._strokeStyle = toFillStyle(style, _GraphicsContext.defaultStrokeStyle);\n    return this;\n  }\n  texture(texture, tint, dx, dy, dw, dh) {\n    this.instructions.push({\n      action: \"texture\",\n      data: {\n        image: texture,\n        dx: dx || 0,\n        dy: dy || 0,\n        dw: dw || texture.frame.width,\n        dh: dh || texture.frame.height,\n        transform: this._transform.clone(),\n        alpha: this._fillStyle.alpha,\n        style: tint ? Color.shared.setValue(tint).toNumber() : 16777215\n      }\n    });\n    this.onUpdate();\n    return this;\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    this._activePath = new GraphicsPath();\n    return this;\n  }\n  fill(style, alpha) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"stroke\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      if (alpha !== void 0 && typeof style === \"number\") {\n        deprecation(v8_0_0, \"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead\");\n        style = { color: style, alpha };\n      }\n      this._fillStyle = toFillStyle(style, _GraphicsContext.defaultFillStyle);\n    }\n    this.instructions.push({\n      action: \"fill\",\n      // TODO copy fill style!\n      data: { style: this.fillStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  _initNextPathLocation() {\n    const { x, y } = this._activePath.getLastPoint(Point.shared);\n    this._activePath.clear();\n    this._activePath.moveTo(x, y);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillInput parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(style) {\n    let path;\n    const lastInstruction = this.instructions[this.instructions.length - 1];\n    if (this._tick === 0 && lastInstruction && lastInstruction.action === \"fill\") {\n      path = lastInstruction.data.path;\n    } else {\n      path = this._activePath.clone();\n    }\n    if (!path)\n      return this;\n    if (style != null) {\n      this._strokeStyle = toStrokeStyle(style, _GraphicsContext.defaultStrokeStyle);\n    }\n    this.instructions.push({\n      action: \"stroke\",\n      // TODO copy fill style!\n      data: { style: this.strokeStyle, path }\n    });\n    this.onUpdate();\n    this._initNextPathLocation();\n    this._tick = 0;\n    return this;\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  cut() {\n    for (let i = 0; i < 2; i++) {\n      const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n      const holePath = this._activePath.clone();\n      if (lastInstruction) {\n        if (lastInstruction.action === \"stroke\" || lastInstruction.action === \"fill\") {\n          if (lastInstruction.data.hole) {\n            lastInstruction.data.hole.addPath(holePath);\n          } else {\n            lastInstruction.data.hole = holePath;\n            break;\n          }\n        }\n      }\n    }\n    this._initNextPathLocation();\n    return this;\n  }\n  /**\n   * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n   * starting and ending angles, and direction.\n   * @param x - The x-coordinate of the arc's center.\n   * @param y - The y-coordinate of the arc's center.\n   * @param radius - The arc's radius.\n   * @param startAngle - The starting angle, in radians.\n   * @param endAngle - The ending angle, in radians.\n   * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arc(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      radius,\n      startAngle,\n      endAngle,\n      counterclockwise\n    );\n    return this;\n  }\n  /**\n   * Adds an arc to the current path with the given control points and radius, connected to the previous point\n   * by a straight line if necessary.\n   * @param x1 - The x-coordinate of the first control point.\n   * @param y1 - The y-coordinate of the first control point.\n   * @param x2 - The x-coordinate of the second control point.\n   * @param y2 - The y-coordinate of the second control point.\n   * @param radius - The arc's radius.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  arcTo(x1, y1, x2, y2, radius) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcTo(\n      t.a * x1 + t.c * y1 + t.tx,\n      t.b * x1 + t.d * y1 + t.ty,\n      t.a * x2 + t.c * y2 + t.tx,\n      t.b * x2 + t.d * y2 + t.ty,\n      radius\n    );\n    return this;\n  }\n  /**\n   * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n   * @param rx - The x-radius of the ellipse.\n   * @param ry - The y-radius of the ellipse.\n   * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n   * to the x-axis of the coordinate system, in degrees.\n   * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n   * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n   * @param x - The x-coordinate of the arc's end point.\n   * @param y - The y-coordinate of the arc's end point.\n   * @returns The instance of the current object for chaining.\n   */\n  arcToSvg(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.arcToSvg(\n      rx,\n      ry,\n      xAxisRotation,\n      // should we rotate this with transform??\n      largeArcFlag,\n      sweepFlag,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Adds a cubic Bezier curve to the path.\n   * It requires three points: the first two are control points and the third one is the end point.\n   * The starting point is the last point in the current path.\n   * @param cp1x - The x-coordinate of the first control point.\n   * @param cp1y - The y-coordinate of the first control point.\n   * @param cp2x - The x-coordinate of the second control point.\n   * @param cp2y - The y-coordinate of the second control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.bezierCurveTo(\n      t.a * cp1x + t.c * cp1y + t.tx,\n      t.b * cp1x + t.d * cp1y + t.ty,\n      t.a * cp2x + t.c * cp2y + t.tx,\n      t.b * cp2x + t.d * cp2y + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    this._tick++;\n    this._activePath?.closePath();\n    return this;\n  }\n  /**\n   * Draws an ellipse at the specified location and with the given x and y radii.\n   * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n   * @param x - The x-coordinate of the center of the ellipse.\n   * @param y - The y-coordinate of the center of the ellipse.\n   * @param radiusX - The horizontal radius of the ellipse.\n   * @param radiusY - The vertical radius of the ellipse.\n   * @returns The instance of the current object for chaining.\n   */\n  ellipse(x, y, radiusX, radiusY) {\n    this._tick++;\n    this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a circle shape. This method adds a new circle path to the current drawing.\n   * @param x - The x-coordinate of the center of the circle.\n   * @param y - The y-coordinate of the center of the circle.\n   * @param radius - The radius of the circle.\n   * @returns The instance of the current object for chaining.\n   */\n  circle(x, y, radius) {\n    this._tick++;\n    this._activePath.circle(x, y, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n   * @param path - The `GraphicsPath` to add.\n   * @returns The instance of the current object for chaining.\n   */\n  path(path) {\n    this._tick++;\n    this._activePath.addPath(path, this._transform.clone());\n    return this;\n  }\n  /**\n   * Connects the current point to a new point with a straight line. This method updates the current path.\n   * @param x - The x-coordinate of the new point to connect to.\n   * @param y - The y-coordinate of the new point to connect to.\n   * @returns The instance of the current object for chaining.\n   */\n  lineTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.lineTo(\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty\n    );\n    return this;\n  }\n  /**\n   * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n   * @param x - The x-coordinate for the starting point.\n   * @param y - The y-coordinate for the starting point.\n   * @returns The instance of the current object for chaining.\n   */\n  moveTo(x, y) {\n    this._tick++;\n    const t = this._transform;\n    const instructions = this._activePath.instructions;\n    const transformedX = t.a * x + t.c * y + t.tx;\n    const transformedY = t.b * x + t.d * y + t.ty;\n    if (instructions.length === 1 && instructions[0].action === \"moveTo\") {\n      instructions[0].data[0] = transformedX;\n      instructions[0].data[1] = transformedY;\n      return this;\n    }\n    this._activePath.moveTo(\n      transformedX,\n      transformedY\n    );\n    return this;\n  }\n  /**\n   * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n   * The starting point is the last point in the current path.\n   * @param cpx - The x-coordinate of the control point.\n   * @param cpy - The y-coordinate of the control point.\n   * @param x - The x-coordinate of the end point.\n   * @param y - The y-coordinate of the end point.\n   * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n   * @returns The instance of the current object for chaining.\n   */\n  quadraticCurveTo(cpx, cpy, x, y, smoothness) {\n    this._tick++;\n    const t = this._transform;\n    this._activePath.quadraticCurveTo(\n      t.a * cpx + t.c * cpy + t.tx,\n      t.b * cpx + t.d * cpy + t.ty,\n      t.a * x + t.c * y + t.tx,\n      t.b * x + t.d * y + t.ty,\n      smoothness\n    );\n    return this;\n  }\n  /**\n   * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @returns The instance of the current object for chaining.\n   */\n  rect(x, y, w, h) {\n    this._tick++;\n    this._activePath.rect(x, y, w, h, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a rectangle with rounded corners.\n   * The corner radius can be specified to determine how rounded the corners should be.\n   * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n   * @param x - The x-coordinate of the top-left corner of the rectangle.\n   * @param y - The y-coordinate of the top-left corner of the rectangle.\n   * @param w - The width of the rectangle.\n   * @param h - The height of the rectangle.\n   * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n   * @returns The instance of the current object for chaining.\n   */\n  roundRect(x, y, w, h, radius) {\n    this._tick++;\n    this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n   * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n   * rotated, or translated as needed.\n   * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n   * representing the x and y coordinates, of the polygon's vertices, in sequence.\n   * @param close - A boolean indicating whether to close the polygon path. True by default.\n   */\n  poly(points, close) {\n    this._tick++;\n    this._activePath.poly(points, close, this._transform.clone());\n    return this;\n  }\n  /**\n   * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n   * @returns The instance of the current object for chaining.\n   */\n  regularPoly(x, y, radius, sides, rotation = 0, transform) {\n    this._tick++;\n    this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n    return this;\n  }\n  /**\n   * Draws a polygon with rounded corners.\n   * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n   * @param x - The x-coordinate of the center of the polygon.\n   * @param y - The y-coordinate of the center of the polygon.\n   * @param radius - The radius of the circumscribed circle of the polygon.\n   * @param sides - The number of sides of the polygon. Must be 3 or more.\n   * @param corner - The radius of the rounding of the corners.\n   * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n   * @returns The instance of the current object for chaining.\n   */\n  roundPoly(x, y, radius, sides, corner, rotation) {\n    this._tick++;\n    this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n    return this;\n  }\n  /**\n   * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n   * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n   * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n   * A minimum of 3 points is required.\n   * @param radius - The default radius for the corners.\n   * This radius is applied to all corners unless overridden in `points`.\n   * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n   *  method instead of an arc method. Defaults to false.\n   * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n   * Higher values make the curve smoother.\n   * @returns The instance of the current object for chaining.\n   */\n  roundShape(points, radius, useQuadratic, smoothness) {\n    this._tick++;\n    this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n    return this;\n  }\n  /**\n   * Draw Rectangle with fillet corners. This is much like rounded rectangle\n   * however it support negative numbers as well for the corner radius.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param fillet - accept negative or positive values\n   */\n  filletRect(x, y, width, height, fillet) {\n    this._tick++;\n    this._activePath.filletRect(x, y, width, height, fillet);\n    return this;\n  }\n  /**\n   * Draw Rectangle with chamfer corners. These are angled corners.\n   * @param x - Upper left corner of rect\n   * @param y - Upper right corner of rect\n   * @param width - Width of rect\n   * @param height - Height of rect\n   * @param chamfer - non-zero real number, size of corner cutout\n   * @param transform\n   */\n  chamferRect(x, y, width, height, chamfer, transform) {\n    this._tick++;\n    this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n    return this;\n  }\n  /**\n   * Draws a star shape centered at a specified location. This method allows for the creation\n   *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n   * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n   * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n   * @param x - The x-coordinate of the center of the star.\n   * @param y - The y-coordinate of the center of the star.\n   * @param points - The number of points of the star.\n   * @param radius - The outer radius of the star (distance from the center to the outer points).\n   * @param innerRadius - Optional. The inner radius of the star\n   * (distance from the center to the inner points between the outer points).\n   * If not provided, defaults to half of the `radius`.\n   * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n   * Defaults to 0, meaning one point is directly upward.\n   * @returns The instance of the current object for chaining further drawing commands.\n   */\n  star(x, y, points, radius, innerRadius = 0, rotation = 0) {\n    this._tick++;\n    this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n    return this;\n  }\n  /**\n   * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n   * defined in SVG format to be drawn within the graphics context.\n   * @param svg - The SVG string to be parsed and rendered.\n   */\n  svg(svg) {\n    this._tick++;\n    SVGParser(svg, this);\n    return this;\n  }\n  /**\n   * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n   * This includes transformations, fill styles, and stroke styles.\n   */\n  restore() {\n    const state = this._stateStack.pop();\n    if (state) {\n      this._transform = state.transform;\n      this._fillStyle = state.fillStyle;\n      this._strokeStyle = state.strokeStyle;\n    }\n    return this;\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    this._stateStack.push({\n      transform: this._transform.clone(),\n      fillStyle: { ...this._fillStyle },\n      strokeStyle: { ...this._strokeStyle }\n    });\n    return this;\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this._transform;\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    this._transform.identity();\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the graphics context around the current origin.\n   * @param angle - The angle of rotation in radians.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  rotate(angle) {\n    this._transform.rotate(angle);\n    return this;\n  }\n  /**\n   * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n   * @param x - The scale factor in the horizontal direction.\n   * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  scale(x, y = x) {\n    this._transform.scale(x, y);\n    return this;\n  }\n  setTransform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix) {\n      this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n      return this;\n    }\n    this._transform.set(a, b, c, d, dx, dy);\n    return this;\n  }\n  transform(a, b, c, d, dx, dy) {\n    if (a instanceof Matrix) {\n      this._transform.append(a);\n      return this;\n    }\n    tempMatrix.set(a, b, c, d, dx, dy);\n    this._transform.append(tempMatrix);\n    return this;\n  }\n  /**\n   * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n   * @param x - The amount to translate in the horizontal direction.\n   * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  translate(x, y = x) {\n    this._transform.translate(x, y);\n    return this;\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    this._activePath.clear();\n    this.instructions.length = 0;\n    this.resetTransform();\n    this.onUpdate();\n    return this;\n  }\n  onUpdate() {\n    if (this.dirty)\n      return;\n    this.emit(\"update\", this, 16);\n    this.dirty = true;\n    this._boundsDirty = true;\n  }\n  /** The bounds of the graphic shape. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    const bounds = this._bounds;\n    bounds.clear();\n    for (let i = 0; i < this.instructions.length; i++) {\n      const instruction = this.instructions[i];\n      const action = instruction.action;\n      if (action === \"fill\") {\n        const data = instruction.data;\n        bounds.addBounds(data.path.bounds);\n      } else if (action === \"texture\") {\n        const data = instruction.data;\n        bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n      }\n      if (action === \"stroke\") {\n        const data = instruction.data;\n        const padding = data.style.width / 2;\n        const _bounds = data.path.bounds;\n        bounds.addFrame(\n          _bounds.minX - padding,\n          _bounds.minY - padding,\n          _bounds.maxX + padding,\n          _bounds.maxY + padding\n        );\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Check to see if a point is contained within this geometry.\n   * @param point - Point to check if it's contained.\n   * @returns {boolean} `true` if the point is contained within geometry.\n   */\n  containsPoint(point) {\n    if (!this.bounds.containsPoint(point.x, point.y))\n      return false;\n    const instructions = this.instructions;\n    let hasHit = false;\n    for (let k = 0; k < instructions.length; k++) {\n      const instruction = instructions[k];\n      const data = instruction.data;\n      const path = data.path;\n      if (!instruction.action || !path)\n        continue;\n      const style = data.style;\n      const shapes = path.shapePath.shapePrimitives;\n      for (let i = 0; i < shapes.length; i++) {\n        const shape = shapes[i].shape;\n        if (!style || !shape)\n          continue;\n        const transform = shapes[i].transform;\n        const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n        if (instruction.action === \"fill\") {\n          hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n        } else {\n          hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, style.width);\n        }\n        const holes = data.hole;\n        if (holes) {\n          const holeShapes = holes.shapePath?.shapePrimitives;\n          if (holeShapes) {\n            for (let j = 0; j < holeShapes.length; j++) {\n              if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y)) {\n                hasHit = false;\n              }\n            }\n          }\n        }\n        if (hasHit) {\n          return true;\n        }\n      }\n    }\n    return hasHit;\n  }\n  /**\n   * Destroys the GraphicsData object.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n   * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n   */\n  destroy(options = false) {\n    this._stateStack.length = 0;\n    this._transform = null;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fillStyle.texture) {\n        this._fillStyle.texture.destroy(destroyTextureSource);\n      }\n      if (this._strokeStyle.texture) {\n        this._strokeStyle.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fillStyle = null;\n    this._strokeStyle = null;\n    this.instructions = null;\n    this._activePath = null;\n    this._bounds = null;\n    this._stateStack = null;\n    this.customShader = null;\n    this._transform = null;\n  }\n};\n/** The default fill style to use when none is provided. */\n_GraphicsContext.defaultFillStyle = {\n  /** The color to use for the fill. */\n  color: 16777215,\n  /** The alpha value to use for the fill. */\n  alpha: 1,\n  /** The texture to use for the fill. */\n  texture: Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null\n};\n/** The default stroke style to use when none is provided. */\n_GraphicsContext.defaultStrokeStyle = {\n  /** The width of the stroke. */\n  width: 1,\n  /** The color to use for the stroke. */\n  color: 16777215,\n  /** The alpha value to use for the stroke. */\n  alpha: 1,\n  /** The alignment of the stroke. */\n  alignment: 0.5,\n  /** The miter limit to use. */\n  miterLimit: 10,\n  /** The line cap style to use. */\n  cap: \"butt\",\n  /** The line join style to use. */\n  join: \"miter\",\n  /** The texture to use for the fill. */\n  texture: Texture.WHITE,\n  /** The matrix to apply. */\n  matrix: null,\n  /** The fill pattern to use. */\n  fill: null\n};\nlet GraphicsContext = _GraphicsContext;\n\nexport { GraphicsContext };\n\n", "import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nconst valuesToIterateForKeys = [\n  \"align\",\n  \"breakWords\",\n  \"cssOverrides\",\n  \"fontVariant\",\n  \"fontWeight\",\n  \"leading\",\n  \"letterSpacing\",\n  \"lineHeight\",\n  \"padding\",\n  \"textBaseline\",\n  \"trim\",\n  \"whiteSpace\",\n  \"wordWrap\",\n  \"wordWrapWidth\",\n  \"fontFamily\",\n  \"fontStyle\",\n  \"fontSize\"\n];\nfunction generateTextStyleKey(style) {\n  const key = [];\n  let index = 0;\n  for (let i = 0; i < valuesToIterateForKeys.length; i++) {\n    const prop = `_${valuesToIterateForKeys[i]}`;\n    key[index++] = style[prop];\n  }\n  index = addFillStyleKey(style._fill, key, index);\n  index = addStokeStyleKey(style._stroke, key, index);\n  index = addDropShadowKey(style.dropShadow, key, index);\n  return key.join(\"-\");\n}\nfunction addFillStyleKey(fillStyle, key, index) {\n  if (!fillStyle)\n    return index;\n  key[index++] = fillStyle.color;\n  key[index++] = fillStyle.alpha;\n  key[index++] = fillStyle.fill?.styleKey;\n  return index;\n}\nfunction addStokeStyleKey(strokeStyle, key, index) {\n  if (!strokeStyle)\n    return index;\n  index = addFillStyleKey(strokeStyle, key, index);\n  key[index++] = strokeStyle.width;\n  key[index++] = strokeStyle.alignment;\n  key[index++] = strokeStyle.cap;\n  key[index++] = strokeStyle.join;\n  key[index++] = strokeStyle.miterLimit;\n  return index;\n}\nfunction addDropShadowKey(dropShadow, key, index) {\n  if (!dropShadow)\n    return index;\n  key[index++] = dropShadow.alpha;\n  key[index++] = dropShadow.angle;\n  key[index++] = dropShadow.blur;\n  key[index++] = dropShadow.distance;\n  key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n  return index;\n}\n\nexport { generateTextStyleKey };\n\n", "import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern.mjs';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext.mjs';\nimport { toFillStyle, toStrokeStyle } from '../graphics/shared/utils/convertFillInputToFillStyle.mjs';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey.mjs';\n\n\"use strict\";\nconst _TextStyle = class _TextStyle extends EventEmitter {\n  constructor(style = {}) {\n    super();\n    convertV7Tov8Style(style);\n    const fullStyle = { ..._TextStyle.defaultTextStyle, ...style };\n    for (const key in fullStyle) {\n      const thisKey = key;\n      this[thisKey] = fullStyle[key];\n    }\n    this.update();\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   * @member {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align = value;\n    this.update();\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(value) {\n    this._breakWords = value;\n    this.update();\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(value) {\n    if (value !== null && typeof value === \"object\") {\n      this._dropShadow = this._createProxy({ ..._TextStyle.defaultDropShadow, ...value });\n    } else {\n      this._dropShadow = value ? this._createProxy({ ..._TextStyle.defaultDropShadow }) : null;\n    }\n    this.update();\n  }\n  /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    this._fontFamily = value;\n    this.update();\n  }\n  /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(value) {\n    if (typeof value === \"string\") {\n      this._fontSize = parseInt(value, 10);\n    } else {\n      this._fontSize = value;\n    }\n    this.update();\n  }\n  /**\n   * The font style.\n   * @member {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    this._fontStyle = value;\n    this.update();\n  }\n  /**\n   * The font variant.\n   * @member {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(value) {\n    this._fontVariant = value;\n    this.update();\n  }\n  /**\n   * The font weight.\n   * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    this._fontWeight = value;\n    this.update();\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(value) {\n    this._leading = value;\n    this.update();\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing = value;\n    this.update();\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(value) {\n    this._lineHeight = value;\n    this.update();\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(value) {\n    this._padding = value;\n    this.update();\n  }\n  /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n  get trim() {\n    return this._trim;\n  }\n  set trim(value) {\n    this._trim = value;\n    this.update();\n  }\n  /**\n   * The baseline of the text that is rendered.\n   * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(value) {\n    this._textBaseline = value;\n    this.update();\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   * @member {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(value) {\n    this._whiteSpace = value;\n    this.update();\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(value) {\n    this._wordWrap = value;\n    this.update();\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(value) {\n    this._wordWrapWidth = value;\n    this.update();\n  }\n  /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n  get fill() {\n    return this._originalFill;\n  }\n  set fill(value) {\n    if (value === this._originalFill)\n      return;\n    this._originalFill = value;\n    if (this._isFillStyle(value)) {\n      this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () => {\n        this._fill = toFillStyle(\n          { ...this._originalFill },\n          GraphicsContext.defaultFillStyle\n        );\n      });\n    }\n    this._fill = toFillStyle(\n      value === 0 ? \"black\" : value,\n      GraphicsContext.defaultFillStyle\n    );\n    this.update();\n  }\n  /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n  get stroke() {\n    return this._originalStroke;\n  }\n  set stroke(value) {\n    if (value === this._originalStroke)\n      return;\n    this._originalStroke = value;\n    if (this._isFillStyle(value)) {\n      this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () => {\n        this._stroke = toStrokeStyle(\n          { ...this._originalStroke },\n          GraphicsContext.defaultStrokeStyle\n        );\n      });\n    }\n    this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n    this.update();\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this);\n    return this._styleKey;\n  }\n  update() {\n    this._styleKey = null;\n    this.emit(\"update\", this);\n  }\n  /** Resets all properties to the default values */\n  reset() {\n    const defaultStyle = _TextStyle.defaultTextStyle;\n    for (const key in defaultStyle) {\n      this[key] = defaultStyle[key];\n    }\n  }\n  get styleKey() {\n    return this._styleKey || this._generateKey();\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * @returns New cloned TextStyle object\n   */\n  clone() {\n    return new _TextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      leading: this.leading,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      textBaseline: this.textBaseline,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth\n    });\n  }\n  /**\n   * Destroys this text style.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n   */\n  destroy(options = false) {\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fill?.texture) {\n        this._fill.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalFill?.texture) {\n        this._originalFill.texture.destroy(destroyTextureSource);\n      }\n      if (this._stroke?.texture) {\n        this._stroke.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalStroke?.texture) {\n        this._originalStroke.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fill = null;\n    this._stroke = null;\n    this.dropShadow = null;\n    this._originalStroke = null;\n    this._originalFill = null;\n  }\n  _createProxy(value, cb) {\n    return new Proxy(value, {\n      set: (target, property, newValue) => {\n        target[property] = newValue;\n        cb?.(property, newValue);\n        this.update();\n        return true;\n      }\n    });\n  }\n  _isFillStyle(value) {\n    return (value ?? null) !== null && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern);\n  }\n};\n/** The default drop shadow settings */\n_TextStyle.defaultDropShadow = {\n  /** Set alpha for the drop shadow */\n  alpha: 1,\n  /** Set a angle of the drop shadow */\n  angle: Math.PI / 6,\n  /** Set a shadow blur radius */\n  blur: 0,\n  /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n  color: \"black\",\n  /** Set a distance of the drop shadow */\n  distance: 5\n};\n/** The default text style settings */\n_TextStyle.defaultTextStyle = {\n  /**\n   * See {@link TextStyle.align}\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  align: \"left\",\n  /** See {@link TextStyle.breakWords} */\n  breakWords: false,\n  /** See {@link TextStyle.dropShadow} */\n  dropShadow: null,\n  /**\n   * See {@link TextStyle.fill}\n   * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n   */\n  fill: \"black\",\n  /**\n   * See {@link TextStyle.fontFamily}\n   * @type {string|string[]}\n   */\n  fontFamily: \"Arial\",\n  /**\n   * See {@link TextStyle.fontSize}\n   * @type {number|string}\n   */\n  fontSize: 26,\n  /**\n   * See {@link TextStyle.fontStyle}\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  fontStyle: \"normal\",\n  /**\n   * See {@link TextStyle.fontVariant}\n   * @type {'normal'|'small-caps'}\n   */\n  fontVariant: \"normal\",\n  /**\n   * See {@link TextStyle.fontWeight}\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  fontWeight: \"normal\",\n  /** See {@link TextStyle.leading} */\n  leading: 0,\n  /** See {@link TextStyle.letterSpacing} */\n  letterSpacing: 0,\n  /** See {@link TextStyle.lineHeight} */\n  lineHeight: 0,\n  /** See {@link TextStyle.padding} */\n  padding: 0,\n  /**\n   * See {@link TextStyle.stroke}\n   * @type {string|number}\n   */\n  stroke: null,\n  /**\n   * See {@link TextStyle.textBaseline}\n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  textBaseline: \"alphabetic\",\n  /** See {@link TextStyle.trim} */\n  trim: false,\n  /**\n   * See {@link TextStyle.whiteSpace}\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  whiteSpace: \"pre\",\n  /** See {@link TextStyle.wordWrap} */\n  wordWrap: false,\n  /** See {@link TextStyle.wordWrapWidth} */\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction convertV7Tov8Style(style) {\n  const oldStyle = style;\n  if (typeof oldStyle.dropShadow === \"boolean\" && oldStyle.dropShadow) {\n    const defaults = TextStyle.defaultDropShadow;\n    style.dropShadow = {\n      alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n      angle: oldStyle.dropShadowAngle ?? defaults.angle,\n      blur: oldStyle.dropShadowBlur ?? defaults.blur,\n      color: oldStyle.dropShadowColor ?? defaults.color,\n      distance: oldStyle.dropShadowDistance ?? defaults.distance\n    };\n  }\n  if (oldStyle.strokeThickness !== void 0) {\n    deprecation(v8_0_0, \"strokeThickness is now a part of stroke\");\n    const color = oldStyle.stroke;\n    let obj = {};\n    if (Color.isColorLike(color)) {\n      obj.color = color;\n    } else if (color instanceof FillGradient || color instanceof FillPattern) {\n      obj.fill = color;\n    } else if (Object.hasOwnProperty.call(color, \"color\") || Object.hasOwnProperty.call(color, \"fill\")) {\n      obj = color;\n    } else {\n      throw new Error(\"Invalid stroke value.\");\n    }\n    style.stroke = {\n      ...obj,\n      width: oldStyle.strokeThickness\n    };\n  }\n  if (Array.isArray(oldStyle.fillGradientStops)) {\n    deprecation(v8_0_0, \"gradient fill is now a fill pattern: `new FillGradient(...)`\");\n    let fontSize;\n    if (style.fontSize == null) {\n      style.fontSize = TextStyle.defaultTextStyle.fontSize;\n    } else if (typeof style.fontSize === \"string\") {\n      fontSize = parseInt(style.fontSize, 10);\n    } else {\n      fontSize = style.fontSize;\n    }\n    const gradientFill = new FillGradient(0, 0, 0, fontSize * 1.7);\n    const fills = oldStyle.fillGradientStops.map((color) => Color.shared.setValue(color).toNumber());\n    fills.forEach((number, index) => {\n      const ratio = index / (fills.length - 1);\n      gradientFill.addColorStop(ratio, number);\n    });\n    style.fill = {\n      fill: gradientFill\n    };\n  }\n}\n\nexport { TextStyle };\n\n", "import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n\n", "\"use strict\";\nconst genericFontFamilies = [\n  \"serif\",\n  \"sans-serif\",\n  \"monospace\",\n  \"cursive\",\n  \"fantasy\",\n  \"system-ui\"\n];\nfunction fontStringFromTextStyle(style) {\n  const fontSizeString = typeof style.fontSize === \"number\" ? `${style.fontSize}px` : style.fontSize;\n  let fontFamilies = style.fontFamily;\n  if (!Array.isArray(style.fontFamily)) {\n    fontFamilies = style.fontFamily.split(\",\");\n  }\n  for (let i = fontFamilies.length - 1; i >= 0; i--) {\n    let fontFamily = fontFamilies[i].trim();\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily)) {\n      fontFamily = `\"${fontFamily}\"`;\n    }\n    fontFamilies[i] = fontFamily;\n  }\n  return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${fontFamilies.join(\",\")}`;\n}\n\nexport { fontStringFromTextStyle };\n\n", "import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\n\n\"use strict\";\nconst contextSettings = {\n  // TextMetrics requires getImageData readback for measuring fonts.\n  willReadFrequently: true\n};\nconst _CanvasTextMetrics = class _CanvasTextMetrics {\n  /**\n   * Checking that we can use modern canvas 2D API.\n   *\n   * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n   * @see TextMetrics.experimentalLetterSpacing\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n   * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n   */\n  static get experimentalLetterSpacingSupported() {\n    let result = _CanvasTextMetrics._experimentalLetterSpacingSupported;\n    if (result !== void 0) {\n      const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n      result = _CanvasTextMetrics._experimentalLetterSpacingSupported = \"letterSpacing\" in proto || \"textLetterSpacing\" in proto;\n    }\n    return result;\n  }\n  /**\n   * @param text - the text that was measured\n   * @param style - the style that was measured\n   * @param width - the measured width of the text\n   * @param height - the measured height of the text\n   * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param lineWidths - an array of the line widths for each line matched to `lines`\n   * @param lineHeight - the measured line height for this style\n   * @param maxLineWidth - the maximum line width for all measured lines\n   * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   * @param text - The text to measure.\n   * @param style - The text style to use for measuring\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @param wordWrap\n   * @returns Measured width and height of the text.\n   */\n  static measureText(text = \" \", style, canvas = _CanvasTextMetrics._canvas, wordWrap = style.wordWrap) {\n    const textKey = `${text}:${style.styleKey}`;\n    if (_CanvasTextMetrics._measurementCache[textKey])\n      return _CanvasTextMetrics._measurementCache[textKey];\n    const font = fontStringFromTextStyle(style);\n    const fontProperties = _CanvasTextMetrics.measureFont(font);\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    const context = _CanvasTextMetrics.__context;\n    context.font = font;\n    const outputText = wordWrap ? _CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n    const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineWidth = _CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    const strokeWidth = style._stroke?.width || 0;\n    let width = maxLineWidth + strokeWidth;\n    if (style.dropShadow) {\n      width += style.dropShadow.distance;\n    }\n    const lineHeight = style.lineHeight || fontProperties.fontSize;\n    let height = Math.max(lineHeight, fontProperties.fontSize + strokeWidth) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadow.distance;\n    }\n    const measurements = new _CanvasTextMetrics(\n      text,\n      style,\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight + style.leading,\n      maxLineWidth,\n      fontProperties\n    );\n    return measurements;\n  }\n  static _measureText(text, letterSpacing, context) {\n    let useExperimentalLetterSpacing = false;\n    if (_CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (_CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    let width = context.measureText(text).width;\n    if (width > 0) {\n      if (useExperimentalLetterSpacing) {\n        width -= letterSpacing;\n      } else {\n        width += (_CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n      }\n    }\n    return width;\n  }\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   * @param text - String to apply word wrapping to\n   * @param style - the style to use when wrapping\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @returns New string with new lines applied where required\n   */\n  static _wordWrap(text, style, canvas = _CanvasTextMetrics._canvas) {\n    const context = canvas.getContext(\"2d\", contextSettings);\n    let width = 0;\n    let line = \"\";\n    let lines = \"\";\n    const cache = /* @__PURE__ */ Object.create(null);\n    const { letterSpacing, whiteSpace } = style;\n    const collapseSpaces = _CanvasTextMetrics._collapseSpaces(whiteSpace);\n    const collapseNewlines = _CanvasTextMetrics._collapseNewlines(whiteSpace);\n    let canPrependSpaces = !collapseSpaces;\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    const tokens = _CanvasTextMetrics._tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i];\n      if (_CanvasTextMetrics._isNewline(token)) {\n        if (!collapseNewlines) {\n          lines += _CanvasTextMetrics._addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n        token = \" \";\n      }\n      if (collapseSpaces) {\n        const currIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      const tokenWidth = _CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n      if (tokenWidth > wordWrapWidth) {\n        if (line !== \"\") {\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (_CanvasTextMetrics.canBreakWords(token, style.breakWords)) {\n          const characters = _CanvasTextMetrics.wordWrapSplit(token);\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n            let lastChar = char;\n            let k = 1;\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              if (!_CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                char += nextChar;\n              } else {\n                break;\n              }\n              lastChar = nextChar;\n              k++;\n            }\n            j += k - 1;\n            const characterWidth = _CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += _CanvasTextMetrics._addLine(line);\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        } else {\n          if (line.length > 0) {\n            lines += _CanvasTextMetrics._addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          const isLastToken = i === tokens.length - 1;\n          lines += _CanvasTextMetrics._addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      } else {\n        if (tokenWidth + width > wordWrapWidth) {\n          canPrependSpaces = false;\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (line.length > 0 || !_CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          line += token;\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += _CanvasTextMetrics._addLine(line, false);\n    return lines;\n  }\n  /**\n   * Convenience function for logging each line added during the wordWrap method.\n   * @param line    - The line of text to add\n   * @param newLine - Add new line character to end\n   * @returns A formatted line\n   */\n  static _addLine(line, newLine = true) {\n    line = _CanvasTextMetrics._trimRight(line);\n    line = newLine ? `${line}\n` : line;\n    return line;\n  }\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   * @param key            - The key\n   * @param letterSpacing  - The letter spacing\n   * @param cache          - The cache\n   * @param context        - The canvas context\n   * @returns The from cache.\n   */\n  static _getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n    if (typeof width !== \"number\") {\n      width = _CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n      cache[key] = width;\n    }\n    return width;\n  }\n  /**\n   * Determines whether we should collapse breaking spaces.\n   * @param whiteSpace - The TextStyle property whiteSpace\n   * @returns Should collapse\n   */\n  static _collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n  /**\n   * Determines whether we should collapse newLine chars.\n   * @param whiteSpace - The white space\n   * @returns should collapse\n   */\n  static _collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n  /**\n   * Trims breaking whitespaces from string.\n   * @param text - The text\n   * @returns Trimmed string\n   */\n  static _trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n      if (!_CanvasTextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  }\n  /**\n   * Determines if char is a newline.\n   * @param char - The character\n   * @returns True if newline, False otherwise.\n   */\n  static _isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n  }\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * It allows one to determine whether char should be a breaking whitespace\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param char - The character\n   * @param [_nextChar] - The next character\n   * @returns True if whitespace, False otherwise.\n   */\n  static isBreakingSpace(char, _nextChar) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n  }\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   * @param text - The text\n   * @returns A tokenized array\n   */\n  static _tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const nextChar = text[i + 1];\n      if (_CanvasTextMetrics.isBreakingSpace(char, nextChar) || _CanvasTextMetrics._isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n    return tokens;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   * @param _token - The token\n   * @param breakWords - The style attr break words\n   * @returns Whether to break word or not\n   */\n  static canBreakWords(_token, breakWords) {\n    return breakWords;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param _char - The character\n   * @param _nextChar - The next character\n   * @param _token - The token/word the characters are from\n   * @param _index - The index in the token of the char\n   * @param _breakWords - The style attr break words\n   * @returns whether to break word or not\n   */\n  static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It is called when a token (usually a word) has to be split into separate pieces\n   * in order to determine the point to break a word.\n   * It must return an array of characters.\n   * @param token - The token to split\n   * @returns The characters of the token\n   * @see CanvasTextMetrics.graphemeSegmenter\n   */\n  static wordWrapSplit(token) {\n    return _CanvasTextMetrics.graphemeSegmenter(token);\n  }\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   * @param font - String representing the style of the font\n   * @returns Font properties object\n   */\n  static measureFont(font) {\n    if (_CanvasTextMetrics._fonts[font]) {\n      return _CanvasTextMetrics._fonts[font];\n    }\n    const context = _CanvasTextMetrics._context;\n    context.font = font;\n    const metrics = context.measureText(_CanvasTextMetrics.METRICS_STRING + _CanvasTextMetrics.BASELINE_SYMBOL);\n    const properties = {\n      ascent: metrics.actualBoundingBoxAscent,\n      descent: metrics.actualBoundingBoxDescent,\n      fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n    };\n    _CanvasTextMetrics._fonts[font] = properties;\n    return properties;\n  }\n  /**\n   * Clear font metrics in metrics cache.\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n  static clearMetrics(font = \"\") {\n    if (font) {\n      delete _CanvasTextMetrics._fonts[font];\n    } else {\n      _CanvasTextMetrics._fonts = {};\n    }\n  }\n  /**\n   * Cached canvas element for measuring text\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _canvas() {\n    if (!_CanvasTextMetrics.__canvas) {\n      let canvas;\n      try {\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext(\"2d\", contextSettings);\n        if (context?.measureText) {\n          _CanvasTextMetrics.__canvas = c;\n          return c;\n        }\n        canvas = DOMAdapter.get().createCanvas();\n      } catch (ex) {\n        canvas = DOMAdapter.get().createCanvas();\n      }\n      canvas.width = canvas.height = 10;\n      _CanvasTextMetrics.__canvas = canvas;\n    }\n    return _CanvasTextMetrics.__canvas;\n  }\n  /**\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _context() {\n    if (!_CanvasTextMetrics.__context) {\n      _CanvasTextMetrics.__context = _CanvasTextMetrics._canvas.getContext(\"2d\", contextSettings);\n    }\n    return _CanvasTextMetrics.__context;\n  }\n};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n */\n_CanvasTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\n/** Baseline symbol for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_SYMBOL = \"M\";\n/** Baseline multiplier for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/** Height multiplier for setting height of canvas to calculate font metrics. */\n_CanvasTextMetrics.HEIGHT_MULTIPLIER = 2;\n/**\n * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n */\n_CanvasTextMetrics.graphemeSegmenter = (() => {\n  if (typeof Intl?.Segmenter === \"function\") {\n    const segmenter = new Intl.Segmenter();\n    return (s) => [...segmenter.segment(s)].map((x) => x.segment);\n  }\n  return (s) => [...s];\n})();\n/**\n * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n * lead to more accurate letter-spacing results because it does not try to manually draw\n * each character. However, this Chrome API is experimental and may not serve all cases yet.\n * @see TextMetrics.experimentalLetterSpacingSupported\n */\n_CanvasTextMetrics.experimentalLetterSpacing = false;\n/** Cache of {@see TextMetrics.FontMetrics} objects. */\n_CanvasTextMetrics._fonts = {};\n/** Cache of new line chars. */\n_CanvasTextMetrics._newlines = [\n  10,\n  // line feed\n  13\n  // carriage return\n];\n/** Cache of breaking spaces. */\n_CanvasTextMetrics._breakingSpaces = [\n  9,\n  // character tabulation\n  32,\n  // space\n  8192,\n  // en quad\n  8193,\n  // em quad\n  8194,\n  // en space\n  8195,\n  // em space\n  8196,\n  // three-per-em space\n  8197,\n  // four-per-em space\n  8198,\n  // six-per-em space\n  8200,\n  // punctuation space\n  8201,\n  // thin space\n  8202,\n  // hair space\n  8287,\n  // medium mathematical space\n  12288\n  // ideographic space\n];\n_CanvasTextMetrics._measurementCache = {};\nlet CanvasTextMetrics = _CanvasTextMetrics;\n\nexport { CanvasTextMetrics };\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern.mjs';\n\n\"use strict\";\nfunction getCanvasFillStyle(fillStyle, context) {\n  if (fillStyle.texture === Texture.WHITE && !fillStyle.fill) {\n    return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n  } else if (!fillStyle.fill) {\n    const pattern = context.createPattern(fillStyle.texture.source.resource, \"repeat\");\n    const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n    tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillPattern) {\n    const fillPattern = fillStyle.fill;\n    const pattern = context.createPattern(fillPattern.texture.source.resource, \"repeat\");\n    const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n    tempMatrix.scale(\n      fillPattern.texture.frame.width,\n      fillPattern.texture.frame.height\n    );\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillGradient) {\n    const fillGradient = fillStyle.fill;\n    if (fillGradient.type === \"linear\") {\n      const gradient = context.createLinearGradient(\n        fillGradient.x0,\n        fillGradient.y0,\n        fillGradient.x1,\n        fillGradient.y1\n      );\n      fillGradient.gradientStops.forEach((stop) => {\n        gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n      });\n      return gradient;\n    }\n  }\n  warn(\"FillStyle not recognised\", fillStyle);\n  return \"red\";\n}\n\nexport { getCanvasFillStyle };\n\n", "import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    const padding = style.padding * 2;\n    context.clearRect(0, 0, measured.width + 4 + padding, measured.height + 4 + padding);\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.globalAlpha = style._fill?.alpha ?? 1;\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n\n", "import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { ViewContainer } from '../../view/View.mjs';\nimport { GraphicsContext } from './GraphicsContext.mjs';\n\n\"use strict\";\nclass Graphics extends ViewContainer {\n  /**\n   * @param options - Options for the Graphics.\n   */\n  constructor(options) {\n    if (options instanceof GraphicsContext) {\n      options = { context: options };\n    }\n    const { context, roundPixels, ...rest } = options || {};\n    super({\n      label: \"Graphics\",\n      ...rest\n    });\n    this.renderPipeId = \"graphics\";\n    if (!context) {\n      this._context = this._ownedContext = new GraphicsContext();\n    } else {\n      this._context = context;\n    }\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.allowChildren = false;\n    this.roundPixels = roundPixels ?? false;\n  }\n  set context(context) {\n    if (context === this._context)\n      return;\n    this._context.off(\"update\", this.onViewUpdate, this);\n    this._context = context;\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.onViewUpdate();\n  }\n  get context() {\n    return this._context;\n  }\n  /**\n   * The local bounds of the graphic.\n   * @type {rendering.Bounds}\n   */\n  get bounds() {\n    return this._context.bounds;\n  }\n  /**\n   * Adds the bounds of this object to the bounds object.\n   * @param bounds - The output bounds object.\n   */\n  addBounds(bounds) {\n    bounds.addBounds(this._context.bounds);\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    return this._context.containsPoint(point);\n  }\n  onViewUpdate() {\n    this._didViewChangeTick++;\n    this._didGraphicsUpdate = true;\n    if (this.didViewUpdate)\n      return;\n    this.didViewUpdate = true;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.onChildViewUpdate(this);\n    }\n  }\n  /**\n   * Destroys this graphics renderable and optionally its context.\n   * @param options - Options parameter. A boolean will act as if all options\n   *\n   * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n   * then the context will still be destroyed.\n   *\n   * If you want to explicitly not destroy this context that this graphics created,\n   * then you should pass destroy({ context: false })\n   *\n   * If the context was passed in as an argument to the constructor then it will not be destroyed\n   * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n   * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n   * @param {boolean} [options.context=false] - Should destroy the context\n   */\n  destroy(options) {\n    if (this._ownedContext && !options) {\n      this._ownedContext.destroy(options);\n    } else if (options === true || options?.context === true) {\n      this._context.destroy(options);\n    }\n    this._ownedContext = null;\n    this._context = null;\n    super.destroy(options);\n  }\n  _callContextMethod(method, args) {\n    this.context[method](...args);\n    return this;\n  }\n  // --------------------------------------- GraphicsContext methods ---------------------------------------\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param {FillInput} args - The fill style to apply. This can be a simple color, a gradient or\n   * pattern object, or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle(...args) {\n    return this._callContextMethod(\"setFillStyle\", args);\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param {StrokeInput} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   * or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle(...args) {\n    return this._callContextMethod(\"setStrokeStyle\", args);\n  }\n  fill(...args) {\n    return this._callContextMethod(\"fill\", args);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillStyle parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param {FillStyle} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n   * complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke(...args) {\n    return this._callContextMethod(\"stroke\", args);\n  }\n  texture(...args) {\n    return this._callContextMethod(\"texture\", args);\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    return this._callContextMethod(\"beginPath\", []);\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   */\n  cut() {\n    return this._callContextMethod(\"cut\", []);\n  }\n  arc(...args) {\n    return this._callContextMethod(\"arc\", args);\n  }\n  arcTo(...args) {\n    return this._callContextMethod(\"arcTo\", args);\n  }\n  arcToSvg(...args) {\n    return this._callContextMethod(\"arcToSvg\", args);\n  }\n  bezierCurveTo(...args) {\n    return this._callContextMethod(\"bezierCurveTo\", args);\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    return this._callContextMethod(\"closePath\", []);\n  }\n  ellipse(...args) {\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  circle(...args) {\n    return this._callContextMethod(\"circle\", args);\n  }\n  path(...args) {\n    return this._callContextMethod(\"path\", args);\n  }\n  lineTo(...args) {\n    return this._callContextMethod(\"lineTo\", args);\n  }\n  moveTo(...args) {\n    return this._callContextMethod(\"moveTo\", args);\n  }\n  quadraticCurveTo(...args) {\n    return this._callContextMethod(\"quadraticCurveTo\", args);\n  }\n  rect(...args) {\n    return this._callContextMethod(\"rect\", args);\n  }\n  roundRect(...args) {\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  poly(...args) {\n    return this._callContextMethod(\"poly\", args);\n  }\n  regularPoly(...args) {\n    return this._callContextMethod(\"regularPoly\", args);\n  }\n  roundPoly(...args) {\n    return this._callContextMethod(\"roundPoly\", args);\n  }\n  roundShape(...args) {\n    return this._callContextMethod(\"roundShape\", args);\n  }\n  filletRect(...args) {\n    return this._callContextMethod(\"filletRect\", args);\n  }\n  chamferRect(...args) {\n    return this._callContextMethod(\"chamferRect\", args);\n  }\n  star(...args) {\n    return this._callContextMethod(\"star\", args);\n  }\n  svg(...args) {\n    return this._callContextMethod(\"svg\", args);\n  }\n  restore(...args) {\n    return this._callContextMethod(\"restore\", args);\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    return this._callContextMethod(\"save\", []);\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this.context.getTransform();\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing\n   * any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    return this._callContextMethod(\"resetTransform\", []);\n  }\n  rotateTransform(...args) {\n    return this._callContextMethod(\"rotate\", args);\n  }\n  scaleTransform(...args) {\n    return this._callContextMethod(\"scale\", args);\n  }\n  setTransform(...args) {\n    return this._callContextMethod(\"setTransform\", args);\n  }\n  transform(...args) {\n    return this._callContextMethod(\"transform\", args);\n  }\n  translateTransform(...args) {\n    return this._callContextMethod(\"translate\", args);\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    return this._callContextMethod(\"clear\", []);\n  }\n  /**\n   * The fill style to use.\n   * @type {ConvertedFillStyle}\n   */\n  get fillStyle() {\n    return this._context.fillStyle;\n  }\n  set fillStyle(value) {\n    this._context.fillStyle = value;\n  }\n  /**\n   * The stroke style to use.\n   * @type {ConvertedStrokeStyle}\n   */\n  get strokeStyle() {\n    return this._context.strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._context.strokeStyle = value;\n  }\n  /**\n   * Creates a new Graphics object.\n   * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n   * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n   * will be shared between the two objects (default false). If true, the context will be\n   * cloned (recommended if you need to modify the context in any way).\n   * @returns - A clone of the graphics object\n   */\n  clone(deep = false) {\n    if (deep) {\n      return new Graphics(this._context.clone());\n    }\n    this._ownedContext = null;\n    const clone = new Graphics(this._context);\n    return clone;\n  }\n  // -------- v7 deprecations ---------\n  /**\n   * @param width\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n   */\n  lineStyle(width, color, alpha) {\n    deprecation(v8_0_0, \"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.\");\n    const strokeStyle = {};\n    width && (strokeStyle.width = width);\n    color && (strokeStyle.color = color);\n    alpha && (strokeStyle.alpha = alpha);\n    this.context.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  beginFill(color, alpha) {\n    deprecation(v8_0_0, \"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    const fillStyle = {};\n    color && (fillStyle.color = color);\n    alpha && (fillStyle.alpha = alpha);\n    this.context.fillStyle = fillStyle;\n    return this;\n  }\n  /**\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  endFill() {\n    deprecation(v8_0_0, \"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    this.context.fill();\n    const strokeStyle = this.context.strokeStyle;\n    if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha) {\n      this.context.stroke();\n    }\n    return this;\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n   */\n  drawCircle(...args) {\n    deprecation(v8_0_0, \"Graphics#drawCircle has been renamed to Graphics#circle\");\n    return this._callContextMethod(\"circle\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n   */\n  drawEllipse(...args) {\n    deprecation(v8_0_0, \"Graphics#drawEllipse has been renamed to Graphics#ellipse\");\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n   */\n  drawPolygon(...args) {\n    deprecation(v8_0_0, \"Graphics#drawPolygon has been renamed to Graphics#poly\");\n    return this._callContextMethod(\"poly\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n   */\n  drawRect(...args) {\n    deprecation(v8_0_0, \"Graphics#drawRect has been renamed to Graphics#rect\");\n    return this._callContextMethod(\"rect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n   */\n  drawRoundedRect(...args) {\n    deprecation(v8_0_0, \"Graphics#drawRoundedRect has been renamed to Graphics#roundRect\");\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n   */\n  drawStar(...args) {\n    deprecation(v8_0_0, \"Graphics#drawStar has been renamed to Graphics#star\");\n    return this._callContextMethod(\"star\", args);\n  }\n}\n\nexport { Graphics };\n\n", "\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n\n", "\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n\n", "import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    this.applyFillAsTint = true;\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture?.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexport { AbstractBitmapFont };\n\n", "\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexport { resolveCharacters };\n\n", "import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nconst _DynamicBitmapFont = class _DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 0;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = { ..._DynamicBitmapFont.defaultOptions, ...options };\n    this._textureSize = dynamicOptions.textureSize;\n    this._mipmap = dynamicOptions.mipmap;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    this.applyFillAsTint = dynamicOptions.overrideFill;\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = resolveCharacters(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    const widthScale = style.fontStyle === \"italic\" ? 2 : 1;\n    let maxCharHeight = 0;\n    let skipTexture = false;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = widthScale * metrics.width * fontScale;\n      const height = metrics.height * fontScale;\n      const paddedWidth = width + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));\n      }\n      if (currentX + paddedWidth > this._textureSize) {\n        currentY += maxCharHeight;\n        maxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + maxCharHeight > this._textureSize) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentY = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n      this._textureSize,\n      this._textureSize,\n      textureResolution\n    );\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\",\n        autoGenerateMipmaps: this._mipmap\n      })\n    });\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    if (style.stroke && strokeThickness) {\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    if (style._fill) {\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      canvasAndContext.canvas.width = canvasAndContext.canvas.width;\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n};\n_DynamicBitmapFont.defaultOptions = {\n  textureSize: 512,\n  style: new TextStyle(),\n  mipmap: true\n};\nlet DynamicBitmapFont = _DynamicBitmapFont;\n\nexport { DynamicBitmapFont };\n\n", "\"use strict\";\nfunction getBitmapTextLayout(chars, style, font, trimEnd) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    if (trimEnd) {\n      let lastChar = currentLine.chars[index];\n      while (lastChar === \" \") {\n        currentLine.width -= font.chars[lastChar].xAdvance;\n        lastChar = currentLine.chars[--index];\n      }\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && currentLine.width + currentWord.width - adjustedLetterSpacing > adjustedWordWrapWidth;\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n\n", "import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      let key = style.styleKey;\n      key = key.substring(0, key.lastIndexOf(\"-\"));\n      fontFamilyKey = `${key}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.remove(fontFamilyKey);\n      });\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      Cache.remove(cacheKey);\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n\n", "import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n\n", "import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n\n", "\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n\n", "import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n\n", "import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n\n", "\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n\n", "import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n\n", "import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n\n", "import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n\n", "\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n\n", "import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  CanvasPool.returnCanvasAndContext(canvasAndContext);\n  return canvasAndContext.canvas;\n}\n\nexport { getTemporaryCanvasFromImage };\n\n", "\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n\n", "import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics.mjs';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height + descenderPadding - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HtmlTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    let resource = image;\n    if (this._createCanvas) {\n      resource = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n\n", "import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n\n", "\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n\n", "import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n\n", "\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n\n", "\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite._applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (batchableMesh && batchableMesh.texture._source !== renderable.texture._source) {\n        return !batchableMesh._batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n      }\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite._didTilingSpriteUpdate) {\n        tilingSprite._didTilingSpriteUpdate = false;\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite._didTilingSpriteUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite._didTilingSpriteUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n    tilingSprite._didTilingSpriteUpdate = false;\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n\n", "import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n\n", "import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    sprite._didSpriteUpdate = true;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n\n", "import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  if (!target.renderGroup) {\n    bounds.applyMatrix(target.parentRenderGroup.worldTransform);\n  } else {\n    bounds.applyMatrix(target.renderGroup.localTransform);\n  }\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.renderGroup || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(target.parentRenderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(target.parentRenderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.renderGroup) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n\n", "\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    renderable.addBounds(bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n\n", "import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired = blendRequired || filter.blendRequired;\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    const viewPort = renderer.renderTarget.rootViewPort;\n    bounds.scale(resolution).fitBounds(0, viewPort.width, 0, viewPort.height).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n\n"],
  "mappings": "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",
  "names": ["parse", "path", "transform", "out", "_Spritesheet", "out", "out2", "tempMatrix", "_VideoSource", "earcut", "_GraphicsContextSystem", "_FillGradient", "transform", "transform", "path", "parse", "out", "out", "out", "out", "RECURSION_LIMIT", "FLT_EPSILON", "PATH_DISTANCE_EPSILON", "curveAngleToleranceEpsilon", "mAngleTolerance", "begin", "recursive", "path", "transform", "path", "transform", "out", "_GraphicsContext", "path", "transform", "_TextStyle", "tempBounds", "_CanvasTextMetrics", "tempMatrix", "_DynamicBitmapFont", "uid", "out", "promise", "_MeshGeometry", "gpuProgram", "glProgram", "_PlaneGeometry", "_NineSliceGeometry", "tempMatrix", "tempMatrix"]
}
