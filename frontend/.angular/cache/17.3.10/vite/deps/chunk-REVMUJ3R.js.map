{
  "version": 3,
  "sources": ["../../../../../node_modules/pixi.js/lib/rendering/batcher/gpu/getTextureBatchBindGroup.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs"],
  "sourcesContent": ["import { BindGroup } from '../../renderers/gpu/shader/BindGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures.mjs';\n\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 2166136261;\n  for (let i = 0; i < size; i++) {\n    uid ^= textures[i].uid;\n    uid = Math.imul(uid, 16777619);\n    uid >>>= 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, size, uid);\n}\nlet maxTextures = 0;\nfunction generateTextureBatchBindGroup(textures, size, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  if (!maxTextures)\n    maxTextures = getMaxTexturesPerBatch();\n  for (let i = 0; i < maxTextures; i++) {\n    const texture = i < size ? textures[i] : Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\n\nexport { getTextureBatchBindGroup };\n\n", "import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n\n"],
  "mappings": ";;;;;;;;;AAKA,IAAM,eAAe,CAAC;AACtB,SAAS,yBAAyB,UAAU,MAAM;AAChD,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,WAAO,SAAS,CAAC,EAAE;AACnB,UAAM,KAAK,KAAK,KAAK,QAAQ;AAC7B,aAAS;AAAA,EACX;AACA,SAAO,aAAa,GAAG,KAAK,8BAA8B,UAAU,MAAM,GAAG;AAC/E;AACA,IAAI,cAAc;AAClB,SAAS,8BAA8B,UAAU,MAAM,KAAK;AAC1D,QAAM,qBAAqB,CAAC;AAC5B,MAAI,YAAY;AAChB,MAAI,CAAC;AACH,kBAAc,uBAAuB;AACvC,WAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,UAAM,UAAU,IAAI,OAAO,SAAS,CAAC,IAAI,QAAQ,MAAM;AACvD,uBAAmB,WAAW,IAAI,QAAQ;AAC1C,uBAAmB,WAAW,IAAI,QAAQ;AAAA,EAC5C;AACA,QAAM,YAAY,IAAI,UAAU,kBAAkB;AAClD,eAAa,GAAG,IAAI;AACpB,SAAO;AACT;;;ACzBA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,eAAe;AACzB,SAAK,cAA8B,uBAAO,OAAO,IAAI;AACrD,SAAK,gBAAgB,iBAAiB,CAAC;AACvC,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,wBAAwB,YAAY,aAAa;AAC/C,UAAM,SAAS,WAAW,IAAI,EAAE,aAAa;AAC7C,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,UAAM,UAAU,OAAO,WAAW,IAAI;AACtC,WAAO,EAAE,QAAQ,QAAQ;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,2BAA2B,UAAU,WAAW,aAAa,GAAG;AAC9D,eAAW,KAAK,KAAK,WAAW,aAAa,IAAI;AACjD,gBAAY,KAAK,KAAK,YAAY,aAAa,IAAI;AACnD,eAAW,SAAS,QAAQ;AAC5B,gBAAY,SAAS,SAAS;AAC9B,UAAM,OAAO,YAAY,OAAO,aAAa;AAC7C,QAAI,CAAC,KAAK,YAAY,GAAG,GAAG;AAC1B,WAAK,YAAY,GAAG,IAAI,CAAC;AAAA,IAC3B;AACA,QAAI,mBAAmB,KAAK,YAAY,GAAG,EAAE,IAAI;AACjD,QAAI,CAAC,kBAAkB;AACrB,yBAAmB,KAAK,wBAAwB,UAAU,SAAS;AAAA,IACrE;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,kBAAkB;AACvC,UAAM,SAAS,iBAAiB;AAChC,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,OAAO,SAAS,OAAO,UAAU;AACvC,SAAK,YAAY,GAAG,EAAE,KAAK,gBAAgB;AAAA,EAC7C;AAAA,EACA,QAAQ;AACN,SAAK,cAAc,CAAC;AAAA,EACtB;AACF;AACA,IAAM,aAAa,IAAI,gBAAgB;",
  "names": []
}
