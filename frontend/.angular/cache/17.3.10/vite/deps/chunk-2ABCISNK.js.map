{
  "version": 3,
  "sources": ["../../../../../node_modules/pixi.js/node_modules/eventemitter3/index.js", "../../../../../node_modules/earcut/src/earcut.js", "../../../../../node_modules/pixi.js/lib/extensions/Extensions.mjs", "../../../../../node_modules/pixi.js/node_modules/eventemitter3/index.mjs", "../../../../../node_modules/@pixi/colord/index.mjs", "../../../../../node_modules/@pixi/colord/plugins/names.mjs", "../../../../../node_modules/pixi.js/lib/color/Color.mjs", "../../../../../node_modules/pixi.js/lib/culling/cullingMixin.mjs", "../../../../../node_modules/pixi.js/lib/maths/misc/const.mjs", "../../../../../node_modules/pixi.js/lib/maths/point/Point.mjs", "../../../../../node_modules/pixi.js/lib/maths/matrix/Matrix.mjs", "../../../../../node_modules/pixi.js/lib/maths/point/ObservablePoint.mjs", "../../../../../node_modules/pixi.js/lib/utils/data/uid.mjs", "../../../../../node_modules/pixi.js/lib/utils/logging/deprecation.mjs", "../../../../../node_modules/pixi.js/lib/utils/pool/Pool.mjs", "../../../../../node_modules/pixi.js/lib/utils/pool/PoolGroup.mjs", "../../../../../node_modules/pixi.js/lib/utils/data/removeItems.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/childrenHelperMixin.mjs", "../../../../../node_modules/pixi.js/lib/filters/FilterEffect.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/MaskEffectManager.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/effectsMixin.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/findMixin.mjs", "../../../../../node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/bounds/utils/matrixAndBoundsPool.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/bounds/getGlobalBounds.mjs", "../../../../../node_modules/pixi.js/lib/utils/logging/warn.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/bounds/getLocalBounds.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/checkChildrenDidChange.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/measureMixin.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/onRenderMixin.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/sortMixin.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/container-mixins/toLocalGlobalMixin.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/instructions/InstructionSet.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/RenderGroup.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/assignWithIgnore.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/Container.mjs", "../../../../../node_modules/pixi.js/lib/ticker/const.mjs", "../../../../../node_modules/pixi.js/lib/ticker/TickerListener.mjs", "../../../../../node_modules/pixi.js/lib/ticker/Ticker.mjs", "../../../../../node_modules/pixi.js/lib/environment-browser/BrowserAdapter.mjs", "../../../../../node_modules/pixi.js/lib/environment/adapter.mjs", "../../../../../node_modules/pixi.js/lib/maths/matrix/groupD8.mjs", "../../../../../node_modules/pixi.js/lib/utils/misc/NOOP.mjs", "../../../../../node_modules/pixi.js/lib/maths/misc/pow2.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/definedProps.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureStyle.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/BufferImageSource.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureMatrix.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs", "../../../../../node_modules/pixi.js/lib/utils/data/updateQuadBounds.mjs", "../../../../../node_modules/pixi.js/lib/scene/view/View.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite/Sprite.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/BindGroup.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getTestContext.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/gl/utils/checkMaxIfStatementsInShader.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/gl/utils/maxRecommendedTextures.mjs", "../../../../../node_modules/pixi.js/lib/utils/data/ViewableBuffer.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/utils/fastCopy.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/shared/BatchTextureArray.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/shared/Batcher.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/const.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/Buffer.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/ensureIsBuffer.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getGeometryBounds.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/shared/BatchGeometry.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/insertVersion.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/setProgramName.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/stripVersion.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractStructAndGroups.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/const.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateLayoutHash.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/addBits.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileHooks.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileInputs.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileOutputs.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/injectBits.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compiler/compileHighShader.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/defaultProgramTemplate.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/globalUniformsBit.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/colorBit.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/generateTextureBatchBit.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/roundPixelsBit.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/types.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/getDefaultUniformValue.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/types.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/shared/DefaultShader.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/shared/DefaultBatcher.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs", "../../../../../node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n", "\"use strict\";\nvar ExtensionType = /* @__PURE__ */ ((ExtensionType2) => {\n  ExtensionType2[\"Application\"] = \"application\";\n  ExtensionType2[\"WebGLPipes\"] = \"webgl-pipes\";\n  ExtensionType2[\"WebGLPipesAdaptor\"] = \"webgl-pipes-adaptor\";\n  ExtensionType2[\"WebGLSystem\"] = \"webgl-system\";\n  ExtensionType2[\"WebGPUPipes\"] = \"webgpu-pipes\";\n  ExtensionType2[\"WebGPUPipesAdaptor\"] = \"webgpu-pipes-adaptor\";\n  ExtensionType2[\"WebGPUSystem\"] = \"webgpu-system\";\n  ExtensionType2[\"CanvasSystem\"] = \"canvas-system\";\n  ExtensionType2[\"CanvasPipesAdaptor\"] = \"canvas-pipes-adaptor\";\n  ExtensionType2[\"CanvasPipes\"] = \"canvas-pipes\";\n  ExtensionType2[\"Asset\"] = \"asset\";\n  ExtensionType2[\"LoadParser\"] = \"load-parser\";\n  ExtensionType2[\"ResolveParser\"] = \"resolve-parser\";\n  ExtensionType2[\"CacheParser\"] = \"cache-parser\";\n  ExtensionType2[\"DetectionParser\"] = \"detection-parser\";\n  ExtensionType2[\"MaskEffect\"] = \"mask-effect\";\n  ExtensionType2[\"BlendMode\"] = \"blend-mode\";\n  ExtensionType2[\"TextureSource\"] = \"texture-source\";\n  ExtensionType2[\"Environment\"] = \"environment\";\n  ExtensionType2[\"ShapeBuilder\"] = \"shape-builder\";\n  ExtensionType2[\"Batcher\"] = \"batcher\";\n  return ExtensionType2;\n})(ExtensionType || {});\nconst normalizeExtension = (ext) => {\n  if (typeof ext === \"function\" || typeof ext === \"object\" && ext.extension) {\n    if (!ext.extension) {\n      throw new Error(\"Extension class must have an extension object\");\n    }\n    const metadata = typeof ext.extension !== \"object\" ? { type: ext.extension } : ext.extension;\n    ext = { ...metadata, ref: ext };\n  }\n  if (typeof ext === \"object\") {\n    ext = { ...ext };\n  } else {\n    throw new Error(\"Invalid extension type\");\n  }\n  if (typeof ext.type === \"string\") {\n    ext.type = [ext.type];\n  }\n  return ext;\n};\nconst normalizeExtensionPriority = (ext, defaultPriority) => normalizeExtension(ext).priority ?? defaultPriority;\nconst extensions = {\n  /** @ignore */\n  _addHandlers: {},\n  /** @ignore */\n  _removeHandlers: {},\n  /** @ignore */\n  _queue: {},\n  /**\n   * Remove extensions from PixiJS.\n   * @param extensions - Extensions to be removed.\n   * @returns {extensions} For chaining.\n   */\n  remove(...extensions2) {\n    extensions2.map(normalizeExtension).forEach((ext) => {\n      ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n    });\n    return this;\n  },\n  /**\n   * Register new extensions with PixiJS.\n   * @param extensions - The spread of extensions to add to PixiJS.\n   * @returns {extensions} For chaining.\n   */\n  add(...extensions2) {\n    extensions2.map(normalizeExtension).forEach((ext) => {\n      ext.type.forEach((type) => {\n        const handlers = this._addHandlers;\n        const queue = this._queue;\n        if (!handlers[type]) {\n          queue[type] = queue[type] || [];\n          queue[type]?.push(ext);\n        } else {\n          handlers[type]?.(ext);\n        }\n      });\n    });\n    return this;\n  },\n  /**\n   * Internal method to handle extensions by name.\n   * @param type - The extension type.\n   * @param onAdd  - Function handler when extensions are added/registered {@link StrictExtensionFormat}.\n   * @param onRemove  - Function handler when extensions are removed/unregistered {@link StrictExtensionFormat}.\n   * @returns {extensions} For chaining.\n   */\n  handle(type, onAdd, onRemove) {\n    const addHandlers = this._addHandlers;\n    const removeHandlers = this._removeHandlers;\n    if (addHandlers[type] || removeHandlers[type]) {\n      throw new Error(`Extension type ${type} already has a handler`);\n    }\n    addHandlers[type] = onAdd;\n    removeHandlers[type] = onRemove;\n    const queue = this._queue;\n    if (queue[type]) {\n      queue[type]?.forEach((ext) => onAdd(ext));\n      delete queue[type];\n    }\n    return this;\n  },\n  /**\n   * Handle a type, but using a map by `name` property.\n   * @param type - Type of extension to handle.\n   * @param map - The object map of named extensions.\n   * @returns {extensions} For chaining.\n   */\n  handleByMap(type, map) {\n    return this.handle(\n      type,\n      (extension) => {\n        if (extension.name) {\n          map[extension.name] = extension.ref;\n        }\n      },\n      (extension) => {\n        if (extension.name) {\n          delete map[extension.name];\n        }\n      }\n    );\n  },\n  /**\n   * Handle a type, but using a list of extensions with a `name` property.\n   * @param type - Type of extension to handle.\n   * @param map - The array of named extensions.\n   * @param defaultPriority - Fallback priority if none is defined.\n   * @returns {extensions} For chaining.\n   */\n  handleByNamedList(type, map, defaultPriority = -1) {\n    return this.handle(\n      type,\n      (extension) => {\n        const index = map.findIndex((item) => item.name === extension.name);\n        if (index >= 0)\n          return;\n        map.push({ name: extension.name, value: extension.ref });\n        map.sort((a, b) => normalizeExtensionPriority(b.value, defaultPriority) - normalizeExtensionPriority(a.value, defaultPriority));\n      },\n      (extension) => {\n        const index = map.findIndex((item) => item.name === extension.name);\n        if (index !== -1) {\n          map.splice(index, 1);\n        }\n      }\n    );\n  },\n  /**\n   * Handle a type, but using a list of extensions.\n   * @param type - Type of extension to handle.\n   * @param list - The list of extensions.\n   * @param defaultPriority - The default priority to use if none is specified.\n   * @returns {extensions} For chaining.\n   */\n  handleByList(type, list, defaultPriority = -1) {\n    return this.handle(\n      type,\n      (extension) => {\n        if (list.includes(extension.ref)) {\n          return;\n        }\n        list.push(extension.ref);\n        list.sort((a, b) => normalizeExtensionPriority(b, defaultPriority) - normalizeExtensionPriority(a, defaultPriority));\n      },\n      (extension) => {\n        const index = list.indexOf(extension.ref);\n        if (index !== -1) {\n          list.splice(index, 1);\n        }\n      }\n    );\n  }\n};\n\nexport { ExtensionType, extensions, normalizeExtensionPriority };\n\n", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n", "export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n", "import { extend, colord } from '@pixi/colord';\nimport namesPlugin from '@pixi/colord/plugins/names';\n\n\"use strict\";\nextend([namesPlugin]);\nconst _Color = class _Color {\n  /**\n   * @param {ColorSource} value - Optional value to use, if not provided, white is used.\n   */\n  constructor(value = 16777215) {\n    this._value = null;\n    this._components = new Float32Array(4);\n    this._components.fill(1);\n    this._int = 16777215;\n    this.value = value;\n  }\n  /** Get red component (0 - 1) */\n  get red() {\n    return this._components[0];\n  }\n  /** Get green component (0 - 1) */\n  get green() {\n    return this._components[1];\n  }\n  /** Get blue component (0 - 1) */\n  get blue() {\n    return this._components[2];\n  }\n  /** Get alpha component (0 - 1) */\n  get alpha() {\n    return this._components[3];\n  }\n  /**\n   * Set the value, suitable for chaining\n   * @param value\n   * @see Color.value\n   */\n  setValue(value) {\n    this.value = value;\n    return this;\n  }\n  /**\n   * The current color source.\n   *\n   * When setting:\n   * - Setting to an instance of `Color` will copy its color source and components.\n   * - Otherwise, `Color` will try to normalize the color source and set the components.\n   *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n   *\n   * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n   * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n   *\n   * When getting:\n   * - A return value of `null` means the previous value was overridden (e.g., {@link Color.multiply multiply},\n   *   {@link Color.premultiply premultiply} or {@link Color.round round}).\n   * - Otherwise, the color source used when setting is returned.\n   */\n  set value(value) {\n    if (value instanceof _Color) {\n      this._value = this._cloneSource(value._value);\n      this._int = value._int;\n      this._components.set(value._components);\n    } else if (value === null) {\n      throw new Error(\"Cannot set Color#value to null\");\n    } else if (this._value === null || !this._isSourceEqual(this._value, value)) {\n      this._value = this._cloneSource(value);\n      this._normalize(this._value);\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  /**\n   * Copy a color source internally.\n   * @param value - Color source\n   */\n  _cloneSource(value) {\n    if (typeof value === \"string\" || typeof value === \"number\" || value instanceof Number || value === null) {\n      return value;\n    } else if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      return value.slice(0);\n    } else if (typeof value === \"object\" && value !== null) {\n      return { ...value };\n    }\n    return value;\n  }\n  /**\n   * Equality check for color sources.\n   * @param value1 - First color source\n   * @param value2 - Second color source\n   * @returns `true` if the color sources are equal, `false` otherwise.\n   */\n  _isSourceEqual(value1, value2) {\n    const type1 = typeof value1;\n    const type2 = typeof value2;\n    if (type1 !== type2) {\n      return false;\n    } else if (type1 === \"number\" || type1 === \"string\" || value1 instanceof Number) {\n      return value1 === value2;\n    } else if (Array.isArray(value1) && Array.isArray(value2) || ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2)) {\n      if (value1.length !== value2.length) {\n        return false;\n      }\n      return value1.every((v, i) => v === value2[i]);\n    } else if (value1 !== null && value2 !== null) {\n      const keys1 = Object.keys(value1);\n      const keys2 = Object.keys(value2);\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      return keys1.every((key) => value1[key] === value2[key]);\n    }\n    return value1 === value2;\n  }\n  /**\n   * Convert to a RGBA color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n   */\n  toRgba() {\n    const [r, g, b, a] = this._components;\n    return { r, g, b, a };\n  }\n  /**\n   * Convert to a RGB color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n   */\n  toRgb() {\n    const [r, g, b] = this._components;\n    return { r, g, b };\n  }\n  /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n  toRgbaString() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return `rgba(${r},${g},${b},${this.alpha})`;\n  }\n  toUint8RgbArray(out) {\n    const [r, g, b] = this._components;\n    if (!this._arrayRgb) {\n      this._arrayRgb = [];\n    }\n    out = out || this._arrayRgb;\n    out[0] = Math.round(r * 255);\n    out[1] = Math.round(g * 255);\n    out[2] = Math.round(b * 255);\n    return out;\n  }\n  toArray(out) {\n    if (!this._arrayRgba) {\n      this._arrayRgba = [];\n    }\n    out = out || this._arrayRgba;\n    const [r, g, b, a] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    out[3] = a;\n    return out;\n  }\n  toRgbArray(out) {\n    if (!this._arrayRgb) {\n      this._arrayRgb = [];\n    }\n    out = out || this._arrayRgb;\n    const [r, g, b] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    return out;\n  }\n  /**\n   * Convert to a hexadecimal number.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toNumber(); // returns 16777215\n   */\n  toNumber() {\n    return this._int;\n  }\n  /**\n   * Convert to a BGR number\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toBgrNumber(); // returns 0x99ccff\n   */\n  toBgrNumber() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return (b << 16) + (g << 8) + r;\n  }\n  /**\n   * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n   * @returns {number} - The color as a number in little endian format.\n   */\n  toLittleEndianNumber() {\n    const value = this._int;\n    return (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  /**\n   * Multiply with another color. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param {ColorSource} value - The color to multiply by.\n   */\n  multiply(value) {\n    const [r, g, b, a] = _Color._temp.setValue(value)._components;\n    this._components[0] *= r;\n    this._components[1] *= g;\n    this._components[2] *= b;\n    this._components[3] *= a;\n    this._refreshInt();\n    this._value = null;\n    return this;\n  }\n  /**\n   * Converts color to a premultiplied alpha format. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {Color} - Itself.\n   */\n  premultiply(alpha, applyToRGB = true) {\n    if (applyToRGB) {\n      this._components[0] *= alpha;\n      this._components[1] *= alpha;\n      this._components[2] *= alpha;\n    }\n    this._components[3] = alpha;\n    this._refreshInt();\n    this._value = null;\n    return this;\n  }\n  /**\n   * Premultiplies alpha with current color.\n   * @param {number} alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {number} tint multiplied by alpha\n   */\n  toPremultiplied(alpha, applyToRGB = true) {\n    if (alpha === 1) {\n      return (255 << 24) + this._int;\n    }\n    if (alpha === 0) {\n      return applyToRGB ? 0 : this._int;\n    }\n    let r = this._int >> 16 & 255;\n    let g = this._int >> 8 & 255;\n    let b = this._int & 255;\n    if (applyToRGB) {\n      r = r * alpha + 0.5 | 0;\n      g = g * alpha + 0.5 | 0;\n      b = b * alpha + 0.5 | 0;\n    }\n    return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n  }\n  /**\n   * Convert to a hexadecimal string.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHex(); // returns \"#ffffff\"\n   */\n  toHex() {\n    const hexString = this._int.toString(16);\n    return `#${\"000000\".substring(0, 6 - hexString.length) + hexString}`;\n  }\n  /**\n   * Convert to a hexadecimal string with alpha.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHexa(); // returns \"#ffffffff\"\n   */\n  toHexa() {\n    const alphaValue = Math.round(this._components[3] * 255);\n    const alphaString = alphaValue.toString(16);\n    return this.toHex() + \"00\".substring(0, 2 - alphaString.length) + alphaString;\n  }\n  /**\n   * Set alpha, suitable for chaining.\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    this._components[3] = this._clamp(alpha);\n    return this;\n  }\n  /**\n   * Normalize the input value into rgba\n   * @param value - Input value\n   */\n  _normalize(value) {\n    let r;\n    let g;\n    let b;\n    let a;\n    if ((typeof value === \"number\" || value instanceof Number) && value >= 0 && value <= 16777215) {\n      const int = value;\n      r = (int >> 16 & 255) / 255;\n      g = (int >> 8 & 255) / 255;\n      b = (int & 255) / 255;\n      a = 1;\n    } else if ((Array.isArray(value) || value instanceof Float32Array) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value);\n      [r, g, b, a = 1] = value;\n    } else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value, 0, 255);\n      [r, g, b, a = 255] = value;\n      r /= 255;\n      g /= 255;\n      b /= 255;\n      a /= 255;\n    } else if (typeof value === \"string\" || typeof value === \"object\") {\n      if (typeof value === \"string\") {\n        const match = _Color.HEX_PATTERN.exec(value);\n        if (match) {\n          value = `#${match[2]}`;\n        }\n      }\n      const color = colord(value);\n      if (color.isValid()) {\n        ({ r, g, b, a } = color.rgba);\n        r /= 255;\n        g /= 255;\n        b /= 255;\n      }\n    }\n    if (r !== void 0) {\n      this._components[0] = r;\n      this._components[1] = g;\n      this._components[2] = b;\n      this._components[3] = a;\n      this._refreshInt();\n    } else {\n      throw new Error(`Unable to convert color ${value}`);\n    }\n  }\n  /** Refresh the internal color rgb number */\n  _refreshInt() {\n    this._clamp(this._components);\n    const [r, g, b] = this._components;\n    this._int = (r * 255 << 16) + (g * 255 << 8) + (b * 255 | 0);\n  }\n  /**\n   * Clamps values to a range. Will override original values\n   * @param value - Value(s) to clamp\n   * @param min - Minimum value\n   * @param max - Maximum value\n   */\n  _clamp(value, min = 0, max = 1) {\n    if (typeof value === \"number\") {\n      return Math.min(Math.max(value, min), max);\n    }\n    value.forEach((v, i) => {\n      value[i] = Math.min(Math.max(v, min), max);\n    });\n    return value;\n  }\n  /**\n   * Check if the value is a color-like object\n   * @param value - Value to check\n   * @returns True if the value is a color-like object\n   * @static\n   * @example\n   * import { Color } from 'pixi.js';\n   * Color.isColorLike('white'); // returns true\n   * Color.isColorLike(0xffffff); // returns true\n   * Color.isColorLike([1, 1, 1]); // returns true\n   */\n  static isColorLike(value) {\n    return typeof value === \"number\" || typeof value === \"string\" || value instanceof Number || value instanceof _Color || Array.isArray(value) || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Float32Array || value.r !== void 0 && value.g !== void 0 && value.b !== void 0 || value.r !== void 0 && value.g !== void 0 && value.b !== void 0 && value.a !== void 0 || value.h !== void 0 && value.s !== void 0 && value.l !== void 0 || value.h !== void 0 && value.s !== void 0 && value.l !== void 0 && value.a !== void 0 || value.h !== void 0 && value.s !== void 0 && value.v !== void 0 || value.h !== void 0 && value.s !== void 0 && value.v !== void 0 && value.a !== void 0;\n  }\n};\n/**\n * Default Color object for static uses\n * @example\n * import { Color } from 'pixi.js';\n * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n */\n_Color.shared = new _Color();\n/**\n * Temporary Color object for static uses internally.\n * As to not conflict with Color.shared.\n * @ignore\n */\n_Color._temp = new _Color();\n/** Pattern for hex strings */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n_Color.HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\nlet Color = _Color;\n\nexport { Color };\n\n", "\"use strict\";\nconst cullingMixin = {\n  cullArea: null,\n  cullable: false,\n  cullableChildren: true\n};\n\nexport { cullingMixin };\n\n", "\"use strict\";\nconst PI_2 = Math.PI * 2;\nconst RAD_TO_DEG = 180 / Math.PI;\nconst DEG_TO_RAD = Math.PI / 180;\n\nexport { DEG_TO_RAD, PI_2, RAD_TO_DEG };\n\n", "\"use strict\";\nclass Point {\n  /**\n   * Creates a new `Point`\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(x = 0, y = 0) {\n    /** Position of the point on the x axis */\n    this.x = 0;\n    /** Position of the point on the y axis */\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Creates a clone of this point\n   * @returns A clone of this point\n   */\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  /**\n   * Copies `x` and `y` from the given point into this point\n   * @param p - The point to copy from\n   * @returns The point instance itself\n   */\n  copyFrom(p) {\n    this.set(p.x, p.y);\n    return this;\n  }\n  /**\n   * Copies this point's x and y into the given point (`p`).\n   * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    p.set(this.x, this.y);\n    return p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this.x && p.y === this.y;\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the `x` axis\n   * @param {number} [y=x] - position of the point on the `y` axis\n   * @returns The point instance itself\n   */\n  set(x = 0, y = x) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  toString() {\n    return `[pixi.js/math:Point x=${this.x} y=${this.y}]`;\n  }\n  /**\n   * A static Point object with `x` and `y` values of `0`. Can be used to avoid creating new objects multiple times.\n   * @readonly\n   */\n  static get shared() {\n    tempPoint.x = 0;\n    tempPoint.y = 0;\n    return tempPoint;\n  }\n}\nconst tempPoint = new Point();\n\nexport { Point };\n\n", "import { PI_2 } from '../misc/const.mjs';\nimport { Point } from '../point/Point.mjs';\n\n\"use strict\";\nclass Matrix {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    /** An array of the current matrix. Only populated when `toArray` is called */\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    const array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  }\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  }\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const tx = this.tx;\n    const ty = this.ty;\n    const id = 1 / (a * d + c * -b);\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    newPos.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return newPos;\n  }\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  }\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  }\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  }\n  /**\n   * Appends two matrix's and sets the result to this matrix. AB = A * B\n   * @param a - The matrix to append.\n   * @param b - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  appendFrom(a, b) {\n    const a1 = a.a;\n    const b1 = a.b;\n    const c1 = a.c;\n    const d1 = a.d;\n    const tx = a.tx;\n    const ty = a.ty;\n    const a2 = b.a;\n    const b2 = b.b;\n    const c2 = b.c;\n    const d2 = b.d;\n    this.a = a1 * a2 + b1 * c2;\n    this.b = a1 * b2 + b1 * d2;\n    this.c = c1 * a2 + d1 * c2;\n    this.d = c1 * b2 + d1 * d2;\n    this.tx = tx * a2 + ty * c2 + b.tx;\n    this.ty = tx * b2 + ty * d2 + b.ty;\n    return this;\n  }\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  }\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  }\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  decompose(transform) {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const pivot = transform.pivot;\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n    const delta = Math.abs(skewX + skewY);\n    if (delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  }\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  }\n  /** Checks if this matrix is an identity matrix */\n  isIdentity() {\n    return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.tx === 0 && this.ty === 0;\n  }\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  }\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  copyTo(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param matrix - The matrix to copy from.\n   * @returns this\n   */\n  copyFrom(matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  }\n  /**\n   * check to see if two matrices are the same\n   * @param matrix - The matrix to compare to.\n   */\n  equals(matrix) {\n    return matrix.a === this.a && matrix.b === this.b && matrix.c === this.c && matrix.d === this.d && matrix.tx === this.tx && matrix.ty === this.ty;\n  }\n  toString() {\n    return `[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n  }\n  /**\n   * A default (identity) matrix.\n   *\n   * This is a shared object, if you want to modify it consider creating a new `Matrix`\n   * @readonly\n   */\n  static get IDENTITY() {\n    return identityMatrix.identity();\n  }\n  /**\n   * A static Matrix that can be used to avoid creating new objects.\n   * Will always ensure the matrix is reset to identity when requested.\n   * Use this object for fast but temporary calculations, as it may be mutated later on.\n   * This is a different object to the `IDENTITY` object and so can be modified without changing `IDENTITY`.\n   * @readonly\n   */\n  static get shared() {\n    return tempMatrix.identity();\n  }\n}\nconst tempMatrix = new Matrix();\nconst identityMatrix = new Matrix();\n\nexport { Matrix };\n\n", "\"use strict\";\nclass ObservablePoint {\n  /**\n   * Creates a new `ObservablePoint`\n   * @param observer - Observer to pass to listen for change events.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(observer, x, y) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._observer = observer;\n  }\n  /**\n   * Creates a clone of this point.\n   * @param observer - Optional observer to pass to the new observable point.\n   * @returns a copy of this observable point\n   */\n  clone(observer) {\n    return new ObservablePoint(observer ?? this._observer, this._x, this._y);\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n  set(x = 0, y = x) {\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this._observer._onUpdate(this);\n    }\n    return this;\n  }\n  /**\n   * Copies x and y from the given point (`p`)\n   * @param p - The point to copy from. Can be any of type that is or extends `PointData`\n   * @returns The observable point instance itself\n   */\n  copyFrom(p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this._observer._onUpdate(this);\n    }\n    return this;\n  }\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    p.set(this._x, this._y);\n    return p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this._x && p.y === this._y;\n  }\n  toString() {\n    return `[pixi.js/math:ObservablePoint x=${0} y=${0} scope=${this._observer}]`;\n  }\n  /** Position of the observable point on the x axis. */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    if (this._x !== value) {\n      this._x = value;\n      this._observer._onUpdate(this);\n    }\n  }\n  /** Position of the observable point on the y axis. */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    if (this._y !== value) {\n      this._y = value;\n      this._observer._onUpdate(this);\n    }\n  }\n}\n\nexport { ObservablePoint };\n\n", "\"use strict\";\nconst uidCache = {\n  default: -1\n};\nfunction uid(name = \"default\") {\n  if (uidCache[name] === void 0) {\n    uidCache[name] = -1;\n  }\n  return ++uidCache[name];\n}\nfunction resetUids() {\n  for (const key in uidCache) {\n    delete uidCache[key];\n  }\n}\n\nexport { resetUids, uid };\n\n", "\"use strict\";\nconst warnings = {};\nconst v8_0_0 = \"8.0.0\";\nconst v8_3_4 = \"8.3.4\";\nfunction deprecation(version, message, ignoreDepth = 3) {\n  if (warnings[message]) {\n    return;\n  }\n  let stack = new Error().stack;\n  if (typeof stack === \"undefined\") {\n    console.warn(\"PixiJS Deprecation Warning: \", `${message}\nDeprecated since v${version}`);\n  } else {\n    stack = stack.split(\"\\n\").splice(ignoreDepth).join(\"\\n\");\n    if (console.groupCollapsed) {\n      console.groupCollapsed(\n        \"%cPixiJS Deprecation Warning: %c%s\",\n        \"color:#614108;background:#fffbe6\",\n        \"font-weight:normal;color:#614108;background:#fffbe6\",\n        `${message}\nDeprecated since v${version}`\n      );\n      console.warn(stack);\n      console.groupEnd();\n    } else {\n      console.warn(\"PixiJS Deprecation Warning: \", `${message}\nDeprecated since v${version}`);\n      console.warn(stack);\n    }\n  }\n  warnings[message] = true;\n}\n\nexport { deprecation, v8_0_0, v8_3_4 };\n\n", "\"use strict\";\nclass Pool {\n  /**\n   * Constructs a new Pool.\n   * @param ClassType - The constructor of the items in the pool.\n   * @param {number} [initialSize] - The initial size of the pool.\n   */\n  constructor(ClassType, initialSize) {\n    this._pool = [];\n    this._count = 0;\n    this._index = 0;\n    this._classType = ClassType;\n    if (initialSize) {\n      this.prepopulate(initialSize);\n    }\n  }\n  /**\n   * Prepopulates the pool with a given number of items.\n   * @param total - The number of items to add to the pool.\n   */\n  prepopulate(total) {\n    for (let i = 0; i < total; i++) {\n      this._pool[this._index++] = new this._classType();\n    }\n    this._count += total;\n  }\n  /**\n   * Gets an item from the pool. Calls the item's `init` method if it exists.\n   * If there are no items left in the pool, a new one will be created.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(data) {\n    let item;\n    if (this._index > 0) {\n      item = this._pool[--this._index];\n    } else {\n      item = new this._classType();\n    }\n    item.init?.(data);\n    return item;\n  }\n  /**\n   * Returns an item to the pool. Calls the item's `reset` method if it exists.\n   * @param {T} item - The item to return to the pool.\n   */\n  return(item) {\n    item.reset?.();\n    this._pool[this._index++] = item;\n  }\n  /**\n   * Gets the number of items in the pool.\n   * @readonly\n   * @member {number}\n   */\n  get totalSize() {\n    return this._count;\n  }\n  /**\n   * Gets the number of items in the pool that are free to use without needing to create more.\n   * @readonly\n   * @member {number}\n   */\n  get totalFree() {\n    return this._index;\n  }\n  /**\n   * Gets the number of items in the pool that are currently in use.\n   * @readonly\n   * @member {number}\n   */\n  get totalUsed() {\n    return this._count - this._index;\n  }\n  /** clears the pool - mainly used for debugging! */\n  clear() {\n    this._pool.length = 0;\n    this._index = 0;\n  }\n}\n\nexport { Pool };\n\n", "import { Pool } from './Pool.mjs';\n\n\"use strict\";\nclass PoolGroupClass {\n  constructor() {\n    /**\n     * A map to store the pools by their class type.\n     * @private\n     */\n    this._poolsByClass = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Prepopulates a specific pool with a given number of items.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n   * @param {number} total - The number of items to add to the pool.\n   */\n  prepopulate(Class, total) {\n    const classPool = this.getPool(Class);\n    classPool.prepopulate(total);\n  }\n  /**\n   * Gets an item from a specific pool.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(Class, data) {\n    const pool = this.getPool(Class);\n    return pool.get(data);\n  }\n  /**\n   * Returns an item to its respective pool.\n   * @param {PoolItem} item - The item to return to the pool.\n   */\n  return(item) {\n    const pool = this.getPool(item.constructor);\n    pool.return(item);\n  }\n  /**\n   * Gets a specific pool based on the class type.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} ClassType - The constructor of the items in the pool.\n   * @returns {Pool<T>} The pool of the given class type.\n   */\n  getPool(ClassType) {\n    if (!this._poolsByClass.has(ClassType)) {\n      this._poolsByClass.set(ClassType, new Pool(ClassType));\n    }\n    return this._poolsByClass.get(ClassType);\n  }\n  /** gets the usage stats of each pool in the system */\n  stats() {\n    const stats = {};\n    this._poolsByClass.forEach((pool) => {\n      const name = stats[pool._classType.name] ? pool._classType.name + pool._classType.ID : pool._classType.name;\n      stats[name] = {\n        free: pool.totalFree,\n        used: pool.totalUsed,\n        size: pool.totalSize\n      };\n    });\n    return stats;\n  }\n}\nconst BigPool = new PoolGroupClass();\n\nexport { BigPool, PoolGroupClass };\n\n", "\"use strict\";\nfunction removeItems(arr, startIdx, removeCount) {\n  const length = arr.length;\n  let i;\n  if (startIdx >= length || removeCount === 0) {\n    return;\n  }\n  removeCount = startIdx + removeCount > length ? length - startIdx : removeCount;\n  const len = length - removeCount;\n  for (i = startIdx; i < len; ++i) {\n    arr[i] = arr[i + removeCount];\n  }\n  arr.length = len;\n}\n\nexport { removeItems };\n\n", "import { removeItems } from '../../../utils/data/removeItems.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst childrenHelperMixin = {\n  allowChildren: true,\n  /**\n   * Removes all children from this container that are within the begin and end indexes.\n   * @param beginIndex - The beginning position.\n   * @param endIndex - The ending position. Default value is size of the container.\n   * @returns - List of removed children\n   * @memberof scene.Container#\n   */\n  removeChildren(beginIndex = 0, endIndex) {\n    const end = endIndex ?? this.children.length;\n    const range = end - beginIndex;\n    const removed = [];\n    if (range > 0 && range <= end) {\n      for (let i = end - 1; i >= beginIndex; i--) {\n        const child = this.children[i];\n        if (!child)\n          continue;\n        removed.push(child);\n        child.parent = null;\n      }\n      removeItems(this.children, beginIndex, end);\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      if (renderGroup) {\n        renderGroup.removeChildren(removed);\n      }\n      for (let i = 0; i < removed.length; ++i) {\n        this.emit(\"childRemoved\", removed[i], this, i);\n        removed[i].emit(\"removed\", this);\n      }\n      return removed;\n    } else if (range === 0 && this.children.length === 0) {\n      return removed;\n    }\n    throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n  },\n  /**\n   * Removes a child from the specified index position.\n   * @param index - The index to get the child from\n   * @returns The child that was removed.\n   * @memberof scene.Container#\n   */\n  removeChildAt(index) {\n    const child = this.getChildAt(index);\n    return this.removeChild(child);\n  },\n  /**\n   * Returns the child at the specified index\n   * @param index - The index to get the child at\n   * @returns - The child at the given index, if any.\n   * @memberof scene.Container#\n   */\n  getChildAt(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`getChildAt: Index (${index}) does not exist.`);\n    }\n    return this.children[index];\n  },\n  /**\n   * Changes the position of an existing child in the container container\n   * @param child - The child Container instance for which you want to change the index number\n   * @param index - The resulting index number for the child container\n   * @memberof scene.Container#\n   */\n  setChildIndex(child, index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n    }\n    this.getChildIndex(child);\n    this.addChildAt(child, index);\n  },\n  /**\n   * Returns the index position of a child Container instance\n   * @param child - The Container instance to identify\n   * @returns - The index position of the child container to identify\n   * @memberof scene.Container#\n   */\n  getChildIndex(child) {\n    const index = this.children.indexOf(child);\n    if (index === -1) {\n      throw new Error(\"The supplied Container must be a child of the caller\");\n    }\n    return index;\n  },\n  /**\n   * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n   * If the child is already in this container, it will be moved to the specified index.\n   * @param {Container} child - The child to add.\n   * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n   * @returns {Container} The child that was added.\n   * @memberof scene.Container#\n   */\n  addChildAt(child, index) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChildAt: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    const { children } = this;\n    if (index < 0 || index > children.length) {\n      throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n    }\n    if (child.parent) {\n      const currentIndex = child.parent.children.indexOf(child);\n      if (child.parent === this && currentIndex === index) {\n        return child;\n      }\n      if (currentIndex !== -1) {\n        child.parent.children.splice(currentIndex, 1);\n      }\n    }\n    if (index === children.length) {\n      children.push(child);\n    } else {\n      children.splice(index, 0, child);\n    }\n    child.parent = this;\n    child.didChange = true;\n    child.didViewUpdate = false;\n    child._updateFlags = 15;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    this.emit(\"childAdded\", child, this, index);\n    child.emit(\"added\", this);\n    return child;\n  },\n  /**\n   * Swaps the position of 2 Containers within this container.\n   * @param child - First container to swap\n   * @param child2 - Second container to swap\n   */\n  swapChildren(child, child2) {\n    if (child === child2) {\n      return;\n    }\n    const index1 = this.getChildIndex(child);\n    const index2 = this.getChildIndex(child2);\n    this.children[index1] = child2;\n    this.children[index2] = child;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    this._didContainerChangeTick++;\n  },\n  /**\n   * Remove the Container from its parent Container. If the Container has no parent, do nothing.\n   * @memberof scene.Container#\n   */\n  removeFromParent() {\n    this.parent?.removeChild(this);\n  },\n  /**\n   * Reparent the child to this container, keeping the same worldTransform.\n   * @param child - The child to reparent\n   * @returns The first child that was reparented.\n   * @memberof scene.Container#\n   */\n  reparentChild(...child) {\n    if (child.length === 1) {\n      return this.reparentChildAt(child[0], this.children.length);\n    }\n    child.forEach((c) => this.reparentChildAt(c, this.children.length));\n    return child[0];\n  },\n  /**\n   * Reparent the child to this container at the specified index, keeping the same worldTransform.\n   * @param child - The child to reparent\n   * @param index - The index to reparent the child to\n   * @memberof scene.Container#\n   */\n  reparentChildAt(child, index) {\n    if (child.parent === this) {\n      this.setChildIndex(child, index);\n      return child;\n    }\n    const childMat = child.worldTransform.clone();\n    child.removeFromParent();\n    this.addChildAt(child, index);\n    const newMatrix = this.worldTransform.clone();\n    newMatrix.invert();\n    childMat.prepend(newMatrix);\n    child.setFromMatrix(childMat);\n    return child;\n  }\n};\n\nexport { childrenHelperMixin };\n\n", "\"use strict\";\nclass FilterEffect {\n  constructor() {\n    /** the pipe that knows how to handle this effect */\n    this.pipe = \"filter\";\n    /** the priority of this effect */\n    this.priority = 1;\n  }\n  destroy() {\n    for (let i = 0; i < this.filters.length; i++) {\n      this.filters[i].destroy();\n    }\n    this.filters = null;\n    this.filterArea = null;\n  }\n}\n\nexport { FilterEffect };\n\n", "import { extensions, ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\n\n\"use strict\";\nclass MaskEffectManagerClass {\n  constructor() {\n    /**\n     * @private\n     */\n    this._effectClasses = [];\n    this._tests = [];\n    this._initialized = false;\n  }\n  init() {\n    if (this._initialized)\n      return;\n    this._initialized = true;\n    this._effectClasses.forEach((test) => {\n      this.add({\n        test: test.test,\n        maskClass: test\n      });\n    });\n  }\n  add(test) {\n    this._tests.push(test);\n  }\n  getMaskEffect(item) {\n    if (!this._initialized)\n      this.init();\n    for (let i = 0; i < this._tests.length; i++) {\n      const test = this._tests[i];\n      if (test.test(item)) {\n        return BigPool.get(test.maskClass, item);\n      }\n    }\n    return item;\n  }\n  returnMaskEffect(effect) {\n    BigPool.return(effect);\n  }\n}\nconst MaskEffectManager = new MaskEffectManagerClass();\nextensions.handleByList(ExtensionType.MaskEffect, MaskEffectManager._effectClasses);\n\nexport { MaskEffectManager, MaskEffectManagerClass };\n\n", "import { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskEffectManager } from '../../../rendering/mask/MaskEffectManager.mjs';\n\n\"use strict\";\nconst effectsMixin = {\n  _maskEffect: null,\n  _filterEffect: null,\n  /**\n   * @todo Needs docs.\n   * @memberof scene.Container#\n   * @type {Array<Effect>}\n   */\n  effects: [],\n  /**\n   * @todo Needs docs.\n   * @param effect - The effect to add.\n   * @memberof scene.Container#\n   * @ignore\n   */\n  addEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index !== -1)\n      return;\n    this.effects.push(effect);\n    this.effects.sort((a, b) => a.priority - b.priority);\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    this._updateIsSimple();\n  },\n  /**\n   * @todo Needs docs.\n   * @param effect - The effect to remove.\n   * @memberof scene.Container#\n   * @ignore\n   */\n  removeEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index === -1)\n      return;\n    this.effects.splice(index, 1);\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateIsSimple();\n  },\n  set mask(value) {\n    const effect = this._maskEffect;\n    if (effect?.mask === value)\n      return;\n    if (effect) {\n      this.removeEffect(effect);\n      MaskEffectManager.returnMaskEffect(effect);\n      this._maskEffect = null;\n    }\n    if (value === null || value === void 0)\n      return;\n    this._maskEffect = MaskEffectManager.getMaskEffect(value);\n    this.addEffect(this._maskEffect);\n  },\n  /**\n   * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n   * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n   * {@link Graphics} or a {@link Sprite} object. This allows for much faster masking in canvas as it\n   * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n   * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n   * To remove a mask, set this property to `null`.\n   *\n   * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n   * @example\n   * import { Graphics, Sprite } from 'pixi.js';\n   *\n   * const graphics = new Graphics();\n   * graphics.beginFill(0xFF3300);\n   * graphics.drawRect(50, 250, 100, 100);\n   * graphics.endFill();\n   *\n   * const sprite = new Sprite(texture);\n   * sprite.mask = graphics;\n   * @memberof scene.Container#\n   */\n  get mask() {\n    return this._maskEffect?.mask;\n  },\n  set filters(value) {\n    if (!Array.isArray(value) && value)\n      value = [value];\n    const effect = this._filterEffect || (this._filterEffect = new FilterEffect());\n    value = value;\n    const hasFilters = value?.length > 0;\n    const hadFilters = effect.filters?.length > 0;\n    const didChange = hasFilters !== hadFilters;\n    value = Array.isArray(value) ? value.slice(0) : value;\n    effect.filters = Object.freeze(value);\n    if (didChange) {\n      if (hasFilters) {\n        this.addEffect(effect);\n      } else {\n        this.removeEffect(effect);\n        effect.filters = value ?? null;\n      }\n    }\n  },\n  /**\n   * Sets the filters for the displayObject.\n   * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n   * To remove filters simply set this property to `'null'`.\n   * @memberof scene.Container#\n   */\n  get filters() {\n    return this._filterEffect?.filters;\n  },\n  set filterArea(value) {\n    this._filterEffect || (this._filterEffect = new FilterEffect());\n    this._filterEffect.filterArea = value;\n  },\n  /**\n   * The area the filter is applied to. This is used as more of an optimization\n   * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n   *\n   * Also works as an interaction mask.\n   * @memberof scene.Container#\n   */\n  get filterArea() {\n    return this._filterEffect?.filterArea;\n  }\n};\n\nexport { effectsMixin };\n\n", "import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst findMixin = {\n  /**\n   * The instance label of the object.\n   * @memberof scene.Container#\n   * @member {string} label\n   */\n  label: null,\n  /**\n   * The instance name of the object.\n   * @deprecated since 8.0.0\n   * @see scene.Container#label\n   * @member {string} name\n   * @memberof scene.Container#\n   */\n  get name() {\n    deprecation(v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    return this.label;\n  },\n  set name(value) {\n    deprecation(v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    this.label = value;\n  },\n  /**\n   * @method getChildByName\n   * @deprecated since 8.0.0\n   * @param {string} name - Instance name.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @returns {Container} The child with the specified name.\n   * @see scene.Container#getChildByLabel\n   * @memberof scene.Container#\n   */\n  getChildByName(name, deep = false) {\n    return this.getChildByLabel(name, deep);\n  },\n  /**\n   * Returns the first child in the container with the specified label.\n   *\n   * Recursive searches are done in a pre-order traversal.\n   * @memberof scene.Container#\n   * @param {string|RegExp} label - Instance label.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @returns {Container} The child with the specified label.\n   */\n  getChildByLabel(label, deep = false) {\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label))\n        return child;\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        const found = child.getChildByLabel(label, true);\n        if (found) {\n          return found;\n        }\n      }\n    }\n    return null;\n  },\n  /**\n   * Returns all children in the container with the specified label.\n   * @memberof scene.Container#\n   * @param {string|RegExp} label - Instance label.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @param {Container[]} [out=[]] - The array to store matching children in.\n   * @returns {Container[]} An array of children with the specified label.\n   */\n  getChildrenByLabel(label, deep = false, out = []) {\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label)) {\n        out.push(child);\n      }\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        children[i].getChildrenByLabel(label, true, out);\n      }\n    }\n    return out;\n  }\n};\n\nexport { findMixin };\n\n", "import { Point } from '../point/Point.mjs';\n\n\"use strict\";\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nclass Rectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rectangle\n   * @param width - The overall width of the rectangle\n   * @param height - The overall height of the rectangle\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'rectangle'\n     */\n    this.type = \"rectangle\";\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n  }\n  /** Returns the left edge of the rectangle. */\n  get left() {\n    return this.x;\n  }\n  /** Returns the right edge of the rectangle. */\n  get right() {\n    return this.x + this.width;\n  }\n  /** Returns the top edge of the rectangle. */\n  get top() {\n    return this.y;\n  }\n  /** Returns the bottom edge of the rectangle. */\n  get bottom() {\n    return this.y + this.height;\n  }\n  /** Determines whether the Rectangle is empty. */\n  isEmpty() {\n    return this.left === this.right || this.top === this.bottom;\n  }\n  /** A constant empty rectangle. This is a new object every time the property is accessed */\n  static get EMPTY() {\n    return new Rectangle(0, 0, 0, 0);\n  }\n  /**\n   * Creates a clone of this Rectangle\n   * @returns a copy of the rectangle\n   */\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  /**\n   * Converts a Bounds object to a Rectangle object.\n   * @param bounds - The bounds to copy and convert to a rectangle.\n   * @returns Returns itself.\n   */\n  copyFromBounds(bounds) {\n    this.x = bounds.minX;\n    this.y = bounds.minY;\n    this.width = bounds.maxX - bounds.minX;\n    this.height = bounds.maxY - bounds.minY;\n    return this;\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Rectangle\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(x, y, strokeWidth) {\n    const { width, height } = this;\n    if (width <= 0 || height <= 0)\n      return false;\n    const _x = this.x;\n    const _y = this.y;\n    const outerLeft = _x - strokeWidth / 2;\n    const outerRight = _x + width + strokeWidth / 2;\n    const outerTop = _y - strokeWidth / 2;\n    const outerBottom = _y + height + strokeWidth / 2;\n    const innerLeft = _x + strokeWidth / 2;\n    const innerRight = _x + width - strokeWidth / 2;\n    const innerTop = _y + strokeWidth / 2;\n    const innerBottom = _y + height - strokeWidth / 2;\n    return x >= outerLeft && x <= outerRight && y >= outerTop && y <= outerBottom && !(x > innerLeft && x < innerRight && y > innerTop && y < innerBottom);\n  }\n  /**\n   * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n   * Returns true only if the area of the intersection is >0, this means that Rectangles\n   * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n   * (width or height equal to zero) can't intersect any other rectangle.\n   * @param {Rectangle} other - The Rectangle to intersect with `this`.\n   * @param {Matrix} transform - The transformation matrix of `other`.\n   * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n   */\n  intersects(other, transform) {\n    if (!transform) {\n      const x02 = this.x < other.x ? other.x : this.x;\n      const x12 = this.right > other.right ? other.right : this.right;\n      if (x12 <= x02) {\n        return false;\n      }\n      const y02 = this.y < other.y ? other.y : this.y;\n      const y12 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y12 > y02;\n    }\n    const x0 = this.left;\n    const x1 = this.right;\n    const y0 = this.top;\n    const y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n    const lt = tempPoints[0].set(other.left, other.top);\n    const lb = tempPoints[1].set(other.left, other.bottom);\n    const rt = tempPoints[2].set(other.right, other.top);\n    const rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n    const s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0) {\n      return false;\n    }\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n    const nx = s * (lb.y - lt.y);\n    const ny = s * (lt.x - lb.x);\n    const n00 = nx * x0 + ny * y0;\n    const n10 = nx * x1 + ny * y0;\n    const n01 = nx * x0 + ny * y1;\n    const n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n    const mx = s * (lt.y - rt.y);\n    const my = s * (rt.x - lt.x);\n    const m00 = mx * x0 + my * y0;\n    const m10 = mx * x1 + my * y0;\n    const m01 = mx * x0 + my * y1;\n    const m11 = mx * x1 + my * y1;\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   * @returns Returns itself.\n   */\n  pad(paddingX = 0, paddingY = paddingX) {\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  }\n  /**\n   * Fits this rectangle around the passed one.\n   * @param rectangle - The rectangle to fit.\n   * @returns Returns itself.\n   */\n  fit(rectangle) {\n    const x1 = Math.max(this.x, rectangle.x);\n    const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.max(this.y, rectangle.y);\n    const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  }\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   * @param resolution - resolution\n   * @param eps - precision\n   * @returns Returns itself.\n   */\n  ceil(resolution = 1, eps = 1e-3) {\n    const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  }\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   * @param rectangle - The rectangle to include.\n   * @returns Returns itself.\n   */\n  enlarge(rectangle) {\n    const x1 = Math.min(this.x, rectangle.x);\n    const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.min(this.y, rectangle.y);\n    const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  }\n  /**\n   * Returns the framing rectangle of the rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    out.copyFrom(this);\n    return out;\n  }\n  toString() {\n    return `[pixi.js/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n  }\n}\n\nexport { Rectangle };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nconst defaultMatrix = new Matrix();\nclass Bounds {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /** @default Infinity */\n    this.minX = Infinity;\n    /** @default Infinity */\n    this.minY = Infinity;\n    /** @default -Infinity */\n    this.maxX = -Infinity;\n    /** @default -Infinity */\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if bounds are empty.\n   * @returns - True if empty.\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /** The bounding rectangle of the bounds. */\n  get rectangle() {\n    if (!this._rectangle) {\n      this._rectangle = new Rectangle();\n    }\n    const rectangle = this._rectangle;\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      rectangle.x = 0;\n      rectangle.y = 0;\n      rectangle.width = 0;\n      rectangle.height = 0;\n    } else {\n      rectangle.copyFromBounds(this);\n    }\n    return rectangle;\n  }\n  /** Clears the bounds and resets. */\n  clear() {\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    return this;\n  }\n  /**\n   * Sets the bounds.\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  set(x0, y0, x1, y1) {\n    this.minX = x0;\n    this.minY = y0;\n    this.maxX = x1;\n    this.maxY = y1;\n  }\n  /**\n   * Adds sprite frame\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   * @param matrix\n   */\n  addFrame(x0, y0, x1, y1, matrix) {\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    let x = a * x0 + c * y0 + tx;\n    let y = b * x0 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Adds a rectangle to the bounds.\n   * @param rect - The rectangle to be added.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  addRect(rect, matrix) {\n    this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n  }\n  /**\n   * Adds other {@link Bounds}.\n   * @param bounds - The Bounds to be added\n   * @param matrix\n   */\n  addBounds(bounds, matrix) {\n    this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n  }\n  /**\n   * Adds other Bounds, masked with Bounds.\n   * @param mask - The Bounds to be added.\n   */\n  addBoundsMask(mask) {\n    this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n    this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n    this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n    this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n  }\n  /**\n   * Adds other Bounds, multiplied with matrix.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  applyMatrix(matrix) {\n    const minX = this.minX;\n    const minY = this.minY;\n    const maxX = this.maxX;\n    const maxY = this.maxY;\n    const { a, b, c, d, tx, ty } = matrix;\n    let x = a * minX + c * minY + tx;\n    let y = b * minX + d * minY + ty;\n    this.minX = x;\n    this.minY = y;\n    this.maxX = x;\n    this.maxY = y;\n    x = a * maxX + c * minY + tx;\n    y = b * maxX + d * minY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * minX + c * maxY + tx;\n    y = b * minX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * maxX + c * maxY + tx;\n    y = b * maxX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n  }\n  /**\n   * Resizes the bounds object to include the given rectangle.\n   * @param rect - The rectangle to be included.\n   */\n  fit(rect) {\n    if (this.minX < rect.left)\n      this.minX = rect.left;\n    if (this.maxX > rect.right)\n      this.maxX = rect.right;\n    if (this.minY < rect.top)\n      this.minY = rect.top;\n    if (this.maxY > rect.bottom)\n      this.maxY = rect.bottom;\n    return this;\n  }\n  /**\n   * Resizes the bounds object to include the given bounds.\n   * @param left - The left value of the bounds.\n   * @param right - The right value of the bounds.\n   * @param top - The top value of the bounds.\n   * @param bottom - The bottom value of the bounds.\n   */\n  fitBounds(left, right, top, bottom) {\n    if (this.minX < left)\n      this.minX = left;\n    if (this.maxX > right)\n      this.maxX = right;\n    if (this.minY < top)\n      this.minY = top;\n    if (this.maxY > bottom)\n      this.maxY = bottom;\n    return this;\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   */\n  pad(paddingX, paddingY = paddingX) {\n    this.minX -= paddingX;\n    this.maxX += paddingX;\n    this.minY -= paddingY;\n    this.maxY += paddingY;\n    return this;\n  }\n  /** Ceils the bounds. */\n  ceil() {\n    this.minX = Math.floor(this.minX);\n    this.minY = Math.floor(this.minY);\n    this.maxX = Math.ceil(this.maxX);\n    this.maxY = Math.ceil(this.maxY);\n    return this;\n  }\n  /** Clones the bounds. */\n  clone() {\n    return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n  }\n  /**\n   * Scales the bounds by the given values\n   * @param x - The X value to scale by.\n   * @param y - The Y value to scale by.\n   */\n  scale(x, y = x) {\n    this.minX *= x;\n    this.minY *= y;\n    this.maxX *= x;\n    this.maxY *= y;\n    return this;\n  }\n  /** the x value of the bounds. */\n  get x() {\n    return this.minX;\n  }\n  set x(value) {\n    const width = this.maxX - this.minX;\n    this.minX = value;\n    this.maxX = value + width;\n  }\n  /** the y value of the bounds. */\n  get y() {\n    return this.minY;\n  }\n  set y(value) {\n    const height = this.maxY - this.minY;\n    this.minY = value;\n    this.maxY = value + height;\n  }\n  /** the width value of the bounds. */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  set width(value) {\n    this.maxX = this.minX + value;\n  }\n  /** the height value of the bounds. */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  set height(value) {\n    this.maxY = this.minY + value;\n  }\n  /** the left value of the bounds. */\n  get left() {\n    return this.minX;\n  }\n  /** the right value of the bounds. */\n  get right() {\n    return this.maxX;\n  }\n  /** the top value of the bounds. */\n  get top() {\n    return this.minY;\n  }\n  /** the bottom value of the bounds. */\n  get bottom() {\n    return this.maxY;\n  }\n  /** Is the bounds positive. */\n  get isPositive() {\n    return this.maxX - this.minX > 0 && this.maxY - this.minY > 0;\n  }\n  get isValid() {\n    return this.minX + this.minY !== Infinity;\n  }\n  /**\n   * Adds screen vertices from array\n   * @param vertexData - calculated vertices\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   * @param matrix\n   */\n  addVertexData(vertexData, beginOffset, endOffset, matrix) {\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const localX = vertexData[i];\n      const localY = vertexData[i + 1];\n      const x = a * localX + c * localY + tx;\n      const y = b * localX + d * localY + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if the point is contained within the bounds.\n   * @param x - x coordinate\n   * @param y - y coordinate\n   */\n  containsPoint(x, y) {\n    if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y) {\n      return true;\n    }\n    return false;\n  }\n  toString() {\n    return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n  }\n}\n\nexport { Bounds };\n\n", "import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Pool } from '../../../../utils/pool/Pool.mjs';\nimport { Bounds } from '../Bounds.mjs';\n\n\"use strict\";\nconst matrixPool = new Pool(Matrix);\nconst boundsPool = new Pool(Bounds);\n\nexport { boundsPool, matrixPool };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { matrixPool, boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nfunction getGlobalBounds(target, skipUpdateTransform, bounds) {\n  bounds.clear();\n  let parentTransform;\n  let pooledMatrix;\n  if (target.parent) {\n    if (!skipUpdateTransform) {\n      pooledMatrix = matrixPool.get().identity();\n      parentTransform = updateTransformBackwards(target, pooledMatrix);\n    } else {\n      parentTransform = target.parent.worldTransform;\n    }\n  } else {\n    parentTransform = Matrix.IDENTITY;\n  }\n  _getGlobalBounds(target, bounds, parentTransform, skipUpdateTransform);\n  if (pooledMatrix) {\n    matrixPool.return(pooledMatrix);\n  }\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  return bounds;\n}\nfunction _getGlobalBounds(target, bounds, parentTransform, skipUpdateTransform) {\n  if (!target.visible || !target.measurable)\n    return;\n  let worldTransform;\n  if (!skipUpdateTransform) {\n    target.updateLocalTransform();\n    worldTransform = matrixPool.get();\n    worldTransform.appendFrom(target.localTransform, parentTransform);\n  } else {\n    worldTransform = target.worldTransform;\n  }\n  const parentBounds = bounds;\n  const preserveBounds = !!target.effects.length;\n  if (preserveBounds) {\n    bounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, worldTransform);\n  } else {\n    if (target.addBounds) {\n      bounds.matrix = worldTransform;\n      target.addBounds(bounds);\n    }\n    for (let i = 0; i < target.children.length; i++) {\n      _getGlobalBounds(target.children[i], bounds, worldTransform, skipUpdateTransform);\n    }\n  }\n  if (preserveBounds) {\n    for (let i = 0; i < target.effects.length; i++) {\n      target.effects[i].addBounds?.(bounds);\n    }\n    parentBounds.addBounds(bounds, Matrix.IDENTITY);\n    boundsPool.return(bounds);\n  }\n  if (!skipUpdateTransform) {\n    matrixPool.return(worldTransform);\n  }\n}\nfunction updateTransformBackwards(target, parentTransform) {\n  const parent = target.parent;\n  if (parent) {\n    updateTransformBackwards(parent, parentTransform);\n    parent.updateLocalTransform();\n    parentTransform.append(parent.localTransform);\n  }\n  return parentTransform;\n}\n\nexport { _getGlobalBounds, getGlobalBounds, updateTransformBackwards };\n\n", "\"use strict\";\nlet warnCount = 0;\nconst maxWarnings = 500;\nfunction warn(...args) {\n  if (warnCount === maxWarnings)\n    return;\n  warnCount++;\n  if (warnCount === maxWarnings) {\n    console.warn(\"PixiJS Warning: too many warnings, no more warnings will be reported to the console by PixiJS.\");\n  } else {\n    console.warn(\"PixiJS Warning: \", ...args);\n  }\n}\n\nexport { warn };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\nimport { matrixPool, boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nfunction getLocalBounds(target, bounds, relativeMatrix) {\n  bounds.clear();\n  relativeMatrix || (relativeMatrix = Matrix.IDENTITY);\n  _getLocalBounds(target, bounds, relativeMatrix, target, true);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  return bounds;\n}\nfunction _getLocalBounds(target, bounds, parentTransform, rootContainer, isRoot) {\n  let relativeTransform;\n  if (!isRoot) {\n    if (!target.visible || !target.measurable)\n      return;\n    target.updateLocalTransform();\n    const localTransform = target.localTransform;\n    relativeTransform = matrixPool.get();\n    relativeTransform.appendFrom(localTransform, parentTransform);\n  } else {\n    relativeTransform = matrixPool.get();\n    relativeTransform = parentTransform.copyTo(relativeTransform);\n  }\n  const parentBounds = bounds;\n  const preserveBounds = !!target.effects.length;\n  if (preserveBounds) {\n    bounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, relativeTransform);\n  } else {\n    if (target.renderPipeId) {\n      bounds.matrix = relativeTransform;\n      target.addBounds(bounds);\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getLocalBounds(children[i], bounds, relativeTransform, rootContainer, false);\n    }\n  }\n  if (preserveBounds) {\n    for (let i = 0; i < target.effects.length; i++) {\n      target.effects[i].addLocalBounds?.(bounds, rootContainer);\n    }\n    parentBounds.addBounds(bounds, Matrix.IDENTITY);\n    boundsPool.return(bounds);\n  }\n  matrixPool.return(relativeTransform);\n}\nfunction getParent(target, root, matrix) {\n  const parent = target.parent;\n  if (!parent) {\n    warn(\"Item is not inside the root container\");\n    return;\n  }\n  if (parent !== root) {\n    getParent(parent, root, matrix);\n    parent.updateLocalTransform();\n    matrix.append(parent.localTransform);\n  }\n}\n\nexport { getLocalBounds, getParent };\n\n", "\"use strict\";\nfunction checkChildrenDidChange(container, previousData) {\n  const children = container.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    const uid = child.uid;\n    const didChange = (child._didViewChangeTick & 65535) << 16 | child._didContainerChangeTick & 65535;\n    const index = previousData.index;\n    if (previousData.data[index] !== uid || previousData.data[index + 1] !== didChange) {\n      previousData.data[previousData.index] = uid;\n      previousData.data[previousData.index + 1] = didChange;\n      previousData.didChange = true;\n    }\n    previousData.index = index + 2;\n    if (child.children.length) {\n      checkChildrenDidChange(child, previousData);\n    }\n  }\n  return previousData.didChange;\n}\n\nexport { checkChildrenDidChange };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Bounds } from '../bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../bounds/getGlobalBounds.mjs';\nimport { getLocalBounds } from '../bounds/getLocalBounds.mjs';\nimport { checkChildrenDidChange } from '../utils/checkChildrenDidChange.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nconst measureMixin = {\n  _localBoundsCacheId: -1,\n  _localBoundsCacheData: null,\n  _setWidth(value, localWidth) {\n    const sign = Math.sign(this.scale.x) || 1;\n    if (localWidth !== 0) {\n      this.scale.x = value / localWidth * sign;\n    } else {\n      this.scale.x = sign;\n    }\n  },\n  _setHeight(value, localHeight) {\n    const sign = Math.sign(this.scale.y) || 1;\n    if (localHeight !== 0) {\n      this.scale.y = value / localHeight * sign;\n    } else {\n      this.scale.y = sign;\n    }\n  },\n  /**\n   * Retrieves the local bounds of the container as a Bounds object.\n   * @returns - The bounding area.\n   * @memberof scene.Container#\n   */\n  getLocalBounds() {\n    if (!this._localBoundsCacheData) {\n      this._localBoundsCacheData = {\n        data: [],\n        index: 1,\n        didChange: false,\n        localBounds: new Bounds()\n      };\n    }\n    const localBoundsCacheData = this._localBoundsCacheData;\n    localBoundsCacheData.index = 1;\n    localBoundsCacheData.didChange = false;\n    if (localBoundsCacheData.data[0] !== this._didViewChangeTick) {\n      localBoundsCacheData.didChange = true;\n      localBoundsCacheData.data[0] = this._didViewChangeTick;\n    }\n    checkChildrenDidChange(this, localBoundsCacheData);\n    if (localBoundsCacheData.didChange) {\n      getLocalBounds(this, localBoundsCacheData.localBounds, tempMatrix);\n    }\n    return localBoundsCacheData.localBounds;\n  },\n  /**\n   * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link Rectangle}.\n   * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n   *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n   *  nice performance boost.\n   * @param bounds - Optional bounds to store the result of the bounds calculation.\n   * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n   * @memberof scene.Container#\n   */\n  getBounds(skipUpdate, bounds) {\n    return getGlobalBounds(this, skipUpdate, bounds || new Bounds());\n  }\n};\n\nexport { measureMixin };\n\n", "\"use strict\";\nconst onRenderMixin = {\n  _onRender: null,\n  set onRender(func) {\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (!func) {\n      if (this._onRender) {\n        renderGroup?.removeOnRender(this);\n      }\n      this._onRender = null;\n      return;\n    }\n    if (!this._onRender) {\n      renderGroup?.addOnRender(this);\n    }\n    this._onRender = func;\n  },\n  /**\n   * This callback is used when the container is rendered. This is where you should add your custom\n   * logic that is needed to be run every frame.\n   *\n   * In v7 many users used `updateTransform` for this, however the way v8 renders objects is different\n   * and \"updateTransform\" is no longer called every frame\n   * @example\n   * const container = new Container();\n   * container.onRender = () => {\n   *    container.rotation += 0.01;\n   * };\n   * @memberof scene.Container#\n   */\n  get onRender() {\n    return this._onRender;\n  }\n};\n\nexport { onRenderMixin };\n\n", "\"use strict\";\nconst sortMixin = {\n  _zIndex: 0,\n  /**\n   * Should children be sorted by zIndex at the next render call.\n   *\n   * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n   * @type {boolean}\n   * @memberof scene.Container#\n   */\n  sortDirty: false,\n  /**\n   * If set to true, the container will sort its children by `zIndex` value\n   * when the next render is called, or manually if `sortChildren()` is called.\n   *\n   * This actually changes the order of elements in the array, so should be treated\n   * as a basic solution that is not performant compared to other solutions,\n   * such as {@link https://github.com/pixijs/layers PixiJS Layers}\n   *\n   * Also be aware of that this may not work nicely with the `addChildAt()` function,\n   * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n   * @type {boolean}\n   * @memberof scene.Container#\n   */\n  sortableChildren: false,\n  /**\n   * The zIndex of the container.\n   *\n   * Setting this value, will automatically set the parent to be sortable. Children will be automatically\n   * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n   * and thus rendered on top of other display objects within the same container.\n   * @see scene.Container#sortableChildren\n   * @memberof scene.Container#\n   */\n  get zIndex() {\n    return this._zIndex;\n  },\n  set zIndex(value) {\n    if (this._zIndex === value)\n      return;\n    this._zIndex = value;\n    this.depthOfChildModified();\n  },\n  depthOfChildModified() {\n    if (this.parent) {\n      this.parent.sortableChildren = true;\n      this.parent.sortDirty = true;\n    }\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n  },\n  /**\n   * Sorts children by zIndex.\n   * @memberof scene.Container#\n   */\n  sortChildren() {\n    if (!this.sortDirty)\n      return;\n    this.sortDirty = false;\n    this.children.sort(sortChildren);\n  }\n};\nfunction sortChildren(a, b) {\n  return a._zIndex - b._zIndex;\n}\n\nexport { sortMixin };\n\n", "import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../maths/point/Point.mjs';\nimport { updateTransformBackwards } from '../bounds/getGlobalBounds.mjs';\n\n\"use strict\";\nconst toLocalGlobalMixin = {\n  /**\n   * Returns the global position of the container.\n   * @param point - The optional point to write the global value to.\n   * @param skipUpdate - Should we skip the update transform.\n   * @returns - The updated point.\n   * @memberof scene.Container#\n   */\n  getGlobalPosition(point = new Point(), skipUpdate = false) {\n    if (this.parent) {\n      this.parent.toGlobal(this._position, point, skipUpdate);\n    } else {\n      point.x = this._position.x;\n      point.y = this._position.y;\n    }\n    return point;\n  },\n  /**\n   * Calculates the global position of the container.\n   * @param position - The world origin to calculate from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform.\n   * @returns - A point object representing the position of this object.\n   * @memberof scene.Container#\n   */\n  toGlobal(position, point, skipUpdate = false) {\n    if (!skipUpdate) {\n      this.updateLocalTransform();\n      const globalMatrix = updateTransformBackwards(this, new Matrix());\n      globalMatrix.append(this.localTransform);\n      return globalMatrix.apply(position, point);\n    }\n    return this.worldTransform.apply(position, point);\n  },\n  /**\n   * Calculates the local position of the container relative to another point.\n   * @param position - The world origin to calculate from.\n   * @param from - The Container to calculate the global position from.\n   * @param point - A Point object in which to store the value, optional\n   *  (otherwise will create a new Point).\n   * @param skipUpdate - Should we skip the update transform\n   * @returns - A point object representing the position of this object\n   * @memberof scene.Container#\n   */\n  toLocal(position, from, point, skipUpdate) {\n    if (from) {\n      position = from.toGlobal(position, point, skipUpdate);\n    }\n    if (!skipUpdate) {\n      this.updateLocalTransform();\n      const globalMatrix = updateTransformBackwards(this, new Matrix());\n      globalMatrix.append(this.localTransform);\n      return globalMatrix.applyInverse(position, point);\n    }\n    return this.worldTransform.applyInverse(position, point);\n  }\n};\n\nexport { toLocalGlobalMixin };\n\n", "import { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nlet _tick = 0;\nclass InstructionSet {\n  constructor() {\n    /** a unique id for this instruction set used through the renderer */\n    this.uid = uid(\"instructionSet\");\n    /** the array of instructions */\n    this.instructions = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    this.instructionSize = 0;\n    this.renderables = [];\n    this.tick = 0;\n  }\n  /** reset the instruction set so it can be reused set size back to 0 */\n  reset() {\n    this.instructionSize = 0;\n    this.tick = _tick++;\n  }\n  /**\n   * Add an instruction to the set\n   * @param instruction - add an instruction to the set\n   */\n  add(instruction) {\n    this.instructions[this.instructionSize++] = instruction;\n  }\n  /**\n   * Log the instructions to the console (for debugging)\n   * @internal\n   * @ignore\n   */\n  log() {\n    this.instructions.length = this.instructionSize;\n    console.table(this.instructions, [\"type\", \"action\"]);\n  }\n}\n\nexport { InstructionSet };\n\n", "import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet.mjs';\n\n\"use strict\";\nclass RenderGroup {\n  constructor() {\n    this.renderPipeId = \"renderGroup\";\n    this.root = null;\n    this.canBundle = false;\n    this.renderGroupParent = null;\n    this.renderGroupChildren = [];\n    this.worldTransform = new Matrix();\n    this.worldColorAlpha = 4294967295;\n    this.worldColor = 16777215;\n    this.worldAlpha = 1;\n    // these updates are transform changes..\n    this.childrenToUpdate = /* @__PURE__ */ Object.create(null);\n    this.updateTick = 0;\n    // these update are renderable changes..\n    this.childrenRenderablesToUpdate = { list: [], index: 0 };\n    // other\n    this.structureDidChange = true;\n    this.instructionSet = new InstructionSet();\n    this._onRenderContainers = [];\n  }\n  init(root) {\n    this.root = root;\n    if (root._onRender)\n      this.addOnRender(root);\n    root.didChange = true;\n    const children = root.children;\n    for (let i = 0; i < children.length; i++) {\n      this.addChild(children[i]);\n    }\n  }\n  reset() {\n    this.renderGroupChildren.length = 0;\n    for (const i in this.childrenToUpdate) {\n      const childrenAtDepth = this.childrenToUpdate[i];\n      childrenAtDepth.list.fill(null);\n      childrenAtDepth.index = 0;\n    }\n    this.childrenRenderablesToUpdate.index = 0;\n    this.childrenRenderablesToUpdate.list.fill(null);\n    this.root = null;\n    this.updateTick = 0;\n    this.structureDidChange = true;\n    this._onRenderContainers.length = 0;\n    this.renderGroupParent = null;\n  }\n  get localTransform() {\n    return this.root.localTransform;\n  }\n  addRenderGroupChild(renderGroupChild) {\n    if (renderGroupChild.renderGroupParent) {\n      renderGroupChild.renderGroupParent._removeRenderGroupChild(renderGroupChild);\n    }\n    renderGroupChild.renderGroupParent = this;\n    this.renderGroupChildren.push(renderGroupChild);\n  }\n  _removeRenderGroupChild(renderGroupChild) {\n    const index = this.renderGroupChildren.indexOf(renderGroupChild);\n    if (index > -1) {\n      this.renderGroupChildren.splice(index, 1);\n    }\n    renderGroupChild.renderGroupParent = null;\n  }\n  addChild(child) {\n    this.structureDidChange = true;\n    child.parentRenderGroup = this;\n    child.updateTick = -1;\n    if (child.parent === this.root) {\n      child.relativeRenderGroupDepth = 1;\n    } else {\n      child.relativeRenderGroupDepth = child.parent.relativeRenderGroupDepth + 1;\n    }\n    child.didChange = true;\n    this.onChildUpdate(child);\n    if (child.renderGroup) {\n      this.addRenderGroupChild(child.renderGroup);\n      return;\n    }\n    if (child._onRender)\n      this.addOnRender(child);\n    const children = child.children;\n    for (let i = 0; i < children.length; i++) {\n      this.addChild(children[i]);\n    }\n  }\n  removeChild(child) {\n    this.structureDidChange = true;\n    if (child._onRender) {\n      if (!child.renderGroup) {\n        this.removeOnRender(child);\n      }\n    }\n    child.parentRenderGroup = null;\n    if (child.renderGroup) {\n      this._removeRenderGroupChild(child.renderGroup);\n      return;\n    }\n    const children = child.children;\n    for (let i = 0; i < children.length; i++) {\n      this.removeChild(children[i]);\n    }\n  }\n  removeChildren(children) {\n    for (let i = 0; i < children.length; i++) {\n      this.removeChild(children[i]);\n    }\n  }\n  onChildUpdate(child) {\n    let childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n    if (!childrenToUpdate) {\n      childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth] = {\n        index: 0,\n        list: []\n      };\n    }\n    childrenToUpdate.list[childrenToUpdate.index++] = child;\n  }\n  // SHOULD THIS BE HERE?\n  updateRenderable(container) {\n    if (container.globalDisplayStatus < 7)\n      return;\n    container.didViewUpdate = false;\n    this.instructionSet.renderPipes[container.renderPipeId].updateRenderable(container);\n  }\n  onChildViewUpdate(child) {\n    this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++] = child;\n  }\n  get isRenderable() {\n    return this.root.localDisplayStatus === 7 && this.worldAlpha > 0;\n  }\n  /**\n   * adding a container to the onRender list will make sure the user function\n   * passed in to the user defined 'onRender` callBack\n   * @param container - the container to add to the onRender list\n   */\n  addOnRender(container) {\n    this._onRenderContainers.push(container);\n  }\n  removeOnRender(container) {\n    this._onRenderContainers.splice(this._onRenderContainers.indexOf(container), 1);\n  }\n  runOnRender() {\n    for (let i = 0; i < this._onRenderContainers.length; i++) {\n      this._onRenderContainers[i]._onRender();\n    }\n  }\n  destroy() {\n    this.renderGroupParent = null;\n    this.root = null;\n    this.childrenRenderablesToUpdate = null;\n    this.childrenToUpdate = null;\n    this.renderGroupChildren = null;\n    this._onRenderContainers = null;\n    this.instructionSet = null;\n  }\n  getChildren(out = []) {\n    const children = this.root.children;\n    for (let i = 0; i < children.length; i++) {\n      this._getChildren(children[i], out);\n    }\n    return out;\n  }\n  _getChildren(container, out = []) {\n    out.push(container);\n    if (container.renderGroup)\n      return out;\n    const children = container.children;\n    for (let i = 0; i < children.length; i++) {\n      this._getChildren(children[i], out);\n    }\n    return out;\n  }\n}\n\nexport { RenderGroup };\n\n", "\"use strict\";\nfunction assignWithIgnore(target, options, ignore = {}) {\n  for (const key in options) {\n    if (!ignore[key] && options[key] !== void 0) {\n      target[key] = options[key];\n    }\n  }\n}\n\nexport { assignWithIgnore };\n\n", "import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { cullingMixin } from '../../culling/cullingMixin.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { RAD_TO_DEG, DEG_TO_RAD } from '../../maths/misc/const.mjs';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\nimport { uid } from '../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { childrenHelperMixin } from './container-mixins/childrenHelperMixin.mjs';\nimport { effectsMixin } from './container-mixins/effectsMixin.mjs';\nimport { findMixin } from './container-mixins/findMixin.mjs';\nimport { measureMixin } from './container-mixins/measureMixin.mjs';\nimport { onRenderMixin } from './container-mixins/onRenderMixin.mjs';\nimport { sortMixin } from './container-mixins/sortMixin.mjs';\nimport { toLocalGlobalMixin } from './container-mixins/toLocalGlobalMixin.mjs';\nimport { RenderGroup } from './RenderGroup.mjs';\nimport { assignWithIgnore } from './utils/assignWithIgnore.mjs';\n\n\"use strict\";\nconst defaultSkew = new ObservablePoint(null);\nconst defaultPivot = new ObservablePoint(null);\nconst defaultScale = new ObservablePoint(null, 1, 1);\nconst UPDATE_COLOR = 1;\nconst UPDATE_BLEND = 2;\nconst UPDATE_VISIBLE = 4;\nconst UPDATE_TRANSFORM = 8;\nclass Container extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    /** unique id for this container */\n    this.uid = uid(\"renderable\");\n    /** @private */\n    this._updateFlags = 15;\n    // the render group this container owns\n    /** @private */\n    this.renderGroup = null;\n    // the render group this container belongs to\n    /** @private */\n    this.parentRenderGroup = null;\n    // the index of the container in the render group\n    /** @private */\n    this.parentRenderGroupIndex = 0;\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    /** @private */\n    this.didChange = false;\n    // same as above, but for the renderable\n    /** @private */\n    this.didViewUpdate = false;\n    // how deep is the container relative to its render group..\n    // unless the element is the root render group - it will be relative to its parent\n    /** @private */\n    this.relativeRenderGroupDepth = 0;\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    this.children = [];\n    /** The display object container that contains this display object. */\n    this.parent = null;\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    /** @private */\n    this.includeInBuild = true;\n    /** @private */\n    this.measurable = true;\n    /** @private */\n    this.isSimple = true;\n    // / /////////////Transform related props//////////////\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    /**\n     * @internal\n     * @ignore\n     */\n    this.updateTick = -1;\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * @readonly\n     */\n    this.localTransform = new Matrix();\n    /**\n     * The relative group transform is a transform relative to the render group it belongs too. It will include all parent\n     * transforms and up to the render group (think of it as kind of like a stage - but the stage can be nested).\n     * If this container is is self a render group matrix will be relative to its parent render group\n     * @readonly\n     */\n    this.relativeGroupTransform = new Matrix();\n    /**\n     * The group transform is a transform relative to the render group it belongs too.\n     * If this container is render group then this will be an identity matrix. other wise it\n     * will be the same as the relativeGroupTransform.\n     * Use this value when actually rendering things to the screen\n     * @readonly\n     */\n    this.groupTransform = this.relativeGroupTransform;\n    /** If the object has been destroyed via destroy(). If true, it should not be used. */\n    this.destroyed = false;\n    // transform data..\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @internal\n     * @ignore\n     */\n    this._position = new ObservablePoint(this, 0, 0);\n    /**\n     * The scale factor of the object.\n     * @internal\n     * @ignore\n     */\n    this._scale = defaultScale;\n    /**\n     * The pivot point of the container that it rotates around.\n     * @internal\n     * @ignore\n     */\n    this._pivot = defaultPivot;\n    /**\n     * The skew amount, on the x and y axis.\n     * @internal\n     * @ignore\n     */\n    this._skew = defaultSkew;\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._cx = 1;\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._sx = 0;\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._cy = 0;\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     * @ignore\n     */\n    this._sy = 1;\n    /**\n     * The rotation amount.\n     * @internal\n     * @ignore\n     */\n    this._rotation = 0;\n    // / COLOR related props //////////////\n    // color stored as ABGR\n    this.localColor = 16777215;\n    this.localAlpha = 1;\n    this.groupAlpha = 1;\n    // A\n    this.groupColor = 16777215;\n    // BGR\n    this.groupColorAlpha = 4294967295;\n    // ABGR\n    // / BLEND related props //////////////\n    /**\n     * @internal\n     * @ignore\n     */\n    this.localBlendMode = \"inherit\";\n    /**\n     * @internal\n     * @ignore\n     */\n    this.groupBlendMode = \"normal\";\n    // / VISIBILITY related props //////////////\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    /**\n     * This property holds three bits: culled, visible, renderable\n     * the third bit represents culling (0 = culled, 1 = not culled) 0b100\n     * the second bit represents visibility (0 = not visible, 1 = visible) 0b010\n     * the first bit represents renderable (0 = not renderable, 1 = renderable) 0b001\n     * @internal\n     * @ignore\n     */\n    this.localDisplayStatus = 7;\n    // 0b11 | 0b10 | 0b01 | 0b00\n    /**\n     * @internal\n     * @ignore\n     */\n    this.globalDisplayStatus = 7;\n    /**\n     * A value that increments each time the containe is modified\n     * eg children added, removed etc\n     * @ignore\n     */\n    this._didContainerChangeTick = 0;\n    /**\n     * A value that increments each time the container view is modified\n     * eg texture swap, geometry change etc\n     * @ignore\n     */\n    this._didViewChangeTick = 0;\n    /**\n     * property that tracks if the container transform has changed\n     * @ignore\n     */\n    this._didLocalTransformChangeId = -1;\n    this.effects = [];\n    assignWithIgnore(this, options, {\n      children: true,\n      parent: true,\n      effects: true\n    });\n    options.children?.forEach((child) => this.addChild(child));\n    options.parent?.addChild(this);\n  }\n  /**\n   * Mixes all enumerable properties and methods from a source object to Container.\n   * @param source - The source of properties and methods to mix in.\n   */\n  static mixin(source) {\n    Object.defineProperties(Container.prototype, Object.getOwnPropertyDescriptors(source));\n  }\n  /**\n   * We now use the _didContainerChangeTick and _didViewChangeTick to track changes\n   * @deprecated since 8.2.6\n   * @ignore\n   */\n  set _didChangeId(value) {\n    this._didViewChangeTick = value >> 12 & 4095;\n    this._didContainerChangeTick = value & 4095;\n  }\n  get _didChangeId() {\n    return this._didContainerChangeTick & 4095 | (this._didViewChangeTick & 4095) << 12;\n  }\n  /**\n   * Adds one or more children to the container.\n   *\n   * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n   * @param {...Container} children - The Container(s) to add to the container\n   * @returns {Container} - The first child that was added.\n   */\n  addChild(...children) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChild: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.addChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    if (child.parent === this) {\n      this.children.splice(this.children.indexOf(child), 1);\n      this.children.push(child);\n      if (this.parentRenderGroup) {\n        this.parentRenderGroup.structureDidChange = true;\n      }\n      return child;\n    }\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n    this.children.push(child);\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    child.parent = this;\n    child.didChange = true;\n    child.didViewUpdate = false;\n    child._updateFlags = 15;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    this.emit(\"childAdded\", child, this, this.children.length - 1);\n    child.emit(\"added\", this);\n    this._didViewChangeTick++;\n    if (child._zIndex !== 0) {\n      child.depthOfChildModified();\n    }\n    return child;\n  }\n  /**\n   * Removes one or more children from the container.\n   * @param {...Container} children - The Container(s) to remove\n   * @returns {Container} The first child that was removed.\n   */\n  removeChild(...children) {\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.removeChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const index = this.children.indexOf(child);\n    if (index > -1) {\n      this._didViewChangeTick++;\n      this.children.splice(index, 1);\n      if (this.renderGroup) {\n        this.renderGroup.removeChild(child);\n      } else if (this.parentRenderGroup) {\n        this.parentRenderGroup.removeChild(child);\n      }\n      child.parent = null;\n      this.emit(\"childRemoved\", child, this, index);\n      child.emit(\"removed\", this);\n    }\n    return child;\n  }\n  /** @ignore */\n  _onUpdate(point) {\n    if (point) {\n      if (point === this._skew) {\n        this._updateSkew();\n      }\n    }\n    this._didContainerChangeTick++;\n    if (this.didChange)\n      return;\n    this.didChange = true;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.onChildUpdate(this);\n    }\n  }\n  set isRenderGroup(value) {\n    if (!!this.renderGroup === value)\n      return;\n    if (value) {\n      this.enableRenderGroup();\n    } else {\n      this.disableRenderGroup();\n    }\n  }\n  /**\n   * Returns true if this container is a render group.\n   * This means that it will be rendered as a separate pass, with its own set of instructions\n   */\n  get isRenderGroup() {\n    return !!this.renderGroup;\n  }\n  /**\n   * Calling this enables a render group for this container.\n   * This means it will be rendered as a separate set of instructions.\n   * The transform of the container will also be handled on the GPU rather than the CPU.\n   */\n  enableRenderGroup() {\n    if (this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    this.renderGroup = BigPool.get(RenderGroup, this);\n    this.groupTransform = Matrix.IDENTITY;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** This will disable the render group for this container. */\n  disableRenderGroup() {\n    if (!this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    BigPool.return(this.renderGroup);\n    this.renderGroup = null;\n    this.groupTransform = this.relativeGroupTransform;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** @ignore */\n  _updateIsSimple() {\n    this.isSimple = !this.renderGroup && this.effects.length === 0;\n  }\n  /**\n   * Current transform of the object based on world (parent) factors.\n   * @readonly\n   */\n  get worldTransform() {\n    this._worldTransform || (this._worldTransform = new Matrix());\n    if (this.renderGroup) {\n      this._worldTransform.copyFrom(this.renderGroup.worldTransform);\n    } else if (this.parentRenderGroup) {\n      this._worldTransform.appendFrom(this.relativeGroupTransform, this.parentRenderGroup.worldTransform);\n    }\n    return this._worldTransform;\n  }\n  // / ////// transform related stuff\n  /**\n   * The position of the container on the x axis relative to the local coordinates of the parent.\n   * An alias to position.x\n   */\n  get x() {\n    return this._position.x;\n  }\n  set x(value) {\n    this._position.x = value;\n  }\n  /**\n   * The position of the container on the y axis relative to the local coordinates of the parent.\n   * An alias to position.y\n   */\n  get y() {\n    return this._position.y;\n  }\n  set y(value) {\n    this._position.y = value;\n  }\n  /**\n   * The coordinate of the object relative to the local coordinates of the parent.\n   * @since 4.0.0\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position.copyFrom(value);\n  }\n  /**\n   * The rotation of the object in radians.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this._onUpdate(this._skew);\n    }\n  }\n  /**\n   * The angle of the object in degrees.\n   * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n   */\n  get angle() {\n    return this.rotation * RAD_TO_DEG;\n  }\n  set angle(value) {\n    this.rotation = value * DEG_TO_RAD;\n  }\n  /**\n   * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n   * is the projection of `pivot` in the parent's local space.\n   *\n   * By default, the pivot is the origin (0, 0).\n   * @since 4.0.0\n   */\n  get pivot() {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint(this, 0, 0);\n    }\n    return this._pivot;\n  }\n  set pivot(value) {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint(this, 0, 0);\n    }\n    typeof value === \"number\" ? this._pivot.set(value) : this._pivot.copyFrom(value);\n  }\n  /**\n   * The skew factor for the object in radians.\n   * @since 4.0.0\n   */\n  get skew() {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint(this, 0, 0);\n    }\n    return this._skew;\n  }\n  set skew(value) {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint(this, 0, 0);\n    }\n    this._skew.copyFrom(value);\n  }\n  /**\n   * The scale factors of this object along the local coordinate axes.\n   *\n   * The default scale is (1, 1).\n   * @since 4.0.0\n   */\n  get scale() {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint(this, 1, 1);\n    }\n    return this._scale;\n  }\n  set scale(value) {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint(this, 0, 0);\n    }\n    typeof value === \"number\" ? this._scale.set(value) : this._scale.copyFrom(value);\n  }\n  /**\n   * The width of the Container, setting this will actually modify the scale to achieve the value set.\n   * @memberof scene.Container#\n   */\n  get width() {\n    return Math.abs(this.scale.x * this.getLocalBounds().width);\n  }\n  set width(value) {\n    const localWidth = this.getLocalBounds().width;\n    this._setWidth(value, localWidth);\n  }\n  /**\n   * The height of the Container, setting this will actually modify the scale to achieve the value set.\n   * @memberof scene.Container#\n   */\n  get height() {\n    return Math.abs(this.scale.y * this.getLocalBounds().height);\n  }\n  set height(value) {\n    const localHeight = this.getLocalBounds().height;\n    this._setHeight(value, localHeight);\n  }\n  /**\n   * Retrieves the size of the container as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the container.\n   * @memberof scene.Container#\n   */\n  getSize(out) {\n    if (!out) {\n      out = {};\n    }\n    const bounds = this.getLocalBounds();\n    out.width = Math.abs(this.scale.x * bounds.width);\n    out.height = Math.abs(this.scale.y * bounds.height);\n    return out;\n  }\n  /**\n   * Sets the size of the container to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   * @memberof scene.Container#\n   */\n  setSize(value, height) {\n    const size = this.getLocalBounds();\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, size.width);\n    height !== void 0 && this._setHeight(height, size.height);\n  }\n  /** Called when the skew or the rotation changes. */\n  _updateSkew() {\n    const rotation = this._rotation;\n    const skew = this._skew;\n    this._cx = Math.cos(rotation + skew._y);\n    this._sx = Math.sin(rotation + skew._y);\n    this._cy = -Math.sin(rotation - skew._x);\n    this._sy = Math.cos(rotation - skew._x);\n  }\n  /**\n   * Updates the transform properties of the container (accepts partial values).\n   * @param {object} opts - The options for updating the transform.\n   * @param {number} opts.x - The x position of the container.\n   * @param {number} opts.y - The y position of the container.\n   * @param {number} opts.scaleX - The scale factor on the x-axis.\n   * @param {number} opts.scaleY - The scale factor on the y-axis.\n   * @param {number} opts.rotation - The rotation of the container, in radians.\n   * @param {number} opts.skewX - The skew factor on the x-axis.\n   * @param {number} opts.skewY - The skew factor on the y-axis.\n   * @param {number} opts.pivotX - The x coordinate of the pivot point.\n   * @param {number} opts.pivotY - The y coordinate of the pivot point.\n   */\n  updateTransform(opts) {\n    this.position.set(\n      typeof opts.x === \"number\" ? opts.x : this.position.x,\n      typeof opts.y === \"number\" ? opts.y : this.position.y\n    );\n    this.scale.set(\n      typeof opts.scaleX === \"number\" ? opts.scaleX || 1 : this.scale.x,\n      typeof opts.scaleY === \"number\" ? opts.scaleY || 1 : this.scale.y\n    );\n    this.rotation = typeof opts.rotation === \"number\" ? opts.rotation : this.rotation;\n    this.skew.set(\n      typeof opts.skewX === \"number\" ? opts.skewX : this.skew.x,\n      typeof opts.skewY === \"number\" ? opts.skewY : this.skew.y\n    );\n    this.pivot.set(\n      typeof opts.pivotX === \"number\" ? opts.pivotX : this.pivot.x,\n      typeof opts.pivotY === \"number\" ? opts.pivotY : this.pivot.y\n    );\n    return this;\n  }\n  /**\n   * Updates the local transform using the given matrix.\n   * @param matrix - The matrix to use for updating the transform.\n   */\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n  }\n  /** Updates the local transform. */\n  updateLocalTransform() {\n    const localTransformChangeId = this._didContainerChangeTick;\n    if (this._didLocalTransformChangeId === localTransformChangeId)\n      return;\n    this._didLocalTransformChangeId = localTransformChangeId;\n    const lt = this.localTransform;\n    const scale = this._scale;\n    const pivot = this._pivot;\n    const position = this._position;\n    const sx = scale._x;\n    const sy = scale._y;\n    const px = pivot._x;\n    const py = pivot._y;\n    lt.a = this._cx * sx;\n    lt.b = this._sx * sx;\n    lt.c = this._cy * sy;\n    lt.d = this._sy * sy;\n    lt.tx = position._x - (px * lt.a + py * lt.c);\n    lt.ty = position._y - (px * lt.b + py * lt.d);\n  }\n  // / ///// color related stuff\n  set alpha(value) {\n    if (value === this.localAlpha)\n      return;\n    this.localAlpha = value;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /** The opacity of the object. */\n  get alpha() {\n    return this.localAlpha;\n  }\n  set tint(value) {\n    const tempColor = Color.shared.setValue(value ?? 16777215);\n    const bgr = tempColor.toBgrNumber();\n    if (bgr === this.localColor)\n      return;\n    this.localColor = bgr;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /**\n   * The tint applied to the sprite. This is a hex value.\n   *\n   * A value of 0xFFFFFF will remove any tint effect.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    const bgr = this.localColor;\n    return ((bgr & 255) << 16) + (bgr & 65280) + (bgr >> 16 & 255);\n  }\n  // / //////////////// blend related stuff\n  set blendMode(value) {\n    if (this.localBlendMode === value)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_BLEND;\n    this.localBlendMode = value;\n    this._onUpdate();\n  }\n  /**\n   * The blend mode to be applied to the sprite. Apply a value of `'normal'` to reset the blend mode.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this.localBlendMode;\n  }\n  // / ///////// VISIBILITY / RENDERABLE /////////////////\n  /** The visibility of the object. If false the object will not be drawn, and the transform will not be updated. */\n  get visible() {\n    return !!(this.localDisplayStatus & 2);\n  }\n  set visible(value) {\n    const valueNumber = value ? 2 : 0;\n    if ((this.localDisplayStatus & 2) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 2;\n    this._onUpdate();\n  }\n  /** @ignore */\n  get culled() {\n    return !(this.localDisplayStatus & 4);\n  }\n  /** @ignore */\n  set culled(value) {\n    const valueNumber = value ? 0 : 4;\n    if ((this.localDisplayStatus & 4) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 4;\n    this._onUpdate();\n  }\n  /** Can this object be rendered, if false the object will not be drawn but the transform will still be updated. */\n  get renderable() {\n    return !!(this.localDisplayStatus & 1);\n  }\n  set renderable(value) {\n    const valueNumber = value ? 1 : 0;\n    if ((this.localDisplayStatus & 1) === valueNumber)\n      return;\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 1;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._onUpdate();\n  }\n  /** Whether or not the object should be rendered. */\n  get isRenderable() {\n    return this.localDisplayStatus === 7 && this.groupAlpha > 0;\n  }\n  /**\n   * Removes all internal references and listeners as well as removes children from the display list.\n   * Do not use a Container after calling `destroy`.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for children with textures e.g. Sprites. If options.children\n   * is set to true it should destroy the texture of the child sprite\n   * @param {boolean} [options.textureSource=false] - Only used for children with textures e.g. Sprites.\n   * If options.children is set to true it should destroy the texture source of the child sprite\n   * @param {boolean} [options.context=false] - Only used for children with graphicsContexts e.g. Graphics.\n   * If options.children is set to true it should destroy the context of the child graphics\n   */\n  destroy(options = false) {\n    if (this.destroyed)\n      return;\n    this.destroyed = true;\n    const oldChildren = this.removeChildren(0, this.children.length);\n    this.removeFromParent();\n    this.parent = null;\n    this._maskEffect = null;\n    this._filterEffect = null;\n    this.effects = null;\n    this._position = null;\n    this._scale = null;\n    this._pivot = null;\n    this._skew = null;\n    this.emit(\"destroyed\", this);\n    this.removeAllListeners();\n    const destroyChildren = typeof options === \"boolean\" ? options : options?.children;\n    if (destroyChildren) {\n      for (let i = 0; i < oldChildren.length; ++i) {\n        oldChildren[i].destroy(options);\n      }\n    }\n    this.renderGroup?.destroy();\n    this.renderGroup = null;\n  }\n}\nContainer.mixin(childrenHelperMixin);\nContainer.mixin(toLocalGlobalMixin);\nContainer.mixin(onRenderMixin);\nContainer.mixin(measureMixin);\nContainer.mixin(effectsMixin);\nContainer.mixin(findMixin);\nContainer.mixin(sortMixin);\nContainer.mixin(cullingMixin);\n\nexport { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_TRANSFORM, UPDATE_VISIBLE };\n\n", "\"use strict\";\nvar UPDATE_PRIORITY = /* @__PURE__ */ ((UPDATE_PRIORITY2) => {\n  UPDATE_PRIORITY2[UPDATE_PRIORITY2[\"INTERACTION\"] = 50] = \"INTERACTION\";\n  UPDATE_PRIORITY2[UPDATE_PRIORITY2[\"HIGH\"] = 25] = \"HIGH\";\n  UPDATE_PRIORITY2[UPDATE_PRIORITY2[\"NORMAL\"] = 0] = \"NORMAL\";\n  UPDATE_PRIORITY2[UPDATE_PRIORITY2[\"LOW\"] = -25] = \"LOW\";\n  UPDATE_PRIORITY2[UPDATE_PRIORITY2[\"UTILITY\"] = -50] = \"UTILITY\";\n  return UPDATE_PRIORITY2;\n})(UPDATE_PRIORITY || {});\n\nexport { UPDATE_PRIORITY };\n\n", "\"use strict\";\nclass TickerListener {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  constructor(fn, context = null, priority = 0, once = false) {\n    /** The next item in chain. */\n    this.next = null;\n    /** The previous item in chain. */\n    this.previous = null;\n    /** `true` if this listener has been destroyed already. */\n    this._destroyed = false;\n    this._fn = fn;\n    this._context = context;\n    this.priority = priority;\n    this._once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @returns `true` if the listener match the arguments\n   */\n  match(fn, context = null) {\n    return this._fn === fn && this._context === context;\n  }\n  /**\n   * Emit by calling the current function.\n   * @param ticker - The ticker emitting.\n   * @returns Next ticker\n   */\n  emit(ticker) {\n    if (this._fn) {\n      if (this._context) {\n        this._fn.call(this._context, ticker);\n      } else {\n        this._fn(ticker);\n      }\n    }\n    const redirect = this.next;\n    if (this._once) {\n      this.destroy(true);\n    }\n    if (this._destroyed) {\n      this.next = null;\n    }\n    return redirect;\n  }\n  /**\n   * Connect to the list.\n   * @param previous - Input node, previous listener\n   */\n  connect(previous) {\n    this.previous = previous;\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n    this.next = previous.next;\n    previous.next = this;\n  }\n  /**\n   * Destroy and don't use after this.\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @returns The listener to redirect while emitting or removing.\n   */\n  destroy(hard = false) {\n    this._destroyed = true;\n    this._fn = null;\n    this._context = null;\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n    if (this.next) {\n      this.next.previous = this.previous;\n    }\n    const redirect = this.next;\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  }\n}\n\nexport { TickerListener };\n\n", "import { UPDATE_PRIORITY } from './const.mjs';\nimport { TickerListener } from './TickerListener.mjs';\n\n\"use strict\";\nconst _Ticker = class _Ticker {\n  constructor() {\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link ticker.Ticker#start|start} automatically when a listener is added.\n     */\n    this.autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link ticker.Ticker#minFPS|minFPS}\n     * and is scaled with {@link ticker.Ticker#speed|speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    this.deltaTime = 1;\n    /**\n     * The last time {@link ticker.Ticker#update|update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     */\n    this.lastTime = -1;\n    /**\n     * Factor of current {@link ticker.Ticker#deltaTime|deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    this.speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link ticker.Ticker#start|start} has been called.\n     * `false` if {@link ticker.Ticker#stop|Stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link ticker.Ticker#autoStart|autoStart} being `true`\n     * and a listener is added.\n     */\n    this.started = false;\n    /** Internal current frame request ID */\n    this._requestId = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    this._maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    this._minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    this._protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    this._lastFrame = -1;\n    this._head = new TickerListener(null, null, Infinity);\n    this.deltaMS = 1 / _Ticker.targetFPMS;\n    this.elapsedMS = 1 / _Ticker.targetFPMS;\n    this._tick = (time) => {\n      this._requestId = null;\n      if (this.started) {\n        this.update(time);\n        if (this.started && this._requestId === null && this._head.next) {\n          this._requestId = requestAnimationFrame(this._tick);\n        }\n      }\n    };\n  }\n  /**\n   * Conditionally requests a new animation frame.\n   * If a frame has not already been requested, and if the internal\n   * emitter has listeners, a new frame is requested.\n   * @private\n   */\n  _requestIfNeeded() {\n    if (this._requestId === null && this._head.next) {\n      this.lastTime = performance.now();\n      this._lastFrame = this.lastTime;\n      this._requestId = requestAnimationFrame(this._tick);\n    }\n  }\n  /**\n   * Conditionally cancels a pending animation frame.\n   * @private\n   */\n  _cancelIfNeeded() {\n    if (this._requestId !== null) {\n      cancelAnimationFrame(this._requestId);\n      this._requestId = null;\n    }\n  }\n  /**\n   * Conditionally requests a new animation frame.\n   * If the ticker has been started it checks if a frame has not already\n   * been requested, and if the internal emitter has listeners. If these\n   * conditions are met, a new frame is requested. If the ticker has not\n   * been started, but autoStart is `true`, then the ticker starts now,\n   * and continues with the previous conditions to request a new frame.\n   * @private\n   */\n  _startIfPossible() {\n    if (this.started) {\n      this._requestIfNeeded();\n    } else if (this.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Register a handler for tick events. Calls continuously unless\n   * it is removed or the ticker is stopped.\n   * @param fn - The listener function to be added for updates\n   * @param context - The listener context\n   * @param {number} [priority=UPDATE_PRIORITY.NORMAL] - The priority for emitting\n   * @returns This instance of a ticker\n   */\n  add(fn, context, priority = UPDATE_PRIORITY.NORMAL) {\n    return this._addListener(new TickerListener(fn, context, priority));\n  }\n  /**\n   * Add a handler for the tick event which is only execute once.\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param {number} [priority=UPDATE_PRIORITY.NORMAL] - The priority for emitting\n   * @returns This instance of a ticker\n   */\n  addOnce(fn, context, priority = UPDATE_PRIORITY.NORMAL) {\n    return this._addListener(new TickerListener(fn, context, priority, true));\n  }\n  /**\n   * Internally adds the event handler so that it can be sorted by priority.\n   * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n   * before the rendering.\n   * @private\n   * @param listener - Current listener being added.\n   * @returns This instance of a ticker\n   */\n  _addListener(listener) {\n    let current = this._head.next;\n    let previous = this._head;\n    if (!current) {\n      listener.connect(previous);\n    } else {\n      while (current) {\n        if (listener.priority > current.priority) {\n          listener.connect(previous);\n          break;\n        }\n        previous = current;\n        current = current.next;\n      }\n      if (!listener.previous) {\n        listener.connect(previous);\n      }\n    }\n    this._startIfPossible();\n    return this;\n  }\n  /**\n   * Removes any handlers matching the function and context parameters.\n   * If no handlers are left after removing, then it cancels the animation frame.\n   * @param fn - The listener function to be removed\n   * @param context - The listener context to be removed\n   * @returns This instance of a ticker\n   */\n  remove(fn, context) {\n    let listener = this._head.next;\n    while (listener) {\n      if (listener.match(fn, context)) {\n        listener = listener.destroy();\n      } else {\n        listener = listener.next;\n      }\n    }\n    if (!this._head.next) {\n      this._cancelIfNeeded();\n    }\n    return this;\n  }\n  /**\n   * The number of listeners on this ticker, calculated by walking through linked list\n   * @readonly\n   * @member {number}\n   */\n  get count() {\n    if (!this._head) {\n      return 0;\n    }\n    let count = 0;\n    let current = this._head;\n    while (current = current.next) {\n      count++;\n    }\n    return count;\n  }\n  /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n  start() {\n    if (!this.started) {\n      this.started = true;\n      this._requestIfNeeded();\n    }\n  }\n  /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n  stop() {\n    if (this.started) {\n      this.started = false;\n      this._cancelIfNeeded();\n    }\n  }\n  /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n  destroy() {\n    if (!this._protected) {\n      this.stop();\n      let listener = this._head.next;\n      while (listener) {\n        listener = listener.destroy(true);\n      }\n      this._head.destroy();\n      this._head = null;\n    }\n  }\n  /**\n   * Triggers an update. An update entails setting the\n   * current {@link ticker.Ticker#elapsedMS|elapsedMS},\n   * the current {@link ticker.Ticker#deltaTime|deltaTime},\n   * invoking all listeners with current deltaTime,\n   * and then finally setting {@link ticker.Ticker#lastTime|lastTime}\n   * with the value of currentTime that was provided.\n   * This method will be called automatically by animation\n   * frame callbacks if the ticker instance has been started\n   * and listeners are added.\n   * @param {number} [currentTime=performance.now()] - the current time of execution\n   */\n  update(currentTime = performance.now()) {\n    let elapsedMS;\n    if (currentTime > this.lastTime) {\n      elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n      if (elapsedMS > this._maxElapsedMS) {\n        elapsedMS = this._maxElapsedMS;\n      }\n      elapsedMS *= this.speed;\n      if (this._minElapsedMS) {\n        const delta = currentTime - this._lastFrame | 0;\n        if (delta < this._minElapsedMS) {\n          return;\n        }\n        this._lastFrame = currentTime - delta % this._minElapsedMS;\n      }\n      this.deltaMS = elapsedMS;\n      this.deltaTime = this.deltaMS * _Ticker.targetFPMS;\n      const head = this._head;\n      let listener = head.next;\n      while (listener) {\n        listener = listener.emit(this);\n      }\n      if (!head.next) {\n        this._cancelIfNeeded();\n      }\n    } else {\n      this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n    }\n    this.lastTime = currentTime;\n  }\n  /**\n   * The frames per second at which this ticker is running.\n   * The default is approximately 60 in most modern browsers.\n   * **Note:** This does not factor in the value of\n   * {@link ticker.Ticker#speed|speed}, which is specific\n   * to scaling {@link ticker.Ticker#deltaTime|deltaTime}.\n   * @member {number}\n   * @readonly\n   */\n  get FPS() {\n    return 1e3 / this.elapsedMS;\n  }\n  /**\n   * Manages the maximum amount of milliseconds allowed to\n   * elapse between invoking {@link ticker.Ticker#update|update}.\n   * This value is used to cap {@link ticker.Ticker#deltaTime|deltaTime},\n   * but does not effect the measured value of {@link ticker.Ticker#FPS|FPS}.\n   * When setting this property it is clamped to a value between\n   * `0` and `Ticker.targetFPMS * 1000`.\n   * @member {number}\n   * @default 10\n   */\n  get minFPS() {\n    return 1e3 / this._maxElapsedMS;\n  }\n  set minFPS(fps) {\n    const minFPS = Math.min(this.maxFPS, fps);\n    const minFPMS = Math.min(Math.max(0, minFPS) / 1e3, _Ticker.targetFPMS);\n    this._maxElapsedMS = 1 / minFPMS;\n  }\n  /**\n   * Manages the minimum amount of milliseconds required to\n   * elapse between invoking {@link ticker.Ticker#update|update}.\n   * This will effect the measured value of {@link ticker.Ticker#FPS|FPS}.\n   * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n   * Otherwise it will be at least `minFPS`\n   * @member {number}\n   * @default 0\n   */\n  get maxFPS() {\n    if (this._minElapsedMS) {\n      return Math.round(1e3 / this._minElapsedMS);\n    }\n    return 0;\n  }\n  set maxFPS(fps) {\n    if (fps === 0) {\n      this._minElapsedMS = 0;\n    } else {\n      const maxFPS = Math.max(this.minFPS, fps);\n      this._minElapsedMS = 1 / (maxFPS / 1e3);\n    }\n  }\n  /**\n   * The shared ticker instance used by {@link AnimatedSprite} and by\n   * {@link VideoResource} to update animation frames / video textures.\n   *\n   * It may also be used by {@link Application} if created with the `sharedTicker` option property set to true.\n   *\n   * The property {@link ticker.Ticker#autoStart|autoStart} is set to `true` for this instance.\n   * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n   * @example\n   * import { Ticker } from 'pixi.js';\n   *\n   * const ticker = Ticker.shared;\n   * // Set this to prevent starting this ticker when listeners are added.\n   * // By default this is true only for the Ticker.shared instance.\n   * ticker.autoStart = false;\n   *\n   * // FYI, call this to ensure the ticker is stopped. It should be stopped\n   * // if you have not attempted to render anything yet.\n   * ticker.stop();\n   *\n   * // Call this when you are ready for a running shared ticker.\n   * ticker.start();\n   * @example\n   * import { autoDetectRenderer, Container } from 'pixi.js';\n   *\n   * // You may use the shared ticker to render...\n   * const renderer = autoDetectRenderer();\n   * const stage = new Container();\n   * document.body.appendChild(renderer.view);\n   * ticker.add((time) => renderer.render(stage));\n   *\n   * // Or you can just update it manually.\n   * ticker.autoStart = false;\n   * ticker.stop();\n   * const animate = (time) => {\n   *     ticker.update(time);\n   *     renderer.render(stage);\n   *     requestAnimationFrame(animate);\n   * };\n   * animate(performance.now());\n   * @member {ticker.Ticker}\n   * @readonly\n   * @static\n   */\n  static get shared() {\n    if (!_Ticker._shared) {\n      const shared = _Ticker._shared = new _Ticker();\n      shared.autoStart = true;\n      shared._protected = true;\n    }\n    return _Ticker._shared;\n  }\n  /**\n   * The system ticker instance used by {@link BasePrepare} for core timing\n   * functionality that shouldn't usually need to be paused, unlike the `shared`\n   * ticker which drives visual animations and rendering which may want to be paused.\n   *\n   * The property {@link ticker.Ticker#autoStart|autoStart} is set to `true` for this instance.\n   * @member {ticker.Ticker}\n   * @readonly\n   * @static\n   */\n  static get system() {\n    if (!_Ticker._system) {\n      const system = _Ticker._system = new _Ticker();\n      system.autoStart = true;\n      system._protected = true;\n    }\n    return _Ticker._system;\n  }\n};\n/**\n * Target frames per millisecond.\n * @static\n */\n_Ticker.targetFPMS = 0.06;\nlet Ticker = _Ticker;\n\nexport { Ticker };\n\n", "\"use strict\";\nconst BrowserAdapter = {\n  createCanvas: (width, height) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  },\n  getCanvasRenderingContext2D: () => CanvasRenderingContext2D,\n  getWebGLRenderingContext: () => WebGLRenderingContext,\n  getNavigator: () => navigator,\n  getBaseUrl: () => document.baseURI ?? window.location.href,\n  getFontFaceSet: () => document.fonts,\n  fetch: (url, options) => fetch(url, options),\n  parseXML: (xml) => {\n    const parser = new DOMParser();\n    return parser.parseFromString(xml, \"text/xml\");\n  }\n};\n\nexport { BrowserAdapter };\n\n", "import { BrowserAdapter } from '../environment-browser/BrowserAdapter.mjs';\n\n\"use strict\";\nlet currentAdapter = BrowserAdapter;\nconst DOMAdapter = {\n  /**\n   * Returns the current adapter.\n   * @returns {environment.Adapter} The current adapter.\n   */\n  get() {\n    return currentAdapter;\n  },\n  /**\n   * Sets the current adapter.\n   * @param adapter - The new adapter.\n   */\n  set(adapter) {\n    currentAdapter = adapter;\n  }\n};\n\nexport { DOMAdapter };\n\n", "import { Matrix } from './Matrix.mjs';\n\n\"use strict\";\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\nconst rotationCayley = [];\nconst rotationMatrices = [];\nconst signum = Math.sign;\nfunction init() {\n  for (let i = 0; i < 16; i++) {\n    const row = [];\n    rotationCayley.push(row);\n    for (let j = 0; j < 16; j++) {\n      const _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n      const _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n      const _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n      const _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      for (let k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0; i < 16; i++) {\n    const mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\ninit();\nconst groupD8 = {\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 0°       | East      |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  E: 0,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 45°↻     | Southeast |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  SE: 1,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 90°↻     | South     |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  S: 2,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 135°↻    | Southwest |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  SW: 3,\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 180°     | West      |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  W: 4,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -135°/225°↻ | Northwest    |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  NW: 5,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -90°/270°↻  | North        |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  N: 6,\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -45°/315°↻  | Northeast    |\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  NE: 7,\n  /**\n   * Reflection about Y-axis.\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  MIRROR_VERTICAL: 8,\n  /**\n   * Reflection about the main diagonal.\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  MAIN_DIAGONAL: 10,\n  /**\n   * Reflection about X-axis.\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  MIRROR_HORIZONTAL: 12,\n  /**\n   * Reflection about reverse diagonal.\n   * @memberof maths.groupD8\n   * @constant {GD8Symmetry}\n   */\n  REVERSE_DIAGONAL: 14,\n  /**\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} ind - sprite rotation angle.\n   * @returns {GD8Symmetry} The X-component of the U-axis\n   *    after rotating the axes.\n   */\n  uX: (ind) => ux[ind],\n  /**\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} ind - sprite rotation angle.\n   * @returns {GD8Symmetry} The Y-component of the U-axis\n   *    after rotating the axes.\n   */\n  uY: (ind) => uy[ind],\n  /**\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} ind - sprite rotation angle.\n   * @returns {GD8Symmetry} The X-component of the V-axis\n   *    after rotating the axes.\n   */\n  vX: (ind) => vx[ind],\n  /**\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} ind - sprite rotation angle.\n   * @returns {GD8Symmetry} The Y-component of the V-axis\n   *    after rotating the axes.\n   */\n  vY: (ind) => vy[ind],\n  /**\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} rotation - symmetry whose opposite\n   *   is needed. Only rotations have opposite symmetries while\n   *   reflections don't.\n   * @returns {GD8Symmetry} The opposite symmetry of `rotation`\n   */\n  inv: (rotation) => {\n    if (rotation & 8) {\n      return rotation & 15;\n    }\n    return -rotation & 7;\n  },\n  /**\n   * Composes the two D8 operations.\n   *\n   * Taking `^` as reflection:\n   *\n   * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n   * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n   * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n   * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n   * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n   * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n   * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n   * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n   * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n   * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n   *\n   * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} rotationSecond - Second operation, which\n   *   is the row in the above cayley table.\n   * @param {GD8Symmetry} rotationFirst - First operation, which\n   *   is the column in the above cayley table.\n   * @returns {GD8Symmetry} Composed operation\n   */\n  add: (rotationSecond, rotationFirst) => rotationCayley[rotationSecond][rotationFirst],\n  /**\n   * Reverse of `add`.\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} rotationSecond - Second operation\n   * @param {GD8Symmetry} rotationFirst - First operation\n   * @returns {GD8Symmetry} Result\n   */\n  sub: (rotationSecond, rotationFirst) => rotationCayley[rotationSecond][groupD8.inv(rotationFirst)],\n  /**\n   * Adds 180 degrees to rotation, which is a commutative\n   * operation.\n   * @memberof maths.groupD8\n   * @param {number} rotation - The number to rotate.\n   * @returns {number} Rotated number\n   */\n  rotate180: (rotation) => rotation ^ 4,\n  /**\n   * Checks if the rotation angle is vertical, i.e. south\n   * or north. It doesn't work for reflections.\n   * @memberof maths.groupD8\n   * @param {GD8Symmetry} rotation - The number to check.\n   * @returns {boolean} Whether or not the direction is vertical\n   */\n  isVertical: (rotation) => (rotation & 3) === 2,\n  // rotation % 4 === 2\n  /**\n   * Approximates the vector `V(dx,dy)` into one of the\n   * eight directions provided by `groupD8`.\n   * @memberof maths.groupD8\n   * @param {number} dx - X-component of the vector\n   * @param {number} dy - Y-component of the vector\n   * @returns {GD8Symmetry} Approximation of the vector into\n   *  one of the eight symmetries.\n   */\n  byDirection: (dx, dy) => {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n    return groupD8.NW;\n  },\n  /**\n   * Helps sprite to compensate texture packer rotation.\n   * @memberof maths.groupD8\n   * @param {Matrix} matrix - sprite world matrix\n   * @param {GD8Symmetry} rotation - The rotation factor to use.\n   * @param {number} tx - sprite anchoring\n   * @param {number} ty - sprite anchoring\n   */\n  matrixAppendRotationInv: (matrix, rotation, tx = 0, ty = 0) => {\n    const mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\n\nexport { groupD8 };\n\n", "\"use strict\";\nconst NOOP = () => {\n};\n\nexport { NOOP };\n\n", "\"use strict\";\nfunction nextPow2(v) {\n  v += v === 0 ? 1 : 0;\n  --v;\n  v |= v >>> 1;\n  v |= v >>> 2;\n  v |= v >>> 4;\n  v |= v >>> 8;\n  v |= v >>> 16;\n  return v + 1;\n}\nfunction isPow2(v) {\n  return !(v & v - 1) && !!v;\n}\nfunction log2(v) {\n  let r = (v > 65535 ? 1 : 0) << 4;\n  v >>>= r;\n  let shift = (v > 255 ? 1 : 0) << 3;\n  v >>>= shift;\n  r |= shift;\n  shift = (v > 15 ? 1 : 0) << 2;\n  v >>>= shift;\n  r |= shift;\n  shift = (v > 3 ? 1 : 0) << 1;\n  v >>>= shift;\n  r |= shift;\n  return r | v >> 1;\n}\n\nexport { isPow2, log2, nextPow2 };\n\n", "\"use strict\";\nfunction definedProps(obj) {\n  const result = {};\n  for (const key in obj) {\n    if (obj[key] !== void 0) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n\nexport { definedProps };\n\n", "import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createResourceIdFromString(value) {\n  const id = idHash[value];\n  if (id === void 0) {\n    idHash[value] = uid(\"resource\");\n  }\n  return id;\n}\nconst _TextureStyle = class _TextureStyle extends EventEmitter {\n  /**\n   * @param options - options for the style\n   */\n  constructor(options = {}) {\n    super();\n    this._resourceType = \"textureSampler\";\n    this._touched = 0;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     * @internal\n     * @ignore\n     */\n    this._maxAnisotropy = 1;\n    /**\n     * Has the style been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    options = { ..._TextureStyle.defaultOptions, ...options };\n    this.addressMode = options.addressMode;\n    this.addressModeU = options.addressModeU ?? this.addressModeU;\n    this.addressModeV = options.addressModeV ?? this.addressModeV;\n    this.addressModeW = options.addressModeW ?? this.addressModeW;\n    this.scaleMode = options.scaleMode;\n    this.magFilter = options.magFilter ?? this.magFilter;\n    this.minFilter = options.minFilter ?? this.minFilter;\n    this.mipmapFilter = options.mipmapFilter ?? this.mipmapFilter;\n    this.lodMinClamp = options.lodMinClamp;\n    this.lodMaxClamp = options.lodMaxClamp;\n    this.compare = options.compare;\n    this.maxAnisotropy = options.maxAnisotropy ?? 1;\n  }\n  set addressMode(value) {\n    this.addressModeU = value;\n    this.addressModeV = value;\n    this.addressModeW = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this.addressModeU;\n  }\n  set wrapMode(value) {\n    deprecation(v8_0_0, \"TextureStyle.wrapMode is now TextureStyle.addressMode\");\n    this.addressMode = value;\n  }\n  get wrapMode() {\n    return this.addressMode;\n  }\n  set scaleMode(value) {\n    this.magFilter = value;\n    this.minFilter = value;\n    this.mipmapFilter = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this.magFilter;\n  }\n  /** Specifies the maximum anisotropy value clamp used by the sampler. */\n  set maxAnisotropy(value) {\n    this._maxAnisotropy = Math.min(value, 16);\n    if (this._maxAnisotropy > 1) {\n      this.scaleMode = \"linear\";\n    }\n  }\n  get maxAnisotropy() {\n    return this._maxAnisotropy;\n  }\n  // TODO - move this to WebGL?\n  get _resourceId() {\n    return this._sharedResourceId || this._generateResourceId();\n  }\n  update() {\n    this.emit(\"change\", this);\n    this._sharedResourceId = null;\n  }\n  _generateResourceId() {\n    const bigKey = `${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;\n    this._sharedResourceId = createResourceIdFromString(bigKey);\n    return this._resourceId;\n  }\n  /** Destroys the style */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this.removeAllListeners();\n  }\n};\n/** default options for the style */\n_TextureStyle.defaultOptions = {\n  addressMode: \"clamp-to-edge\",\n  scaleMode: \"linear\"\n};\nlet TextureStyle = _TextureStyle;\n\nexport { TextureStyle };\n\n", "import EventEmitter from 'eventemitter3';\nimport { isPow2 } from '../../../../../maths/misc/pow2.mjs';\nimport { definedProps } from '../../../../../scene/container/utils/definedProps.mjs';\nimport { uid } from '../../../../../utils/data/uid.mjs';\nimport { TextureStyle } from '../TextureStyle.mjs';\n\n\"use strict\";\nconst _TextureSource = class _TextureSource extends EventEmitter {\n  /**\n   * @param options - options for creating a new TextureSource\n   */\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    /** unique id for this Texture source */\n    this.uid = uid(\"textureSource\");\n    /**\n     * The resource type used by this TextureSource. This is used by the bind groups to determine\n     * how to handle this resource.\n     * @ignore\n     * @internal\n     */\n    this._resourceType = \"textureSource\";\n    /**\n     * i unique resource id, used by the bind group systems.\n     * This can change if the texture is resized or its resource changes\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * this is how the backends know how to upload this texture to the GPU\n     * It changes depending on the resource type. Classes that extend TextureSource\n     * should override this property.\n     * @ignore\n     * @internal\n     */\n    this.uploadMethodId = \"unknown\";\n    // dimensions\n    this._resolution = 1;\n    /** the pixel width of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelWidth = 1;\n    /** the pixel height of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelHeight = 1;\n    /**\n     * the width of this texture source, accounting for resolution\n     * eg pixelWidth 200, resolution 2, then width will be 100\n     */\n    this.width = 1;\n    /**\n     * the height of this texture source, accounting for resolution\n     * eg pixelHeight 200, resolution 2, then height will be 100\n     */\n    this.height = 1;\n    /**\n     * The number of samples of a multisample texture. This is always 1 for non-multisample textures.\n     * To enable multisample for a texture, set antialias to true\n     * @internal\n     * @ignore\n     */\n    this.sampleCount = 1;\n    /** The number of mip levels to generate for this texture. this is  overridden if autoGenerateMipmaps is true */\n    this.mipLevelCount = 1;\n    /**\n     * Should we auto generate mipmaps for this texture? This will automatically generate mipmaps\n     * for this texture when uploading to the GPU. Mipmapped textures take up more memory, but\n     * can look better when scaled down.\n     *\n     * For performance reasons, it is recommended to NOT use this with RenderTextures, as they are often updated every frame.\n     * If you do, make sure to call `updateMipmaps` after you update the texture.\n     */\n    this.autoGenerateMipmaps = false;\n    /** the format that the texture data has */\n    this.format = \"rgba8unorm\";\n    /** how many dimensions does this texture have? currently v8 only supports 2d */\n    this.dimension = \"2d\";\n    /**\n     * Only really affects RenderTextures.\n     * Should we use antialiasing for this texture. It will look better, but may impact performance as a\n     * Blit operation will be required to resolve the texture.\n     */\n    this.antialias = false;\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    this._touched = 0;\n    /**\n     * Used by the batcher to build texture batches. faster to have the variable here!\n     * @protected\n     */\n    this._batchTick = -1;\n    /**\n     * A temporary batch location for the texture batching. Here for performance reasons only!\n     * @protected\n     */\n    this._textureBindLocation = -1;\n    options = { ..._TextureSource.defaultOptions, ...options };\n    this.label = options.label ?? \"\";\n    this.resource = options.resource;\n    this.autoGarbageCollect = options.autoGarbageCollect;\n    this._resolution = options.resolution;\n    if (options.width) {\n      this.pixelWidth = options.width * this._resolution;\n    } else {\n      this.pixelWidth = this.resource ? this.resourceWidth ?? 1 : 1;\n    }\n    if (options.height) {\n      this.pixelHeight = options.height * this._resolution;\n    } else {\n      this.pixelHeight = this.resource ? this.resourceHeight ?? 1 : 1;\n    }\n    this.width = this.pixelWidth / this._resolution;\n    this.height = this.pixelHeight / this._resolution;\n    this.format = options.format;\n    this.dimension = options.dimensions;\n    this.mipLevelCount = options.mipLevelCount;\n    this.autoGenerateMipmaps = options.autoGenerateMipmaps;\n    this.sampleCount = options.sampleCount;\n    this.antialias = options.antialias;\n    this.alphaMode = options.alphaMode;\n    this.style = new TextureStyle(definedProps(options));\n    this.destroyed = false;\n    this._refreshPOT();\n  }\n  /** returns itself */\n  get source() {\n    return this;\n  }\n  /** the style of the texture */\n  get style() {\n    return this._style;\n  }\n  set style(value) {\n    if (this.style === value)\n      return;\n    this._style?.off(\"change\", this._onStyleChange, this);\n    this._style = value;\n    this._style?.on(\"change\", this._onStyleChange, this);\n    this._onStyleChange();\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this._style.addressMode;\n  }\n  set addressMode(value) {\n    this._style.addressMode = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get repeatMode() {\n    return this._style.addressMode;\n  }\n  set repeatMode(value) {\n    this._style.addressMode = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n  get magFilter() {\n    return this._style.magFilter;\n  }\n  set magFilter(value) {\n    this._style.magFilter = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n  get minFilter() {\n    return this._style.minFilter;\n  }\n  set minFilter(value) {\n    this._style.minFilter = value;\n  }\n  /** Specifies behavior for sampling between mipmap levels. */\n  get mipmapFilter() {\n    return this._style.mipmapFilter;\n  }\n  set mipmapFilter(value) {\n    this._style.mipmapFilter = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMinClamp() {\n    return this._style.lodMinClamp;\n  }\n  set lodMinClamp(value) {\n    this._style.lodMinClamp = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMaxClamp() {\n    return this._style.lodMaxClamp;\n  }\n  set lodMaxClamp(value) {\n    this._style.lodMaxClamp = value;\n  }\n  _onStyleChange() {\n    this.emit(\"styleChange\", this);\n  }\n  /** call this if you have modified the texture outside of the constructor */\n  update() {\n    if (this.resource) {\n      const resolution = this._resolution;\n      const didResize = this.resize(this.resourceWidth / resolution, this.resourceHeight / resolution);\n      if (didResize)\n        return;\n    }\n    this.emit(\"update\", this);\n  }\n  /** Destroys this texture source */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    if (this._style) {\n      this._style.destroy();\n      this._style = null;\n    }\n    this.uploadMethodId = null;\n    this.resource = null;\n    this.removeAllListeners();\n  }\n  /**\n   * This will unload the Texture source from the GPU. This will free up the GPU memory\n   * As soon as it is required fore rendering, it will be re-uploaded.\n   */\n  unload() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n    this.emit(\"unload\", this);\n  }\n  /** the width of the resource. This is the REAL pure number, not accounting resolution   */\n  get resourceWidth() {\n    const { resource } = this;\n    return resource.naturalWidth || resource.videoWidth || resource.displayWidth || resource.width;\n  }\n  /** the height of the resource. This is the REAL pure number, not accounting resolution */\n  get resourceHeight() {\n    const { resource } = this;\n    return resource.naturalHeight || resource.videoHeight || resource.displayHeight || resource.height;\n  }\n  /**\n   * the resolution of the texture. Changing this number, will not change the number of pixels in the actual texture\n   * but will the size of the texture when rendered.\n   *\n   * changing the resolution of this texture to 2 for example will make it appear twice as small when rendered (as pixel\n   * density will have increased)\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(resolution) {\n    if (this._resolution === resolution)\n      return;\n    this._resolution = resolution;\n    this.width = this.pixelWidth / resolution;\n    this.height = this.pixelHeight / resolution;\n  }\n  /**\n   * Resize the texture, this is handy if you want to use the texture as a render texture\n   * @param width - the new width of the texture\n   * @param height - the new height of the texture\n   * @param resolution - the new resolution of the texture\n   * @returns - if the texture was resized\n   */\n  resize(width, height, resolution) {\n    resolution = resolution || this._resolution;\n    width = width || this.width;\n    height = height || this.height;\n    const newPixelWidth = Math.round(width * resolution);\n    const newPixelHeight = Math.round(height * resolution);\n    this.width = newPixelWidth / resolution;\n    this.height = newPixelHeight / resolution;\n    this._resolution = resolution;\n    if (this.pixelWidth === newPixelWidth && this.pixelHeight === newPixelHeight) {\n      return false;\n    }\n    this._refreshPOT();\n    this.pixelWidth = newPixelWidth;\n    this.pixelHeight = newPixelHeight;\n    this.emit(\"resize\", this);\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n    return true;\n  }\n  /**\n   * Lets the renderer know that this texture has been updated and its mipmaps should be re-generated.\n   * This is only important for RenderTexture instances, as standard Texture instances will have their\n   * mipmaps generated on upload. You should call this method after you make any change to the texture\n   *\n   * The reason for this is is can be quite expensive to update mipmaps for a texture. So by default,\n   * We want you, the developer to specify when this action should happen.\n   *\n   * Generally you don't want to have mipmaps generated on Render targets that are changed every frame,\n   */\n  updateMipmaps() {\n    if (this.autoGenerateMipmaps && this.mipLevelCount > 1) {\n      this.emit(\"updateMipmaps\", this);\n    }\n  }\n  set wrapMode(value) {\n    this._style.wrapMode = value;\n  }\n  get wrapMode() {\n    return this._style.wrapMode;\n  }\n  set scaleMode(value) {\n    this._style.scaleMode = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this._style.scaleMode;\n  }\n  /**\n   * Refresh check for isPowerOfTwo texture based on size\n   * @private\n   */\n  _refreshPOT() {\n    this.isPowerOfTwo = isPow2(this.pixelWidth) && isPow2(this.pixelHeight);\n  }\n  static test(_resource) {\n    throw new Error(\"Unimplemented\");\n  }\n};\n/** The default options used when creating a new TextureSource. override these to add your own defaults */\n_TextureSource.defaultOptions = {\n  resolution: 1,\n  format: \"bgra8unorm\",\n  alphaMode: \"premultiply-alpha-on-upload\",\n  dimensions: \"2d\",\n  mipLevelCount: 1,\n  autoGenerateMipmaps: false,\n  sampleCount: 1,\n  antialias: false,\n  autoGarbageCollect: false\n};\nlet TextureSource = _TextureSource;\n\nexport { TextureSource };\n\n", "import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass BufferImageSource extends TextureSource {\n  constructor(options) {\n    const buffer = options.resource || new Float32Array(options.width * options.height * 4);\n    let format = options.format;\n    if (!format) {\n      if (buffer instanceof Float32Array) {\n        format = \"rgba32float\";\n      } else if (buffer instanceof Int32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Uint32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Int16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Uint16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Int8Array) {\n        format = \"bgra8unorm\";\n      } else {\n        format = \"bgra8unorm\";\n      }\n    }\n    super({\n      ...options,\n      resource: buffer,\n      format\n    });\n    this.uploadMethodId = \"buffer\";\n  }\n  static test(resource) {\n    return resource instanceof Int8Array || resource instanceof Uint8Array || resource instanceof Uint8ClampedArray || resource instanceof Int16Array || resource instanceof Uint16Array || resource instanceof Int32Array || resource instanceof Uint32Array || resource instanceof Float32Array;\n  }\n}\nBufferImageSource.extension = ExtensionType.TextureSource;\n\nexport { BufferImageSource };\n\n", "import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\n\n\"use strict\";\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    if (typeof clampMargin === \"undefined\") {\n      this.clampMargin = texture.width < 10 ? 0 : 0.5;\n    } else {\n      this.clampMargin = clampMargin;\n    }\n    this.isSimple = false;\n    this.texture = texture;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this.texture === value)\n      return;\n    this._texture?.removeListener(\"update\", this.update, this);\n    this._texture = value;\n    this._texture.addListener(\"update\", this.update, this);\n    this.update();\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed\n   * @returns - whether or not it was updated\n   */\n  update() {\n    const tex = this._texture;\n    this._updateID++;\n    const uvs = tex.uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(\n        orig.width / trim.width,\n        0,\n        0,\n        orig.height / trim.height,\n        -trim.x / trim.width,\n        -trim.y / trim.height\n      );\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.source;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase._resolution;\n    const offset = this.clampOffset / texBase._resolution;\n    frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = this.clampOffset / texBase.pixelWidth;\n    this.uClampOffset[1] = this.clampOffset / texBase.pixelHeight;\n    this.isSimple = tex.frame.width === texBase.width && tex.frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\n\nexport { TextureMatrix };\n\n", "import EventEmitter from 'eventemitter3';\nimport { groupD8 } from '../../../../maths/matrix/groupD8.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { NOOP } from '../../../../utils/misc/NOOP.mjs';\nimport { BufferImageSource } from './sources/BufferImageSource.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { TextureMatrix } from './TextureMatrix.mjs';\n\n\"use strict\";\nclass Texture extends EventEmitter {\n  /**\n   * @param {rendering.TextureOptions} options - Options for the texture\n   */\n  constructor({\n    source,\n    label,\n    frame,\n    orig,\n    trim,\n    defaultAnchor,\n    defaultBorders,\n    rotate,\n    dynamic\n  } = {}) {\n    super();\n    /** unique id for this texture */\n    this.uid = uid(\"texture\");\n    /** A uvs object based on the given frame and the texture source */\n    this.uvs = { x0: 0, y0: 0, x1: 0, y1: 0, x2: 0, y2: 0, x3: 0, y3: 0 };\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    this.frame = new Rectangle();\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     * @example\n     * texture.on('update', () => {});\n     */\n    this.noFrame = false;\n    /**\n     * Set to true if you plan on modifying the uvs of this texture.\n     * When this is the case, sprites and other objects using the texture will\n     * make sure to listen for changes to the uvs and update their vertices accordingly.\n     */\n    this.dynamic = false;\n    /** is it a texture? yes! used for type checking */\n    this.isTexture = true;\n    this.label = label;\n    this.source = source?.source ?? new TextureSource();\n    this.noFrame = !frame;\n    if (frame) {\n      this.frame.copyFrom(frame);\n    } else {\n      const { width, height } = this._source;\n      this.frame.width = width;\n      this.frame.height = height;\n    }\n    this.orig = orig || this.frame;\n    this.trim = trim;\n    this.rotate = rotate ?? 0;\n    this.defaultAnchor = defaultAnchor;\n    this.defaultBorders = defaultBorders;\n    this.destroyed = false;\n    this.dynamic = dynamic || false;\n    this.updateUvs();\n  }\n  set source(value) {\n    if (this._source) {\n      this._source.off(\"resize\", this.update, this);\n    }\n    this._source = value;\n    value.on(\"resize\", this.update, this);\n    this.emit(\"update\", this);\n  }\n  /** the underlying source of the texture (equivalent of baseTexture in v7) */\n  get source() {\n    return this._source;\n  }\n  /** returns a TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n  get textureMatrix() {\n    if (!this._textureMatrix) {\n      this._textureMatrix = new TextureMatrix(this);\n    }\n    return this._textureMatrix;\n  }\n  /** The width of the Texture in pixels. */\n  get width() {\n    return this.orig.width;\n  }\n  /** The height of the Texture in pixels. */\n  get height() {\n    return this.orig.height;\n  }\n  /** Call this function when you have modified the frame of this texture. */\n  updateUvs() {\n    const { uvs, frame } = this;\n    const { width, height } = this._source;\n    const nX = frame.x / width;\n    const nY = frame.y / height;\n    const nW = frame.width / width;\n    const nH = frame.height / height;\n    let rotate = this.rotate;\n    if (rotate) {\n      const w2 = nW / 2;\n      const h2 = nH / 2;\n      const cX = nX + w2;\n      const cY = nY + h2;\n      rotate = groupD8.add(rotate, groupD8.NW);\n      uvs.x0 = cX + w2 * groupD8.uX(rotate);\n      uvs.y0 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      uvs.x1 = cX + w2 * groupD8.uX(rotate);\n      uvs.y1 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      uvs.x2 = cX + w2 * groupD8.uX(rotate);\n      uvs.y2 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      uvs.x3 = cX + w2 * groupD8.uX(rotate);\n      uvs.y3 = cY + h2 * groupD8.uY(rotate);\n    } else {\n      uvs.x0 = nX;\n      uvs.y0 = nY;\n      uvs.x1 = nX + nW;\n      uvs.y1 = nY;\n      uvs.x2 = nX + nW;\n      uvs.y2 = nY + nH;\n      uvs.x3 = nX;\n      uvs.y3 = nY + nH;\n    }\n  }\n  /**\n   * Destroys this texture\n   * @param destroySource - Destroy the source when the texture is destroyed.\n   */\n  destroy(destroySource = false) {\n    if (this._source) {\n      if (destroySource) {\n        this._source.destroy();\n        this._source = null;\n      }\n    }\n    this._textureMatrix = null;\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n  }\n  /** call this if you have modified the `texture outside` of the constructor */\n  update() {\n    if (this.noFrame) {\n      this.frame.width = this._source.width;\n      this.frame.height = this._source.height;\n    }\n    this.updateUvs();\n    this.emit(\"update\", this);\n  }\n  /** @deprecated since 8.0.0 */\n  get baseTexture() {\n    deprecation(v8_0_0, \"Texture.baseTexture is now Texture.source\");\n    return this._source;\n  }\n}\nTexture.EMPTY = new Texture({\n  label: \"EMPTY\",\n  source: new TextureSource({\n    label: \"EMPTY\"\n  })\n});\nTexture.EMPTY.destroy = NOOP;\nTexture.WHITE = new Texture({\n  source: new BufferImageSource({\n    resource: new Uint8Array([255, 255, 255, 255]),\n    width: 1,\n    height: 1,\n    alphaMode: \"premultiply-alpha-on-upload\",\n    label: \"WHITE\"\n  }),\n  label: \"WHITE\"\n});\nTexture.WHITE.destroy = NOOP;\n\nexport { Texture };\n\n", "\"use strict\";\nfunction updateQuadBounds(bounds, anchor, texture, padding) {\n  const { width, height } = texture.orig;\n  const trim = texture.trim;\n  if (trim) {\n    const sourceWidth = trim.width;\n    const sourceHeight = trim.height;\n    bounds.minX = trim.x - anchor._x * width - padding;\n    bounds.maxX = bounds.minX + sourceWidth;\n    bounds.minY = trim.y - anchor._y * height - padding;\n    bounds.maxY = bounds.minY + sourceHeight;\n  } else {\n    bounds.minX = -anchor._x * width - padding;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * height - padding;\n    bounds.maxY = bounds.minY + height;\n  }\n  return;\n}\n\nexport { updateQuadBounds };\n\n", "import { Bounds } from '../container/bounds/Bounds.mjs';\nimport { Container } from '../container/Container.mjs';\n\n\"use strict\";\nclass ViewContainer extends Container {\n  constructor() {\n    super(...arguments);\n    /** @private */\n    this.canBundle = true;\n    /** @private */\n    this.allowChildren = false;\n    /** @private */\n    this._roundPixels = 0;\n    /** @private */\n    this._lastUsed = 0;\n    /** @private */\n    this._lastInstructionTick = -1;\n    this._bounds = new Bounds(0, 1, 0, 0);\n    this._boundsDirty = true;\n  }\n  /** @private */\n  _updateBounds() {\n  }\n  /**\n   * Whether or not to round the x/y position of the sprite.\n   * @type {boolean}\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  set roundPixels(value) {\n    this._roundPixels = value ? 1 : 0;\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const bounds = this.bounds;\n    const { x, y } = point;\n    return x >= bounds.minX && x <= bounds.maxX && y >= bounds.minY && y <= bounds.maxY;\n  }\n  destroy(options) {\n    super.destroy(options);\n    this._bounds = null;\n  }\n}\n\nexport { ViewContainer };\n\n", "import { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { ViewContainer } from '../view/View.mjs';\n\n\"use strict\";\nclass Sprite extends ViewContainer {\n  /**\n   * @param options - The options for creating the sprite.\n   */\n  constructor(options = Texture.EMPTY) {\n    if (options instanceof Texture) {\n      options = { texture: options };\n    }\n    const { texture = Texture.EMPTY, anchor, roundPixels, width, height, ...rest } = options;\n    super({\n      label: \"Sprite\",\n      ...rest\n    });\n    this.renderPipeId = \"sprite\";\n    this.batched = true;\n    this._didSpriteUpdate = false;\n    this._sourceBounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    this._sourceBoundsDirty = true;\n    this._anchor = new ObservablePoint(\n      {\n        _onUpdate: () => {\n          this.onViewUpdate();\n        }\n      }\n    );\n    if (anchor) {\n      this.anchor = anchor;\n    } else if (texture.defaultAnchor) {\n      this.anchor = texture.defaultAnchor;\n    }\n    this.texture = texture;\n    this.allowChildren = false;\n    this.roundPixels = roundPixels ?? false;\n    if (width !== void 0)\n      this.width = width;\n    if (height !== void 0)\n      this.height = height;\n  }\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image, video, canvas element, video element, texture\n   * @param source - Source to create texture from\n   * @param [skipCache] - Whether to skip the cache or not\n   * @returns The newly created sprite\n   */\n  static from(source, skipCache = false) {\n    if (source instanceof Texture) {\n      return new Sprite(source);\n    }\n    return new Sprite(Texture.from(source, skipCache));\n  }\n  set texture(value) {\n    value || (value = Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value)\n      return;\n    if (currentTexture && currentTexture.dynamic)\n      currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic)\n      value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    if (this._width) {\n      this._setWidth(this._width, this._texture.orig.width);\n    }\n    if (this._height) {\n      this._setHeight(this._height, this._texture.orig.height);\n    }\n    this.onViewUpdate();\n  }\n  /** The texture that the sprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * The local bounds of the sprite.\n   * @type {rendering.Bounds}\n   */\n  get bounds() {\n    if (this._boundsDirty) {\n      this._updateBounds();\n      this._boundsDirty = false;\n    }\n    return this._bounds;\n  }\n  /**\n   * The bounds of the sprite, taking the texture's trim into account.\n   * @type {rendering.Bounds}\n   */\n  get sourceBounds() {\n    if (this._sourceBoundsDirty) {\n      this._updateSourceBounds();\n      this._sourceBoundsDirty = false;\n    }\n    return this._sourceBounds;\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const bounds = this.sourceBounds;\n    if (point.x >= bounds.maxX && point.x <= bounds.minX) {\n      if (point.y >= bounds.maxY && point.y <= bounds.minY) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Adds the bounds of this object to the bounds object.\n   * @param bounds - The output bounds object.\n   */\n  addBounds(bounds) {\n    const _bounds = this._texture.trim ? this.sourceBounds : this.bounds;\n    bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n  }\n  onViewUpdate() {\n    this._didViewChangeTick++;\n    this._didSpriteUpdate = true;\n    this._sourceBoundsDirty = this._boundsDirty = true;\n    if (this.didViewUpdate)\n      return;\n    this.didViewUpdate = true;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.onChildViewUpdate(this);\n    }\n  }\n  _updateBounds() {\n    updateQuadBounds(this._bounds, this._anchor, this._texture, 0);\n  }\n  _updateSourceBounds() {\n    const anchor = this._anchor;\n    const texture = this._texture;\n    const sourceBounds = this._sourceBounds;\n    const { width, height } = texture.orig;\n    sourceBounds.maxX = -anchor._x * width;\n    sourceBounds.minX = sourceBounds.maxX + width;\n    sourceBounds.maxY = -anchor._y * height;\n    sourceBounds.minY = sourceBounds.maxY + height;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options = false) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n    this._bounds = null;\n    this._sourceBounds = null;\n    this._anchor = null;\n  }\n  /**\n   * The anchor sets the origin point of the sprite. The default value is taken from the {@link Texture}\n   * and passed to the constructor.\n   *\n   * The default is `(0,0)`, this means the sprite's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite({texture: Texture.WHITE});\n   * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    typeof value === \"number\" ? this._anchor.set(value) : this._anchor.copyFrom(value);\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    this._setWidth(value, this._texture.orig.width);\n    this._width = value;\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    this._setHeight(value, this._texture.orig.height);\n    this._height = value;\n  }\n  /**\n   * Retrieves the size of the Sprite as a [Size]{@link Size} object.\n   * This is faster than get the width and height separately.\n   * @param out - Optional object to store the size in.\n   * @returns - The size of the Sprite.\n   */\n  getSize(out) {\n    out || (out = {});\n    out.width = Math.abs(this.scale.x) * this._texture.orig.width;\n    out.height = Math.abs(this.scale.y) * this._texture.orig.height;\n    return out;\n  }\n  /**\n   * Sets the size of the Sprite to the specified width and height.\n   * This is faster than setting the width and height separately.\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, this._texture.orig.width);\n    height !== void 0 && this._setHeight(height, this._texture.orig.height);\n  }\n}\n\nexport { Sprite };\n\n", "import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass CanvasSource extends TextureSource {\n  constructor(options) {\n    if (!options.resource) {\n      options.resource = DOMAdapter.get().createCanvas();\n    }\n    if (!options.width) {\n      options.width = options.resource.width;\n      if (!options.autoDensity) {\n        options.width /= options.resolution;\n      }\n    }\n    if (!options.height) {\n      options.height = options.resource.height;\n      if (!options.autoDensity) {\n        options.height /= options.resolution;\n      }\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoDensity = options.autoDensity;\n    const canvas = options.resource;\n    if (this.pixelWidth !== canvas.width || this.pixelWidth !== canvas.height) {\n      this.resizeCanvas();\n    }\n    this.transparent = !!options.transparent;\n  }\n  resizeCanvas() {\n    if (this.autoDensity) {\n      this.resource.style.width = `${this.width}px`;\n      this.resource.style.height = `${this.height}px`;\n    }\n    if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight) {\n      this.resource.width = this.pixelWidth;\n      this.resource.height = this.pixelHeight;\n    }\n  }\n  resize(width = this.width, height = this.height, resolution = this._resolution) {\n    const didResize = super.resize(width, height, resolution);\n    if (didResize) {\n      this.resizeCanvas();\n    }\n    return didResize;\n  }\n  static test(resource) {\n    return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement || globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas;\n  }\n  /**\n   * Returns the 2D rendering context for the canvas.\n   * Caches the context after creating it.\n   * @returns The 2D rendering context of the canvas.\n   */\n  get context2D() {\n    return this._context2D || (this._context2D = this.resource.getContext(\"2d\"));\n  }\n}\nCanvasSource.extension = ExtensionType.TextureSource;\n\nexport { CanvasSource };\n\n", "\"use strict\";\nclass BindGroup {\n  /**\n   * Create a new instance eof the Bind Group.\n   * @param resources - The resources that are bound together for use by a shader.\n   */\n  constructor(resources) {\n    /** The resources that are bound together for use by a shader. */\n    this.resources = /* @__PURE__ */ Object.create(null);\n    this._dirty = true;\n    let index = 0;\n    for (const i in resources) {\n      const resource = resources[i];\n      this.setResource(resource, index++);\n    }\n    this._updateKey();\n  }\n  /**\n   * Updates the key if its flagged as dirty. This is used internally to\n   * match this bind group to a WebGPU BindGroup.\n   * @internal\n   * @ignore\n   */\n  _updateKey() {\n    if (!this._dirty)\n      return;\n    this._dirty = false;\n    const keyParts = [];\n    let index = 0;\n    for (const i in this.resources) {\n      keyParts[index++] = this.resources[i]._resourceId;\n    }\n    this._key = keyParts.join(\"|\");\n  }\n  /**\n   * Set a resource at a given index. this function will\n   * ensure that listeners will be removed from the current resource\n   * and added to the new resource.\n   * @param resource - The resource to set.\n   * @param index - The index to set the resource at.\n   */\n  setResource(resource, index) {\n    const currentResource = this.resources[index];\n    if (resource === currentResource)\n      return;\n    if (currentResource) {\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    resource.on?.(\"change\", this.onResourceChange, this);\n    this.resources[index] = resource;\n    this._dirty = true;\n  }\n  /**\n   * Returns the resource at the current specified index.\n   * @param index - The index of the resource to get.\n   * @returns - The resource at the specified index.\n   */\n  getResource(index) {\n    return this.resources[index];\n  }\n  /**\n   * Used internally to 'touch' each resource, to ensure that the GC\n   * knows that all resources in this bind group are still being used.\n   * @param tick - The current tick.\n   * @internal\n   * @ignore\n   */\n  _touch(tick) {\n    const resources = this.resources;\n    for (const i in resources) {\n      resources[i]._touched = tick;\n    }\n  }\n  /** Destroys this bind group and removes all listeners. */\n  destroy() {\n    const resources = this.resources;\n    for (const i in resources) {\n      const resource = resources[i];\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    this.resources = null;\n  }\n  onResourceChange(resource) {\n    this._dirty = true;\n    if (resource.destroyed) {\n      const resources = this.resources;\n      for (const i in resources) {\n        if (resources[i] === resource) {\n          resources[i] = null;\n        }\n      }\n    } else {\n      this._updateKey();\n    }\n  }\n}\n\nexport { BindGroup };\n\n", "import { DOMAdapter } from '../../../../../environment/adapter.mjs';\n\n\"use strict\";\nlet context;\nfunction getTestContext() {\n  if (!context || context?.isContextLost()) {\n    const canvas = DOMAdapter.get().createCanvas();\n    context = canvas.getContext(\"webgl\", {});\n  }\n  return context;\n}\n\nexport { getTestContext };\n\n", "\"use strict\";\nconst fragTemplate = [\n  \"precision mediump float;\",\n  \"void main(void){\",\n  \"float test = 0.1;\",\n  \"%forloop%\",\n  \"gl_FragColor = vec4(0.0);\",\n  \"}\"\n].join(\"\\n\");\nfunction generateIfTestSrc(maxIfs) {\n  let src = \"\";\n  for (let i = 0; i < maxIfs; ++i) {\n    if (i > 0) {\n      src += \"\\nelse \";\n    }\n    if (i < maxIfs - 1) {\n      src += `if(test == ${i}.0){}`;\n    }\n  }\n  return src;\n}\nfunction checkMaxIfStatementsInShader(maxIfs, gl) {\n  if (maxIfs === 0) {\n    throw new Error(\"Invalid value of `0` passed to `checkMaxIfStatementsInShader`\");\n  }\n  const shader = gl.createShader(gl.FRAGMENT_SHADER);\n  try {\n    while (true) {\n      const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n      gl.shaderSource(shader, fragmentSrc);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        maxIfs = maxIfs / 2 | 0;\n      } else {\n        break;\n      }\n    }\n  } finally {\n    gl.deleteShader(shader);\n  }\n  return maxIfs;\n}\n\nexport { checkMaxIfStatementsInShader };\n\n", "import { getTestContext } from '../../../renderers/gl/shader/program/getTestContext.mjs';\nimport { checkMaxIfStatementsInShader } from './checkMaxIfStatementsInShader.mjs';\n\n\"use strict\";\nlet maxTexturesPerBatchCache = null;\nfunction getMaxTexturesPerBatch() {\n  if (maxTexturesPerBatchCache)\n    return maxTexturesPerBatchCache;\n  const gl = getTestContext();\n  maxTexturesPerBatchCache = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  maxTexturesPerBatchCache = checkMaxIfStatementsInShader(\n    maxTexturesPerBatchCache,\n    gl\n  );\n  gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n  return maxTexturesPerBatchCache;\n}\n\nexport { getMaxTexturesPerBatch };\n\n", "\"use strict\";\nclass ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n    this.size = this.rawBinaryData.byteLength;\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    if (!this._int8View) {\n      this._int8View = new Int8Array(this.rawBinaryData);\n    }\n    return this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    if (!this._uint8View) {\n      this._uint8View = new Uint8Array(this.rawBinaryData);\n    }\n    return this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    if (!this._int16View) {\n      this._int16View = new Int16Array(this.rawBinaryData);\n    }\n    return this._int16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    if (!this._int32View) {\n      this._int32View = new Int32Array(this.rawBinaryData);\n    }\n    return this._int32View;\n  }\n  /** View on the raw binary data as a `Float64Array`. */\n  get float64View() {\n    if (!this._float64Array) {\n      this._float64Array = new Float64Array(this.rawBinaryData);\n    }\n    return this._float64Array;\n  }\n  /** View on the raw binary data as a `BigUint64Array`. */\n  get bigUint64View() {\n    if (!this._bigUint64Array) {\n      this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n    }\n    return this._bigUint64Array;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null;\n    this._int8View = null;\n    this._uint8View = null;\n    this._int16View = null;\n    this.uint16View = null;\n    this._int32View = null;\n    this.uint32View = null;\n    this.float32View = null;\n  }\n  /**\n   * Returns the size of the given type in bytes.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *   `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - size of the type in bytes\n   */\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\n\nexport { ViewableBuffer };\n\n", "\"use strict\";\nfunction fastCopy(sourceBuffer, destinationBuffer) {\n  const lengthDouble = sourceBuffer.byteLength / 8 | 0;\n  const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n  const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n  destinationFloat64View.set(sourceFloat64View);\n  const remainingBytes = sourceBuffer.byteLength - lengthDouble * 8;\n  if (remainingBytes > 0) {\n    const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n    const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n    destinationUint8View.set(sourceUint8View);\n  }\n}\n\nexport { fastCopy };\n\n", "\"use strict\";\nconst BLEND_TO_NPM = {\n  normal: \"normal-npm\",\n  add: \"add-npm\",\n  screen: \"screen-npm\"\n};\nvar STENCIL_MODES = /* @__PURE__ */ ((STENCIL_MODES2) => {\n  STENCIL_MODES2[STENCIL_MODES2[\"DISABLED\"] = 0] = \"DISABLED\";\n  STENCIL_MODES2[STENCIL_MODES2[\"RENDERING_MASK_ADD\"] = 1] = \"RENDERING_MASK_ADD\";\n  STENCIL_MODES2[STENCIL_MODES2[\"MASK_ACTIVE\"] = 2] = \"MASK_ACTIVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"RENDERING_MASK_REMOVE\"] = 3] = \"RENDERING_MASK_REMOVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"NONE\"] = 4] = \"NONE\";\n  return STENCIL_MODES2;\n})(STENCIL_MODES || {});\n\nexport { BLEND_TO_NPM, STENCIL_MODES };\n\n", "import { BLEND_TO_NPM } from './const.mjs';\n\n\"use strict\";\nfunction getAdjustedBlendModeBlend(blendMode, textureSource) {\n  if (textureSource.alphaMode === \"no-premultiply-alpha\") {\n    return BLEND_TO_NPM[blendMode] || blendMode;\n  }\n  return blendMode;\n}\n\nexport { getAdjustedBlendModeBlend };\n\n", "\"use strict\";\nclass BatchTextureArray {\n  constructor() {\n    /** Respective locations for textures. */\n    this.ids = /* @__PURE__ */ Object.create(null);\n    this.textures = [];\n    this.count = 0;\n  }\n  /** Clear the textures and their locations. */\n  clear() {\n    for (let i = 0; i < this.count; i++) {\n      const t = this.textures[i];\n      this.textures[i] = null;\n      this.ids[t.uid] = null;\n    }\n    this.count = 0;\n  }\n}\n\nexport { BatchTextureArray };\n\n", "import { uid } from '../../../utils/data/uid.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { fastCopy } from '../../renderers/shared/buffer/utils/fastCopy.mjs';\nimport { getAdjustedBlendModeBlend } from '../../renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { getMaxTexturesPerBatch } from '../gl/utils/maxRecommendedTextures.mjs';\nimport { BatchTextureArray } from './BatchTextureArray.mjs';\n\n\"use strict\";\nclass Batch {\n  constructor() {\n    this.renderPipeId = \"batch\";\n    this.action = \"startBatch\";\n    // TODO - eventually this could be useful for flagging batches as dirty and then only rebuilding those ones\n    // public elementStart = 0;\n    // public elementSize = 0;\n    // for drawing..\n    this.start = 0;\n    this.size = 0;\n    this.textures = new BatchTextureArray();\n    this.blendMode = \"normal\";\n    this.canBundle = true;\n  }\n  destroy() {\n    this.textures = null;\n    this.gpuBindGroup = null;\n    this.bindGroup = null;\n    this.batcher = null;\n  }\n}\nconst batchPool = [];\nlet batchPoolIndex = 0;\nfunction getBatchFromPool() {\n  return batchPoolIndex > 0 ? batchPool[--batchPoolIndex] : new Batch();\n}\nfunction returnBatchToPool(batch) {\n  batchPool[batchPoolIndex++] = batch;\n}\nlet BATCH_TICK = 0;\nconst _Batcher = class _Batcher {\n  constructor(options = {}) {\n    /** unique id for this batcher */\n    this.uid = uid(\"batcher\");\n    /** Indicates whether the batch data has been modified and needs updating. */\n    this.dirty = true;\n    /** The current index of the batch being processed. */\n    this.batchIndex = 0;\n    /** An array of all batches created during the current rendering process. */\n    this.batches = [];\n    this._elements = [];\n    _Batcher.defaultOptions.maxTextures = _Batcher.defaultOptions.maxTextures ?? getMaxTexturesPerBatch();\n    options = { ..._Batcher.defaultOptions, ...options };\n    const { maxTextures, attributesInitialSize, indicesInitialSize } = options;\n    this.attributeBuffer = new ViewableBuffer(attributesInitialSize * 4);\n    this.indexBuffer = new Uint16Array(indicesInitialSize);\n    this.maxTextures = maxTextures;\n  }\n  begin() {\n    this.elementSize = 0;\n    this.elementStart = 0;\n    this.indexSize = 0;\n    this.attributeSize = 0;\n    for (let i = 0; i < this.batchIndex; i++) {\n      returnBatchToPool(this.batches[i]);\n    }\n    this.batchIndex = 0;\n    this._batchIndexStart = 0;\n    this._batchIndexSize = 0;\n    this.dirty = true;\n  }\n  add(batchableObject) {\n    this._elements[this.elementSize++] = batchableObject;\n    batchableObject._indexStart = this.indexSize;\n    batchableObject._attributeStart = this.attributeSize;\n    batchableObject._batcher = this;\n    this.indexSize += batchableObject.indexSize;\n    this.attributeSize += batchableObject.attributeSize * this.vertexSize;\n  }\n  checkAndUpdateTexture(batchableObject, texture) {\n    const textureId = batchableObject._batch.textures.ids[texture._source.uid];\n    if (!textureId && textureId !== 0)\n      return false;\n    batchableObject._textureId = textureId;\n    batchableObject.texture = texture;\n    return true;\n  }\n  updateElement(batchableObject) {\n    this.dirty = true;\n    const attributeBuffer = this.attributeBuffer;\n    if (batchableObject.packAsQuad) {\n      this.packQuadAttributes(\n        batchableObject,\n        attributeBuffer.float32View,\n        attributeBuffer.uint32View,\n        batchableObject._attributeStart,\n        batchableObject._textureId\n      );\n    } else {\n      this.packAttributes(\n        batchableObject,\n        attributeBuffer.float32View,\n        attributeBuffer.uint32View,\n        batchableObject._attributeStart,\n        batchableObject._textureId\n      );\n    }\n  }\n  /**\n   * breaks the batcher. This happens when a batch gets too big,\n   * or we need to switch to a different type of rendering (a filter for example)\n   * @param instructionSet\n   */\n  break(instructionSet) {\n    const elements = this._elements;\n    if (!elements[this.elementStart])\n      return;\n    let batch = getBatchFromPool();\n    let textureBatch = batch.textures;\n    textureBatch.clear();\n    const firstElement = elements[this.elementStart];\n    let blendMode = getAdjustedBlendModeBlend(firstElement.blendMode, firstElement.texture._source);\n    if (this.attributeSize * 4 > this.attributeBuffer.size) {\n      this._resizeAttributeBuffer(this.attributeSize * 4);\n    }\n    if (this.indexSize > this.indexBuffer.length) {\n      this._resizeIndexBuffer(this.indexSize);\n    }\n    const f32 = this.attributeBuffer.float32View;\n    const u32 = this.attributeBuffer.uint32View;\n    const indexBuffer = this.indexBuffer;\n    let size = this._batchIndexSize;\n    let start = this._batchIndexStart;\n    let action = \"startBatch\";\n    const maxTextures = this.maxTextures;\n    for (let i = this.elementStart; i < this.elementSize; ++i) {\n      const element = elements[i];\n      elements[i] = null;\n      const texture = element.texture;\n      const source = texture._source;\n      const adjustedBlendMode = getAdjustedBlendModeBlend(element.blendMode, source);\n      const breakRequired = blendMode !== adjustedBlendMode;\n      if (source._batchTick === BATCH_TICK && !breakRequired) {\n        element._textureId = source._textureBindLocation;\n        size += element.indexSize;\n        if (element.packAsQuad) {\n          this.packQuadAttributes(\n            element,\n            f32,\n            u32,\n            element._attributeStart,\n            element._textureId\n          );\n          this.packQuadIndex(\n            indexBuffer,\n            element._indexStart,\n            element._attributeStart / this.vertexSize\n          );\n        } else {\n          this.packAttributes(\n            element,\n            f32,\n            u32,\n            element._attributeStart,\n            element._textureId\n          );\n          this.packIndex(\n            element,\n            indexBuffer,\n            element._indexStart,\n            element._attributeStart / this.vertexSize\n          );\n        }\n        element._batch = batch;\n        continue;\n      }\n      source._batchTick = BATCH_TICK;\n      if (textureBatch.count >= maxTextures || breakRequired) {\n        this._finishBatch(\n          batch,\n          start,\n          size - start,\n          textureBatch,\n          blendMode,\n          instructionSet,\n          action\n        );\n        action = \"renderBatch\";\n        start = size;\n        blendMode = adjustedBlendMode;\n        batch = getBatchFromPool();\n        textureBatch = batch.textures;\n        textureBatch.clear();\n        ++BATCH_TICK;\n      }\n      element._textureId = source._textureBindLocation = textureBatch.count;\n      textureBatch.ids[source.uid] = textureBatch.count;\n      textureBatch.textures[textureBatch.count++] = source;\n      element._batch = batch;\n      size += element.indexSize;\n      if (element.packAsQuad) {\n        this.packQuadAttributes(\n          element,\n          f32,\n          u32,\n          element._attributeStart,\n          element._textureId\n        );\n        this.packQuadIndex(\n          indexBuffer,\n          element._indexStart,\n          element._attributeStart / this.vertexSize\n        );\n      } else {\n        this.packAttributes(\n          element,\n          f32,\n          u32,\n          element._attributeStart,\n          element._textureId\n        );\n        this.packIndex(\n          element,\n          indexBuffer,\n          element._indexStart,\n          element._attributeStart / this.vertexSize\n        );\n      }\n    }\n    if (textureBatch.count > 0) {\n      this._finishBatch(\n        batch,\n        start,\n        size - start,\n        textureBatch,\n        blendMode,\n        instructionSet,\n        action\n      );\n      start = size;\n      ++BATCH_TICK;\n    }\n    this.elementStart = this.elementSize;\n    this._batchIndexStart = start;\n    this._batchIndexSize = size;\n  }\n  _finishBatch(batch, indexStart, indexSize, textureBatch, blendMode, instructionSet, action) {\n    batch.gpuBindGroup = null;\n    batch.bindGroup = null;\n    batch.action = action;\n    batch.batcher = this;\n    batch.textures = textureBatch;\n    batch.blendMode = blendMode;\n    batch.start = indexStart;\n    batch.size = indexSize;\n    ++BATCH_TICK;\n    this.batches[this.batchIndex++] = batch;\n    instructionSet.add(batch);\n  }\n  finish(instructionSet) {\n    this.break(instructionSet);\n  }\n  /**\n   * Resizes the attribute buffer to the given size (1 = 1 float32)\n   * @param size - the size in vertices to ensure (not bytes!)\n   */\n  ensureAttributeBuffer(size) {\n    if (size * 4 <= this.attributeBuffer.size)\n      return;\n    this._resizeAttributeBuffer(size * 4);\n  }\n  /**\n   * Resizes the index buffer to the given size (1 = 1 float32)\n   * @param size - the size in vertices to ensure (not bytes!)\n   */\n  ensureIndexBuffer(size) {\n    if (size <= this.indexBuffer.length)\n      return;\n    this._resizeIndexBuffer(size);\n  }\n  _resizeAttributeBuffer(size) {\n    const newSize = Math.max(size, this.attributeBuffer.size * 2);\n    const newArrayBuffer = new ViewableBuffer(newSize);\n    fastCopy(this.attributeBuffer.rawBinaryData, newArrayBuffer.rawBinaryData);\n    this.attributeBuffer = newArrayBuffer;\n  }\n  _resizeIndexBuffer(size) {\n    const indexBuffer = this.indexBuffer;\n    let newSize = Math.max(size, indexBuffer.length * 1.5);\n    newSize += newSize % 2;\n    const newIndexBuffer = newSize > 65535 ? new Uint32Array(newSize) : new Uint16Array(newSize);\n    if (newIndexBuffer.BYTES_PER_ELEMENT !== indexBuffer.BYTES_PER_ELEMENT) {\n      for (let i = 0; i < indexBuffer.length; i++) {\n        newIndexBuffer[i] = indexBuffer[i];\n      }\n    } else {\n      fastCopy(indexBuffer.buffer, newIndexBuffer.buffer);\n    }\n    this.indexBuffer = newIndexBuffer;\n  }\n  packQuadIndex(indexBuffer, index, indicesOffset) {\n    indexBuffer[index] = indicesOffset + 0;\n    indexBuffer[index + 1] = indicesOffset + 1;\n    indexBuffer[index + 2] = indicesOffset + 2;\n    indexBuffer[index + 3] = indicesOffset + 0;\n    indexBuffer[index + 4] = indicesOffset + 2;\n    indexBuffer[index + 5] = indicesOffset + 3;\n  }\n  packIndex(element, indexBuffer, index, indicesOffset) {\n    const indices = element.indices;\n    const size = element.indexSize;\n    const indexOffset = element.indexOffset;\n    const attributeOffset = element.attributeOffset;\n    for (let i = 0; i < size; i++) {\n      indexBuffer[index++] = indicesOffset + indices[i + indexOffset] - attributeOffset;\n    }\n  }\n  destroy() {\n    for (let i = 0; i < this.batches.length; i++) {\n      returnBatchToPool(this.batches[i]);\n    }\n    this.batches = null;\n    for (let i = 0; i < this._elements.length; i++) {\n      this._elements[i]._batch = null;\n    }\n    this._elements = null;\n    this.indexBuffer = null;\n    this.attributeBuffer.destroy();\n    this.attributeBuffer = null;\n  }\n};\n_Batcher.defaultOptions = {\n  maxTextures: null,\n  attributesInitialSize: 4,\n  indicesInitialSize: 6\n};\nlet Batcher = _Batcher;\n\nexport { Batch, Batcher };\n\n", "\"use strict\";\nvar BufferUsage = /* @__PURE__ */ ((BufferUsage2) => {\n  BufferUsage2[BufferUsage2[\"MAP_READ\"] = 1] = \"MAP_READ\";\n  BufferUsage2[BufferUsage2[\"MAP_WRITE\"] = 2] = \"MAP_WRITE\";\n  BufferUsage2[BufferUsage2[\"COPY_SRC\"] = 4] = \"COPY_SRC\";\n  BufferUsage2[BufferUsage2[\"COPY_DST\"] = 8] = \"COPY_DST\";\n  BufferUsage2[BufferUsage2[\"INDEX\"] = 16] = \"INDEX\";\n  BufferUsage2[BufferUsage2[\"VERTEX\"] = 32] = \"VERTEX\";\n  BufferUsage2[BufferUsage2[\"UNIFORM\"] = 64] = \"UNIFORM\";\n  BufferUsage2[BufferUsage2[\"STORAGE\"] = 128] = \"STORAGE\";\n  BufferUsage2[BufferUsage2[\"INDIRECT\"] = 256] = \"INDIRECT\";\n  BufferUsage2[BufferUsage2[\"QUERY_RESOLVE\"] = 512] = \"QUERY_RESOLVE\";\n  BufferUsage2[BufferUsage2[\"STATIC\"] = 1024] = \"STATIC\";\n  return BufferUsage2;\n})(BufferUsage || {});\n\nexport { BufferUsage };\n\n", "import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { BufferUsage } from './const.mjs';\n\n\"use strict\";\nclass Buffer extends EventEmitter {\n  /**\n   * Creates a new Buffer with the given options\n   * @param options - the options for the buffer\n   */\n  constructor(options) {\n    let { data, size } = options;\n    const { usage, label, shrinkToFit } = options;\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * emits when the underlying buffer data has been updated. letting the renderer know\n     * that it needs to update the buffer on the GPU\n     * @event update\n     */\n    /**\n     * emits when the buffer is destroyed. letting the renderer know that it needs to destroy the buffer on the GPU\n     * @event destroy\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"buffer\";\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._updateID = 1;\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    this.shrinkToFit = true;\n    /**\n     * Has the buffer been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    if (data instanceof Array) {\n      data = new Float32Array(data);\n    }\n    this._data = data;\n    size = size ?? data?.byteLength;\n    const mappedAtCreation = !!data;\n    this.descriptor = {\n      size,\n      usage,\n      mappedAtCreation,\n      label\n    };\n    this.shrinkToFit = shrinkToFit ?? true;\n  }\n  /** the data in the buffer */\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    this.setDataWithSize(value, value.length, true);\n  }\n  /** whether the buffer is static or not */\n  get static() {\n    return !!(this.descriptor.usage & BufferUsage.STATIC);\n  }\n  set static(value) {\n    if (value) {\n      this.descriptor.usage |= BufferUsage.STATIC;\n    } else {\n      this.descriptor.usage &= ~BufferUsage.STATIC;\n    }\n  }\n  /**\n   * Sets the data in the buffer to the given value. This will immediately update the buffer on the GPU.\n   * If you only want to update a subset of the buffer, you can pass in the size of the data.\n   * @param value - the data to set\n   * @param size - the size of the data in bytes\n   * @param syncGPU - should the buffer be updated on the GPU immediately?\n   */\n  setDataWithSize(value, size, syncGPU) {\n    this._updateID++;\n    this._updateSize = size * value.BYTES_PER_ELEMENT;\n    if (this._data === value) {\n      if (syncGPU)\n        this.emit(\"update\", this);\n      return;\n    }\n    const oldData = this._data;\n    this._data = value;\n    if (oldData.length !== value.length) {\n      if (!this.shrinkToFit && value.byteLength < oldData.byteLength) {\n        if (syncGPU)\n          this.emit(\"update\", this);\n      } else {\n        this.descriptor.size = value.byteLength;\n        this._resourceId = uid(\"resource\");\n        this.emit(\"change\", this);\n      }\n      return;\n    }\n    if (syncGPU)\n      this.emit(\"update\", this);\n  }\n  /**\n   * updates the buffer on the GPU to reflect the data in the buffer.\n   * By default it will update the entire buffer. If you only want to update a subset of the buffer,\n   * you can pass in the size of the buffer to update.\n   * @param sizeInBytes - the new size of the buffer in bytes\n   */\n  update(sizeInBytes) {\n    this._updateSize = sizeInBytes ?? this._updateSize;\n    this._updateID++;\n    this.emit(\"update\", this);\n  }\n  /** Destroys the buffer */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this._data = null;\n    this.descriptor = null;\n    this.removeAllListeners();\n  }\n}\n\nexport { Buffer };\n\n", "import { Buffer } from '../../buffer/Buffer.mjs';\nimport { BufferUsage } from '../../buffer/const.mjs';\n\n\"use strict\";\nfunction ensureIsBuffer(buffer, index) {\n  if (!(buffer instanceof Buffer)) {\n    let usage = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n    if (buffer instanceof Array) {\n      if (index) {\n        buffer = new Uint32Array(buffer);\n        usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n      } else {\n        buffer = new Float32Array(buffer);\n        usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n      }\n    }\n    buffer = new Buffer({\n      data: buffer,\n      label: index ? \"index-mesh-buffer\" : \"vertex-mesh-buffer\",\n      usage\n    });\n  }\n  return buffer;\n}\n\nexport { ensureIsBuffer };\n\n", "\"use strict\";\nfunction getGeometryBounds(geometry, attributeId, bounds) {\n  const attribute = geometry.getAttribute(attributeId);\n  if (!attribute) {\n    bounds.minX = 0;\n    bounds.minY = 0;\n    bounds.maxX = 0;\n    bounds.maxY = 0;\n    return bounds;\n  }\n  const data = attribute.buffer.data;\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  const byteSize = data.BYTES_PER_ELEMENT;\n  const offset = (attribute.offset || 0) / byteSize;\n  const stride = (attribute.stride || 2 * 4) / byteSize;\n  for (let i = offset; i < data.length; i += stride) {\n    const x = data[i];\n    const y = data[i + 1];\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n  }\n  bounds.minX = minX;\n  bounds.minY = minY;\n  bounds.maxX = maxX;\n  bounds.maxY = maxY;\n  return bounds;\n}\n\nexport { getGeometryBounds };\n\n", "import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer.mjs';\nimport { getGeometryBounds } from './utils/getGeometryBounds.mjs';\n\n\"use strict\";\nfunction ensureIsAttribute(attribute) {\n  if (attribute instanceof Buffer || Array.isArray(attribute) || attribute.BYTES_PER_ELEMENT) {\n    attribute = {\n      buffer: attribute\n    };\n  }\n  attribute.buffer = ensureIsBuffer(attribute.buffer, false);\n  return attribute;\n}\nclass Geometry extends EventEmitter {\n  /**\n   * Create a new instance of a geometry\n   * @param options - The options for the geometry.\n   */\n  constructor(options) {\n    const { attributes, indexBuffer, topology } = options;\n    super();\n    /** The unique id of the geometry. */\n    this.uid = uid(\"geometry\");\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /** the instance count of the geometry to draw */\n    this.instanceCount = 1;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n    this.attributes = attributes;\n    this.buffers = [];\n    this.instanceCount = options.instanceCount || 1;\n    for (const i in attributes) {\n      const attribute = attributes[i] = ensureIsAttribute(attributes[i]);\n      const bufferIndex = this.buffers.indexOf(attribute.buffer);\n      if (bufferIndex === -1) {\n        this.buffers.push(attribute.buffer);\n        attribute.buffer.on(\"update\", this.onBufferUpdate, this);\n        attribute.buffer.on(\"change\", this.onBufferUpdate, this);\n      }\n    }\n    if (indexBuffer) {\n      this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n      this.buffers.push(this.indexBuffer);\n    }\n    this.topology = topology || \"triangle-list\";\n  }\n  onBufferUpdate() {\n    this._boundsDirty = true;\n    this.emit(\"update\", this);\n  }\n  /**\n   * Returns the requested attribute.\n   * @param id - The name of the attribute required\n   * @returns - The attribute requested.\n   */\n  getAttribute(id) {\n    return this.attributes[id];\n  }\n  /**\n   * Returns the index buffer\n   * @returns - The index buffer.\n   */\n  getIndex() {\n    return this.indexBuffer;\n  }\n  /**\n   * Returns the requested buffer.\n   * @param id - The name of the buffer required.\n   * @returns - The buffer requested.\n   */\n  getBuffer(id) {\n    return this.getAttribute(id).buffer;\n  }\n  /**\n   * Used to figure out how many vertices there are in this geometry\n   * @returns the number of vertices in the geometry\n   */\n  getSize() {\n    for (const i in this.attributes) {\n      const attribute = this.attributes[i];\n      const buffer = attribute.buffer;\n      return buffer.data.length / (attribute.stride / 4 || attribute.size);\n    }\n    return 0;\n  }\n  /** Returns the bounds of the geometry. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    this._boundsDirty = false;\n    return getGeometryBounds(this, \"aPosition\", this._bounds);\n  }\n  /**\n   * destroys the geometry.\n   * @param destroyBuffers - destroy the buffers associated with this geometry\n   */\n  destroy(destroyBuffers = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    if (destroyBuffers) {\n      this.buffers.forEach((buffer) => buffer.destroy());\n    }\n    this.attributes = null;\n    this.buffers = null;\n    this.indexBuffer = null;\n    this._bounds = null;\n  }\n}\n\nexport { Geometry };\n\n", "import { Buffer } from '../../renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../renderers/shared/geometry/Geometry.mjs';\n\n\"use strict\";\nconst placeHolderBufferData = new Float32Array(1);\nconst placeHolderIndexData = new Uint32Array(1);\nclass BatchGeometry extends Geometry {\n  constructor() {\n    const vertexSize = 6;\n    const attributeBuffer = new Buffer({\n      data: placeHolderBufferData,\n      label: \"attribute-batch-buffer\",\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n      shrinkToFit: false\n    });\n    const indexBuffer = new Buffer({\n      data: placeHolderIndexData,\n      label: \"index-batch-buffer\",\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n      // | BufferUsage.STATIC,\n      shrinkToFit: false\n    });\n    const stride = vertexSize * 4;\n    super({\n      attributes: {\n        aPosition: {\n          buffer: attributeBuffer,\n          format: \"float32x2\",\n          stride,\n          offset: 0\n        },\n        aUV: {\n          buffer: attributeBuffer,\n          format: \"float32x2\",\n          stride,\n          offset: 2 * 4\n        },\n        aColor: {\n          buffer: attributeBuffer,\n          format: \"unorm8x4\",\n          stride,\n          offset: 4 * 4\n        },\n        aTextureIdAndRound: {\n          buffer: attributeBuffer,\n          format: \"uint16x2\",\n          stride,\n          offset: 5 * 4\n        }\n      },\n      indexBuffer\n    });\n  }\n}\n\nexport { BatchGeometry };\n\n", "\"use strict\";\nconst idCounts = /* @__PURE__ */ Object.create(null);\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createIdFromString(value, groupId) {\n  let id = idHash[value];\n  if (id === void 0) {\n    if (idCounts[groupId] === void 0) {\n      idCounts[groupId] = 1;\n    }\n    idHash[value] = id = idCounts[groupId]++;\n  }\n  return id;\n}\n\nexport { createIdFromString };\n\n", "import { getTestContext } from './getTestContext.mjs';\n\n\"use strict\";\nlet maxFragmentPrecision;\nfunction getMaxFragmentPrecision() {\n  if (!maxFragmentPrecision) {\n    maxFragmentPrecision = \"mediump\";\n    const gl = getTestContext();\n    if (gl) {\n      if (gl.getShaderPrecisionFormat) {\n        const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n        maxFragmentPrecision = shaderFragment.precision ? \"highp\" : \"mediump\";\n      }\n    }\n  }\n  return maxFragmentPrecision;\n}\n\nexport { getMaxFragmentPrecision };\n\n", "\"use strict\";\nfunction addProgramDefines(src, isES300, isFragment) {\n  if (isES300)\n    return src;\n  if (isFragment) {\n    src = src.replace(\"out vec4 finalColor;\", \"\");\n    return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n  }\n  return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n\nexport { addProgramDefines };\n\n", "\"use strict\";\nfunction ensurePrecision(src, options, isFragment) {\n  const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n  if (src.substring(0, 9) !== \"precision\") {\n    let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n    if (precision === \"highp\" && maxSupportedPrecision !== \"highp\") {\n      precision = \"mediump\";\n    }\n    return `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== \"highp\" && src.substring(0, 15) === \"precision highp\") {\n    return src.replace(\"precision highp\", \"precision mediump\");\n  }\n  return src;\n}\n\nexport { ensurePrecision };\n\n", "\"use strict\";\nfunction insertVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return `#version 300 es\n${src}`;\n}\n\nexport { insertVersion };\n\n", "\"use strict\";\nconst fragmentNameCache = {};\nconst VertexNameCache = {};\nfunction setProgramName(src, { name = `pixi-program` }, isFragment = true) {\n  name = name.replace(/\\s+/g, \"-\");\n  name += isFragment ? \"-fragment\" : \"-vertex\";\n  const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n  if (nameCache[name]) {\n    nameCache[name]++;\n    name += `-${nameCache[name]}`;\n  } else {\n    nameCache[name] = 1;\n  }\n  if (src.indexOf(\"#define SHADER_NAME\") !== -1)\n    return src;\n  const shaderName = `#define SHADER_NAME ${name}`;\n  return `${shaderName}\n${src}`;\n}\n\nexport { setProgramName };\n\n", "\"use strict\";\nfunction stripVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return src.replace(\"#version 300 es\", \"\");\n}\n\nexport { stripVersion };\n\n", "import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { getMaxFragmentPrecision } from './program/getMaxFragmentPrecision.mjs';\nimport { addProgramDefines } from './program/preprocessors/addProgramDefines.mjs';\nimport { ensurePrecision } from './program/preprocessors/ensurePrecision.mjs';\nimport { insertVersion } from './program/preprocessors/insertVersion.mjs';\nimport { setProgramName } from './program/preprocessors/setProgramName.mjs';\nimport { stripVersion } from './program/preprocessors/stripVersion.mjs';\n\n\"use strict\";\nconst processes = {\n  // strips any version headers..\n  stripVersion,\n  // adds precision string if not already present\n  ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines,\n  // add the program name to the shader\n  setProgramName,\n  // add the version string to the shader header\n  insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf(\"#version 300 es\") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: \"highp\",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this._key = createIdFromString(`${this.vertex}:${this.fragment}`, \"gl-program\");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: \"highp\",\n  preferredFragmentPrecision: \"mediump\"\n};\nlet GlProgram = _GlProgram;\n\nexport { GlProgram };\n\n", "\"use strict\";\nconst attributeFormatData = {\n  uint8x2: { size: 2, stride: 2, normalised: false },\n  uint8x4: { size: 4, stride: 4, normalised: false },\n  sint8x2: { size: 2, stride: 2, normalised: false },\n  sint8x4: { size: 4, stride: 4, normalised: false },\n  unorm8x2: { size: 2, stride: 2, normalised: true },\n  unorm8x4: { size: 4, stride: 4, normalised: true },\n  snorm8x2: { size: 2, stride: 2, normalised: true },\n  snorm8x4: { size: 4, stride: 4, normalised: true },\n  uint16x2: { size: 2, stride: 4, normalised: false },\n  uint16x4: { size: 4, stride: 8, normalised: false },\n  sint16x2: { size: 2, stride: 4, normalised: false },\n  sint16x4: { size: 4, stride: 8, normalised: false },\n  unorm16x2: { size: 2, stride: 4, normalised: true },\n  unorm16x4: { size: 4, stride: 8, normalised: true },\n  snorm16x2: { size: 2, stride: 4, normalised: true },\n  snorm16x4: { size: 4, stride: 8, normalised: true },\n  float16x2: { size: 2, stride: 4, normalised: false },\n  float16x4: { size: 4, stride: 8, normalised: false },\n  float32: { size: 1, stride: 4, normalised: false },\n  float32x2: { size: 2, stride: 8, normalised: false },\n  float32x3: { size: 3, stride: 12, normalised: false },\n  float32x4: { size: 4, stride: 16, normalised: false },\n  uint32: { size: 1, stride: 4, normalised: false },\n  uint32x2: { size: 2, stride: 8, normalised: false },\n  uint32x3: { size: 3, stride: 12, normalised: false },\n  uint32x4: { size: 4, stride: 16, normalised: false },\n  sint32: { size: 1, stride: 4, normalised: false },\n  sint32x2: { size: 2, stride: 8, normalised: false },\n  sint32x3: { size: 3, stride: 12, normalised: false },\n  sint32x4: { size: 4, stride: 16, normalised: false }\n};\nfunction getAttributeInfoFromFormat(format) {\n  return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n\nexport { getAttributeInfoFromFormat };\n\n", "import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: \"float32\",\n  \"vec2<f32>\": \"float32x2\",\n  \"vec3<f32>\": \"float32x3\",\n  \"vec4<f32>\": \"float32x4\",\n  vec2f: \"float32x2\",\n  vec3f: \"float32x3\",\n  vec4f: \"float32x4\",\n  i32: \"sint32\",\n  \"vec2<i32>\": \"sint32x2\",\n  \"vec3<i32>\": \"sint32x3\",\n  \"vec4<i32>\": \"sint32x4\",\n  u32: \"uint32\",\n  \"vec2<u32>\": \"uint32x2\",\n  \"vec3<u32>\": \"uint32x3\",\n  \"vec4<u32>\": \"uint32x4\",\n  bool: \"uint32\",\n  \"vec2<bool>\": \"uint32x2\",\n  \"vec3<bool>\": \"uint32x3\",\n  \"vec4<bool>\": \"uint32x4\"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf(\"->\", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? \"float32\";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: getAttributeInfoFromFormat(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\nexport { extractAttributesFromGpuProgram };\n\n", "\"use strict\";\nfunction extractStructAndGroups(wgsl) {\n  const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n  const groupPattern = /@group\\((\\d+)\\)/;\n  const bindingPattern = /@binding\\((\\d+)\\)/;\n  const namePattern = /var(<[^>]+>)? (\\w+)/;\n  const typePattern = /:\\s*(\\w+)/;\n  const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n  const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n  const structName = /struct\\s+(\\w+)/;\n  const groups = wgsl.match(linePattern)?.map((item) => ({\n    group: parseInt(item.match(groupPattern)[1], 10),\n    binding: parseInt(item.match(bindingPattern)[1], 10),\n    name: item.match(namePattern)[2],\n    isUniform: item.match(namePattern)[1] === \"<uniform>\",\n    type: item.match(typePattern)[1]\n  }));\n  if (!groups) {\n    return {\n      groups: [],\n      structs: []\n    };\n  }\n  const structs = wgsl.match(structPattern)?.map((struct) => {\n    const name = struct.match(structName)[1];\n    const members = struct.match(structMemberPattern).reduce((acc, member) => {\n      const [name2, type] = member.split(\":\");\n      acc[name2.trim()] = type.trim();\n      return acc;\n    }, {});\n    if (!members) {\n      return null;\n    }\n    return { name, members };\n  }).filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n  return {\n    groups,\n    structs\n  };\n}\n\nexport { extractStructAndGroups };\n\n", "\"use strict\";\nvar ShaderStage = /* @__PURE__ */ ((ShaderStage2) => {\n  ShaderStage2[ShaderStage2[\"VERTEX\"] = 1] = \"VERTEX\";\n  ShaderStage2[ShaderStage2[\"FRAGMENT\"] = 2] = \"FRAGMENT\";\n  ShaderStage2[ShaderStage2[\"COMPUTE\"] = 4] = \"COMPUTE\";\n  return ShaderStage2;\n})(ShaderStage || {});\n\nexport { ShaderStage };\n\n", "import { ShaderStage } from '../../../shared/shader/const.mjs';\n\n\"use strict\";\nfunction generateGpuLayoutGroups({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n        buffer: {\n          type: \"uniform\"\n        }\n      });\n    } else if (group.type === \"sampler\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        sampler: {\n          type: \"filtering\"\n        }\n      });\n    } else if (group.type === \"texture_2d\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: \"float\",\n          viewDimension: \"2d\",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\n\nexport { generateGpuLayoutGroups };\n\n", "\"use strict\";\nfunction generateLayoutHash({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = {};\n    }\n    layout[group.group][group.name] = group.binding;\n  }\n  return layout;\n}\n\nexport { generateLayoutHash };\n\n", "\"use strict\";\nfunction removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups) {\n  const structNameSet = /* @__PURE__ */ new Set();\n  const dupeGroupKeySet = /* @__PURE__ */ new Set();\n  const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs].filter((struct) => {\n    if (structNameSet.has(struct.name)) {\n      return false;\n    }\n    structNameSet.add(struct.name);\n    return true;\n  });\n  const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups].filter((group) => {\n    const key = `${group.name}-${group.binding}`;\n    if (dupeGroupKeySet.has(key)) {\n      return false;\n    }\n    dupeGroupKeySet.add(key);\n    return true;\n  });\n  return { structs, groups };\n}\n\nexport { removeStructAndGroupDuplicates };\n\n", "import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { extractAttributesFromGpuProgram } from './utils/extractAttributesFromGpuProgram.mjs';\nimport { extractStructAndGroups } from './utils/extractStructAndGroups.mjs';\nimport { generateGpuLayoutGroups } from './utils/generateGpuLayoutGroups.mjs';\nimport { generateLayoutHash } from './utils/generateLayoutHash.mjs';\nimport { removeStructAndGroupDuplicates } from './utils/removeStructAndGroupDuplicates.mjs';\n\n\"use strict\";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /**\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /**\n     * @internal\n     * @ignore\n     */\n    this._attributeLocationsKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = createIdFromString(bigKey, \"program\");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n    }\n    return programCache[key];\n  }\n}\n\nexport { GpuProgram };\n\n", "import { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nfunction addBits(srcParts, parts, name) {\n  if (srcParts) {\n    for (const i in srcParts) {\n      const id = i.toLocaleLowerCase();\n      const part = parts[id];\n      if (part) {\n        let sanitisedPart = srcParts[i];\n        if (i === \"header\") {\n          sanitisedPart = sanitisedPart.replace(/@in\\s+[^;]+;\\s*/g, \"\").replace(/@out\\s+[^;]+;\\s*/g, \"\");\n        }\n        if (name) {\n          part.push(`//----${name}----//`);\n        }\n        part.push(sanitisedPart);\n      } else {\n        warn(`${i} placement hook does not exist in shader`);\n      }\n    }\n  }\n}\n\nexport { addBits };\n\n", "\"use strict\";\nconst findHooksRx = /\\{\\{(.*?)\\}\\}/g;\nfunction compileHooks(programSrc) {\n  const parts = {};\n  const partMatches = programSrc.match(findHooksRx)?.map((hook) => hook.replace(/[{()}]/g, \"\")) ?? [];\n  partMatches.forEach((hook) => {\n    parts[hook] = [];\n  });\n  return parts;\n}\n\nexport { compileHooks, findHooksRx };\n\n", "\"use strict\";\nfunction extractInputs(fragmentSource, out) {\n  let match;\n  const regex = /@in\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction compileInputs(fragments, template, sort = false) {\n  const results = [];\n  extractInputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractInputs(fragment.header, results);\n    }\n  });\n  const mainInput = results;\n  if (sort) {\n    mainInput.sort();\n  }\n  const finalString = mainInput.map((inValue, i) => `       @location(${i}) ${inValue},`).join(\"\\n\");\n  let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, \"\");\n  cleanedString = cleanedString.replace(\"{{in}}\", `\n${finalString}\n`);\n  return cleanedString;\n}\n\nexport { compileInputs };\n\n", "\"use strict\";\nfunction extractOutputs(fragmentSource, out) {\n  let match;\n  const regex = /@out\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction extractVariableName(value) {\n  const regex = /\\b(\\w+)\\s*:/g;\n  const match = regex.exec(value);\n  return match ? match[1] : \"\";\n}\nfunction stripVariable(value) {\n  const regex = /@.*?\\s+/g;\n  return value.replace(regex, \"\");\n}\nfunction compileOutputs(fragments, template) {\n  const results = [];\n  extractOutputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractOutputs(fragment.header, results);\n    }\n  });\n  let index = 0;\n  const mainStruct = results.sort().map((inValue) => {\n    if (inValue.indexOf(\"builtin\") > -1) {\n      return inValue;\n    }\n    return `@location(${index++}) ${inValue}`;\n  }).join(\",\\n\");\n  const mainStart = results.sort().map((inValue) => `       var ${stripVariable(inValue)};`).join(\"\\n\");\n  const mainEnd = `return VSOutput(\n                ${results.sort().map((inValue) => ` ${extractVariableName(inValue)}`).join(\",\\n\")});`;\n  let compiledCode = template.replace(/@out\\s+[^;]+;\\s*/g, \"\");\n  compiledCode = compiledCode.replace(\"{{struct}}\", `\n${mainStruct}\n`);\n  compiledCode = compiledCode.replace(\"{{start}}\", `\n${mainStart}\n`);\n  compiledCode = compiledCode.replace(\"{{return}}\", `\n${mainEnd}\n`);\n  return compiledCode;\n}\n\nexport { compileOutputs };\n\n", "\"use strict\";\nfunction injectBits(templateSrc, fragmentParts) {\n  let out = templateSrc;\n  for (const i in fragmentParts) {\n    const parts = fragmentParts[i];\n    const toInject = parts.join(\"\\n\");\n    if (toInject.length) {\n      out = out.replace(`{{${i}}}`, `//-----${i} START-----//\n${parts.join(\"\\n\")}\n//----${i} FINISH----//`);\n    } else {\n      out = out.replace(`{{${i}}}`, \"\");\n    }\n  }\n  return out;\n}\n\nexport { injectBits };\n\n", "import { addBits } from './utils/addBits.mjs';\nimport { compileHooks } from './utils/compileHooks.mjs';\nimport { compileInputs } from './utils/compileInputs.mjs';\nimport { compileOutputs } from './utils/compileOutputs.mjs';\nimport { injectBits } from './utils/injectBits.mjs';\n\n\"use strict\";\nconst cacheMap = /* @__PURE__ */ Object.create(null);\nconst bitCacheMap = /* @__PURE__ */ new Map();\nlet CACHE_UID = 0;\nfunction compileHighShader({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n  cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileHighShaderGl({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileInputsAndOutputs(template, bits) {\n  const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n  const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n  let compiledVertex = compileInputs(vertexFragments, template.vertex, true);\n  compiledVertex = compileOutputs(vertexFragments, compiledVertex);\n  const compiledFragment = compileInputs(fragmentFragments, template.fragment, true);\n  return {\n    vertex: compiledVertex,\n    fragment: compiledFragment\n  };\n}\nfunction generateCacheId(template, bits) {\n  return bits.map((highFragment) => {\n    if (!bitCacheMap.has(highFragment)) {\n      bitCacheMap.set(highFragment, CACHE_UID++);\n    }\n    return bitCacheMap.get(highFragment);\n  }).sort((a, b) => a - b).join(\"-\") + template.vertex + template.fragment;\n}\nfunction compileBits(vertex, fragment, bits) {\n  const vertexParts = compileHooks(vertex);\n  const fragmentParts = compileHooks(fragment);\n  bits.forEach((shaderBit) => {\n    addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n    addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n  });\n  return {\n    vertex: injectBits(vertex, vertexParts),\n    fragment: injectBits(fragment, fragmentParts)\n  };\n}\n\nexport { compileHighShader, compileHighShaderGl };\n\n", "\"use strict\";\nconst vertexGPUTemplate = (\n  /* wgsl */\n  `\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n`\n);\nconst fragmentGPUTemplate = (\n  /* wgsl */\n  `\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        var finalColor:vec4<f32> = outColor * vColor;\n\n        {{end}}\n\n        return finalColor;\n      };\n`\n);\nconst vertexGlTemplate = (\n  /* glsl */\n  `\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n        \n        {{start}}\n        \n        vColor = vec4(1.);\n        \n        {{main}}\n        \n        vUV = uv;\n        \n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n`\n);\nconst fragmentGlTemplate = (\n  /* glsl */\n  `\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n        \n        {{end}}\n    }\n`\n);\n\nexport { fragmentGPUTemplate, fragmentGlTemplate, vertexGPUTemplate, vertexGlTemplate };\n\n", "\"use strict\";\nconst globalUniformsBit = {\n  name: \"global-uniforms-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        `\n    )\n  }\n};\nconst globalUniformsUBOBitGl = {\n  name: \"global-uniforms-ubo-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform globalUniforms {\n            mat3 uProjectionMatrix;\n            mat3 uWorldTransformMatrix;\n            vec4 uWorldColorAlpha;\n            vec2 uResolution;\n          };\n        `\n    )\n  }\n};\nconst globalUniformsBitGl = {\n  name: \"global-uniforms-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        `\n    )\n  }\n};\n\nexport { globalUniformsBit, globalUniformsBitGl, globalUniformsUBOBitGl };\n\n", "import { GlProgram } from '../renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../renderers/gpu/shader/GpuProgram.mjs';\nimport { compileHighShader, compileHighShaderGl } from './compiler/compileHighShader.mjs';\nimport { fragmentGPUTemplate, vertexGPUTemplate, vertexGlTemplate, fragmentGlTemplate } from './defaultProgramTemplate.mjs';\nimport { globalUniformsBit, globalUniformsBitGl } from './shader-bits/globalUniformsBit.mjs';\n\n\"use strict\";\nfunction compileHighShaderGpuProgram({ bits, name }) {\n  const source = compileHighShader({\n    template: {\n      fragment: fragmentGPUTemplate,\n      vertex: vertexGPUTemplate\n    },\n    bits: [\n      globalUniformsBit,\n      ...bits\n    ]\n  });\n  return GpuProgram.from({\n    name,\n    vertex: {\n      source: source.vertex,\n      entryPoint: \"main\"\n    },\n    fragment: {\n      source: source.fragment,\n      entryPoint: \"main\"\n    }\n  });\n}\nfunction compileHighShaderGlProgram({ bits, name }) {\n  return new GlProgram({\n    name,\n    ...compileHighShaderGl({\n      template: {\n        vertex: vertexGlTemplate,\n        fragment: fragmentGlTemplate\n      },\n      bits: [\n        globalUniformsBitGl,\n        ...bits\n      ]\n    })\n  });\n}\n\nexport { compileHighShaderGlProgram, compileHighShaderGpuProgram };\n\n", "\"use strict\";\nconst colorBit = {\n  name: \"color-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            @in aColor: vec4<f32>;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\nconst colorBitGl = {\n  name: \"color-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            in vec4 aColor;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\n\nexport { colorBit, colorBitGl };\n\n", "\"use strict\";\nconst textureBatchBitGpuCache = {};\nfunction generateBindingSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push(\"@group(1) @binding(0) var textureSource1: texture_2d<f32>;\");\n    src.push(\"@group(1) @binding(1) var textureSampler1: sampler;\");\n  } else {\n    let bindingIndex = 0;\n    for (let i = 0; i < maxTextures; i++) {\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n    }\n  }\n  return src.join(\"\\n\");\n}\nfunction generateSampleSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push(\"outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);\");\n  } else {\n    src.push(\"switch vTextureId {\");\n    for (let i = 0; i < maxTextures; i++) {\n      if (i === maxTextures - 1) {\n        src.push(`  default:{`);\n      } else {\n        src.push(`  case ${i}:{`);\n      }\n      src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n      src.push(`      break;}`);\n    }\n    src.push(`}`);\n  }\n  return src.join(\"\\n\");\n}\nfunction generateTextureBatchBit(maxTextures) {\n  if (!textureBatchBitGpuCache[maxTextures]) {\n    textureBatchBitGpuCache[maxTextures] = {\n      name: \"texture-batch-bit\",\n      vertex: {\n        header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${generateBindingSrc(maxTextures)}\n            `,\n        main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${generateSampleSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGpuCache[maxTextures];\n}\nconst textureBatchBitGlCache = {};\nfunction generateSampleGlSrc(maxTextures) {\n  const src = [];\n  for (let i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src.push(\"else\");\n    }\n    if (i < maxTextures - 1) {\n      src.push(`if(vTextureId < ${i}.5)`);\n    }\n    src.push(\"{\");\n    src.push(`\toutColor = texture(uTextures[${i}], vUV);`);\n    src.push(\"}\");\n  }\n  return src.join(\"\\n\");\n}\nfunction generateTextureBatchBitGl(maxTextures) {\n  if (!textureBatchBitGlCache[maxTextures]) {\n    textureBatchBitGlCache[maxTextures] = {\n      name: \"texture-batch-bit\",\n      vertex: {\n        header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${maxTextures}];\n\n            `,\n        main: `\n\n                ${generateSampleGlSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGlCache[maxTextures];\n}\n\nexport { generateTextureBatchBit, generateTextureBatchBitGl };\n\n", "\"use strict\";\nconst roundPixelsBit = {\n  name: \"round-pixels-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\nconst roundPixelsBitGl = {\n  name: \"round-pixels-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\n\nexport { roundPixelsBit, roundPixelsBitGl };\n\n", "\"use strict\";\nconst UNIFORM_TYPES_VALUES = [\n  \"f32\",\n  \"i32\",\n  \"vec2<f32>\",\n  \"vec3<f32>\",\n  \"vec4<f32>\",\n  \"mat2x2<f32>\",\n  \"mat3x3<f32>\",\n  \"mat4x4<f32>\",\n  \"mat3x2<f32>\",\n  \"mat4x2<f32>\",\n  \"mat2x3<f32>\",\n  \"mat4x3<f32>\",\n  \"mat2x4<f32>\",\n  \"mat3x4<f32>\"\n];\nconst UNIFORM_TYPES_MAP = UNIFORM_TYPES_VALUES.reduce((acc, type) => {\n  acc[type] = true;\n  return acc;\n}, {});\n\nexport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES };\n\n", "\"use strict\";\nfunction getDefaultUniformValue(type, size) {\n  switch (type) {\n    case \"f32\":\n      return 0;\n    case \"vec2<f32>\":\n      return new Float32Array(2 * size);\n    case \"vec3<f32>\":\n      return new Float32Array(3 * size);\n    case \"vec4<f32>\":\n      return new Float32Array(4 * size);\n    case \"mat2x2<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case \"mat3x3<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case \"mat4x4<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\nexport { getDefaultUniformValue };\n\n", "import { uid } from '../../../../utils/data/uid.mjs';\nimport { createIdFromString } from '../utils/createIdFromString.mjs';\nimport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES } from './types.mjs';\nimport { getDefaultUniformValue } from './utils/getDefaultUniformValue.mjs';\n\n\"use strict\";\nconst _UniformGroup = class _UniformGroup {\n  /**\n   * Create a new Uniform group\n   * @param uniformStructures - The structures of the uniform group\n   * @param options - The optional parameters of this uniform group\n   */\n  constructor(uniformStructures, options) {\n    /** used internally to know if a uniform group was used in the last render pass */\n    this._touched = 0;\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"uniform\");\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    this._resourceType = \"uniformGroup\";\n    /** the resource id used internally by the renderer to build bind group keys */\n    this._resourceId = uid(\"resource\");\n    /** used ito identify if this is a uniform group */\n    this.isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    this._dirtyId = 0;\n    // implementing the interface - UniformGroup are not destroyed\n    this.destroyed = false;\n    options = { ..._UniformGroup.defaultOptions, ...options };\n    this.uniformStructures = uniformStructures;\n    const uniforms = {};\n    for (const i in uniformStructures) {\n      const uniformData = uniformStructures[i];\n      uniformData.name = i;\n      uniformData.size = uniformData.size ?? 1;\n      if (!UNIFORM_TYPES_MAP[uniformData.type]) {\n        throw new Error(`Uniform type ${uniformData.type} is not supported. Supported uniform types are: ${UNIFORM_TYPES_VALUES.join(\", \")}`);\n      }\n      uniformData.value ?? (uniformData.value = getDefaultUniformValue(uniformData.type, uniformData.size));\n      uniforms[i] = uniformData.value;\n    }\n    this.uniforms = uniforms;\n    this._dirtyId = 1;\n    this.ubo = options.ubo;\n    this.isStatic = options.isStatic;\n    this._signature = createIdFromString(Object.keys(uniforms).map(\n      (i) => `${i}-${uniformStructures[i].type}`\n    ).join(\"-\"), \"uniform-group\");\n  }\n  /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n  update() {\n    this._dirtyId++;\n  }\n};\n/** The default options used by the uniform group. */\n_UniformGroup.defaultOptions = {\n  /** if true the UniformGroup is handled as an Uniform buffer object. */\n  ubo: false,\n  /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n  isStatic: false\n};\nlet UniformGroup = _UniformGroup;\n\nexport { UniformGroup };\n\n", "import { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nconst batchSamplersUniformGroupHash = {};\nfunction getBatchSamplersUniformGroup(maxTextures) {\n  let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n  if (batchSamplersUniformGroup)\n    return batchSamplersUniformGroup;\n  const sampleValues = new Int32Array(maxTextures);\n  for (let i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n  batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n  }, { isStatic: true });\n  return batchSamplersUniformGroup;\n}\n\nexport { getBatchSamplersUniformGroup };\n\n", "\"use strict\";\nvar RendererType = /* @__PURE__ */ ((RendererType2) => {\n  RendererType2[RendererType2[\"WEBGL\"] = 1] = \"WEBGL\";\n  RendererType2[RendererType2[\"WEBGPU\"] = 2] = \"WEBGPU\";\n  RendererType2[RendererType2[\"BOTH\"] = 3] = \"BOTH\";\n  return RendererType2;\n})(RendererType || {});\n\nexport { RendererType };\n\n", "import EventEmitter from 'eventemitter3';\nimport { GlProgram } from '../../gl/shader/GlProgram.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from './UniformGroup.mjs';\n\n\"use strict\";\nclass Shader extends EventEmitter {\n  constructor(options) {\n    super();\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    this._uniformBindMap = /* @__PURE__ */ Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram)\n        compatibleRenderers |= RendererType.WEBGPU;\n      if (glProgram)\n        compatibleRenderers |= RendererType.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error(\"[Shader] Cannot have both resources and groups\");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error(\"[Shader] No group map or WebGPU shader provided - consider using resources instead.\");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach((data) => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      groups = {};\n      groupMap = {};\n      if (gpuProgram) {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupData.forEach((data) => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      let bindTick = 0;\n      for (const i in resources) {\n        if (nameHash[i])\n          continue;\n        if (!groups[99]) {\n          groups[99] = new BindGroup();\n          this._ownedBindGroups.push(groups[99]);\n        }\n        nameHash[i] = { group: 99, binding: bindTick, name: i };\n        groupMap[99] = groupMap[99] || {};\n        groupMap[99][bindTick] = i;\n        bindTick++;\n      }\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new UniformGroup(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new BindGroup();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new BindGroup();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit(\"destroy\", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach((bindGroup) => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\n\nexport { Shader };\n\n", "import { compileHighShaderGlProgram, compileHighShaderGpuProgram } from '../../high-shader/compileHighShaderToProgram.mjs';\nimport { colorBitGl, colorBit } from '../../high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBitGl, generateTextureBatchBit } from '../../high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBitGl, roundPixelsBit } from '../../high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../renderers/shared/shader/Shader.mjs';\n\n\"use strict\";\nclass DefaultShader extends Shader {\n  constructor(maxTextures) {\n    const glProgram = compileHighShaderGlProgram({\n      name: \"batch\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        roundPixelsBitGl\n      ]\n    });\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"batch\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        roundPixelsBit\n      ]\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { DefaultShader };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Batcher } from './Batcher.mjs';\nimport { BatchGeometry } from './BatchGeometry.mjs';\nimport { DefaultShader } from './DefaultShader.mjs';\n\n\"use strict\";\nlet defaultShader = null;\nconst _DefaultBatcher = class _DefaultBatcher extends Batcher {\n  constructor() {\n    super(...arguments);\n    this.geometry = new BatchGeometry();\n    this.shader = defaultShader || (defaultShader = new DefaultShader(this.maxTextures));\n    this.name = _DefaultBatcher.extension.name;\n    /** The size of one attribute. 1 = 32 bit. x, y, u, v, color, textureIdAndRound -> total = 6 */\n    this.vertexSize = 6;\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableMeshElement into the provided views.\n   * @param element - The DefaultBatchableMeshElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packAttributes(element, float32View, uint32View, index, textureId) {\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const { positions, uvs } = element;\n    const argb = element.color;\n    const offset = element.attributeOffset;\n    const end = offset + element.attributeSize;\n    for (let i = offset; i < end; i++) {\n      const i2 = i * 2;\n      const x = positions[i2];\n      const y = positions[i2 + 1];\n      float32View[index++] = a * x + c * y + tx;\n      float32View[index++] = d * y + b * x + ty;\n      float32View[index++] = uvs[i2];\n      float32View[index++] = uvs[i2 + 1];\n      uint32View[index++] = argb;\n      uint32View[index++] = textureIdAndRound;\n    }\n  }\n  /**\n   * Packs the attributes of a DefaultBatchableQuadElement into the provided views.\n   * @param element - The DefaultBatchableQuadElement to pack.\n   * @param float32View - The Float32Array view to pack into.\n   * @param uint32View - The Uint32Array view to pack into.\n   * @param index - The starting index in the views.\n   * @param textureId - The texture ID to use.\n   */\n  packQuadAttributes(element, float32View, uint32View, index, textureId) {\n    const texture = element.texture;\n    const wt = element.transform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = element.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = element.color;\n    const textureIdAndRound = textureId << 16 | element.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n};\n/** @ignore */\n_DefaultBatcher.extension = {\n  type: [\n    ExtensionType.Batcher\n  ],\n  name: \"default\"\n};\nlet DefaultBatcher = _DefaultBatcher;\n\nexport { DefaultBatcher };\n\n", "\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n\n", "\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n\n", "\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n}\n\nexport { BatchableSprite };\n\n", "import { nextPow2 } from '../../../../maths/misc/pow2.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new TextureSource({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: true\n    });\n    return new Texture({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = nextPow2(po2Width);\n    po2Height = nextPow2(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\n\nexport { TexturePool, TexturePoolClass };\n\n", "\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n\n"],
  "mappings": "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",
  "names": ["context", "EventEmitter", "i", "l", "j", "x", "y", "i", "p", "a", "b", "c", "n", "m", "e", "r", "a2", "b2", "j", "d", "a", "b", "EventEmitter", "r", "t", "n", "e", "u", "a", "o", "i", "s", "h", "r", "t", "n", "e", "u", "i", "a", "e", "f", "a", "r", "d", "l", "i", "n", "o", "t", "b", "c", "g", "u", "_Color", "v", "i", "r", "g", "b", "a", "x", "y", "p", "a", "b", "c", "d", "x", "y", "a2", "b2", "n", "x", "y", "p", "i", "i", "i", "c", "i", "i", "a", "b", "i", "x", "y", "s", "a", "b", "c", "d", "x", "y", "i", "i", "i", "i", "uid", "tempMatrix", "a", "b", "i", "i", "context", "_Ticker", "context", "count", "i", "j", "k", "v", "r", "_TextureStyle", "_TextureSource", "i", "x", "y", "x", "y", "i", "i", "i", "t", "_Batcher", "i", "i", "x", "y", "i", "idHash", "_GlProgram", "i", "i", "programCache", "i", "i", "i", "v", "a", "b", "i", "_UniformGroup", "i", "i", "i", "j", "_DefaultBatcher", "a", "b", "c", "d", "i", "i2", "x", "y", "_State", "i", "j"]
}
