{
  "version": 3,
  "sources": ["../../../../../node_modules/pixi.js/lib/filters/Filter.mjs", "../../../../../node_modules/pixi.js/lib/environment/autoDetectEnvironment.mjs", "../../../../../node_modules/pixi.js/lib/utils/browser/unsafeEvalSupported.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/system/SystemRunner.mjs", "../../../../../node_modules/pixi.js/lib/utils/utils.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/system/AbstractRenderer.mjs", "../../../../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/clearList.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/collectRenderGroups.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/mixHexColors.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs", "../../../../../node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs", "../../../../../node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs", "../../../../../node_modules/pixi.js/lib/utils/const.mjs", "../../../../../node_modules/pixi.js/lib/utils/global/globalHooks.mjs", "../../../../../node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs", "../../../../../node_modules/pixi.js/lib/filters/mask/mask.frag.mjs", "../../../../../node_modules/pixi.js/lib/filters/mask/mask.vert.mjs", "../../../../../node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs", "../../../../../node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs", "../../../../../node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/SchedulerSystem.mjs", "../../../../../node_modules/pixi.js/lib/utils/sayHello.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs", "../../../../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs"],
  "sourcesContent": ["import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    this._state = State.for2d();\n    this.blendMode = options.blendMode;\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/**\n * The default filter settings\n * @static\n */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false\n};\nlet Filter = _Filter;\n\nexport { Filter };\n\n", "import { extensions, ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nconst environments = [];\nextensions.handleByNamedList(ExtensionType.Environment, environments);\nasync function loadEnvironmentExtensions(skip) {\n  if (skip)\n    return;\n  for (let i = 0; i < environments.length; i++) {\n    const env = environments[i];\n    if (env.value.test()) {\n      await env.value.load();\n      return;\n    }\n  }\n}\nasync function autoDetectEnvironment(add) {\n  return loadEnvironmentExtensions(!add);\n}\n\nexport { autoDetectEnvironment, loadEnvironmentExtensions };\n\n", "\"use strict\";\nlet unsafeEval;\nfunction unsafeEvalSupported() {\n  if (typeof unsafeEval === \"boolean\") {\n    return unsafeEval;\n  }\n  try {\n    const func = new Function(\"param1\", \"param2\", \"param3\", \"return param1[param2] === param3;\");\n    unsafeEval = func({ a: \"b\" }, \"a\", \"b\") === true;\n  } catch (e) {\n    unsafeEval = false;\n  }\n  return unsafeEval;\n}\n\nexport { unsafeEvalSupported };\n\n", "\"use strict\";\nvar CLEAR = /* @__PURE__ */ ((CLEAR2) => {\n  CLEAR2[CLEAR2[\"NONE\"] = 0] = \"NONE\";\n  CLEAR2[CLEAR2[\"COLOR\"] = 16384] = \"COLOR\";\n  CLEAR2[CLEAR2[\"STENCIL\"] = 1024] = \"STENCIL\";\n  CLEAR2[CLEAR2[\"DEPTH\"] = 256] = \"DEPTH\";\n  CLEAR2[CLEAR2[\"COLOR_DEPTH\"] = 16640] = \"COLOR_DEPTH\";\n  CLEAR2[CLEAR2[\"COLOR_STENCIL\"] = 17408] = \"COLOR_STENCIL\";\n  CLEAR2[CLEAR2[\"DEPTH_STENCIL\"] = 1280] = \"DEPTH_STENCIL\";\n  CLEAR2[CLEAR2[\"ALL\"] = 17664] = \"ALL\";\n  return CLEAR2;\n})(CLEAR || {});\n\nexport { CLEAR };\n\n", "\"use strict\";\nclass SystemRunner {\n  /**\n   * @param name - The function name that will be executed on the listeners added to this Runner.\n   */\n  constructor(name) {\n    this.items = [];\n    this._name = name;\n  }\n  /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */\n  /**\n   * Dispatch/Broadcast Runner to all listeners added to the queue.\n   * @param {...any} params - (optional) parameters to pass to each listener\n   */\n  /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */\n  emit(a0, a1, a2, a3, a4, a5, a6, a7) {\n    const { name, items } = this;\n    for (let i = 0, len = items.length; i < len; i++) {\n      items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n    }\n    return this;\n  }\n  /**\n   * Add a listener to the Runner\n   *\n   * Runners do not need to have scope or functions passed to them.\n   * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n   * as the name provided to the Runner when it was created.\n   *\n   * Eg A listener passed to this Runner will require a 'complete' function.\n   *\n   * ```\n   * import { Runner } from 'pixi.js';\n   *\n   * const complete = new Runner('complete');\n   * ```\n   *\n   * The scope used will be the object itself.\n   * @param {any} item - The object that will be listening.\n   */\n  add(item) {\n    if (item[this._name]) {\n      this.remove(item);\n      this.items.push(item);\n    }\n    return this;\n  }\n  /**\n   * Remove a single listener from the dispatch queue.\n   * @param {any} item - The listener that you would like to remove.\n   */\n  remove(item) {\n    const index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n    }\n    return this;\n  }\n  /**\n   * Check to see if the listener is already in the Runner\n   * @param {any} item - The listener that you would like to check.\n   */\n  contains(item) {\n    return this.items.indexOf(item) !== -1;\n  }\n  /** Remove all listeners from the Runner */\n  removeAll() {\n    this.items.length = 0;\n    return this;\n  }\n  /** Remove all references, don't use after this. */\n  destroy() {\n    this.removeAll();\n    this.items = null;\n    this._name = null;\n  }\n  /**\n   * `true` if there are no this Runner contains no listeners\n   * @readonly\n   */\n  get empty() {\n    return this.items.length === 0;\n  }\n  /**\n   * The name of the runner.\n   * @readonly\n   */\n  get name() {\n    return this._name;\n  }\n}\n\nexport { SystemRunner };\n\n", "export { default as EventEmitter } from 'eventemitter3';\nexport { default as earcut } from 'earcut';\n\n\"use strict\";\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { loadEnvironmentExtensions } from '../../../../environment/autoDetectEnvironment.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport '../../../../utils/utils.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { SystemRunner } from './SystemRunner.mjs';\nimport EventEmitter from 'eventemitter3';\n\n\"use strict\";\nconst defaultRunners = [\n  \"init\",\n  \"destroy\",\n  \"contextChange\",\n  \"resolutionChange\",\n  \"reset\",\n  \"renderEnd\",\n  \"renderStart\",\n  \"render\",\n  \"update\",\n  \"postrender\",\n  \"prerender\"\n];\nconst _AbstractRenderer = class _AbstractRenderer extends EventEmitter {\n  /**\n   * Set up a system with a collection of SystemClasses and runners.\n   * Systems are attached dynamically to this class when added.\n   * @param config - the config for the system manager\n   */\n  constructor(config) {\n    super();\n    this.runners = /* @__PURE__ */ Object.create(null);\n    this.renderPipes = /* @__PURE__ */ Object.create(null);\n    this._initOptions = {};\n    this._systemsHash = /* @__PURE__ */ Object.create(null);\n    this.type = config.type;\n    this.name = config.name;\n    this.config = config;\n    const combinedRunners = [...defaultRunners, ...this.config.runners ?? []];\n    this._addRunners(...combinedRunners);\n    this._unsafeEvalCheck();\n  }\n  /**\n   * Initialize the renderer.\n   * @param options - The options to use to create the renderer.\n   */\n  async init(options = {}) {\n    const skip = options.skipExtensionImports === true ? true : options.manageImports === false;\n    await loadEnvironmentExtensions(skip);\n    this._addSystems(this.config.systems);\n    this._addPipes(this.config.renderPipes, this.config.renderPipeAdaptors);\n    for (const systemName in this._systemsHash) {\n      const system = this._systemsHash[systemName];\n      const defaultSystemOptions = system.constructor.defaultOptions;\n      options = { ...defaultSystemOptions, ...options };\n    }\n    options = { ..._AbstractRenderer.defaultOptions, ...options };\n    this._roundPixels = options.roundPixels ? 1 : 0;\n    for (let i = 0; i < this.runners.init.items.length; i++) {\n      await this.runners.init.items[i].init(options);\n    }\n    this._initOptions = options;\n  }\n  render(args, deprecated) {\n    let options = args;\n    if (options instanceof Container) {\n      options = { container: options };\n      if (deprecated) {\n        deprecation(v8_0_0, \"passing a second argument is deprecated, please use render options instead\");\n        options.target = deprecated.renderTexture;\n      }\n    }\n    options.target || (options.target = this.view.renderTarget);\n    if (options.target === this.view.renderTarget) {\n      this._lastObjectRendered = options.container;\n      options.clearColor = this.background.colorRgba;\n    }\n    if (options.clearColor) {\n      const isRGBAArray = Array.isArray(options.clearColor) && options.clearColor.length === 4;\n      options.clearColor = isRGBAArray ? options.clearColor : Color.shared.setValue(options.clearColor).toArray();\n    }\n    if (!options.transform) {\n      options.container.updateLocalTransform();\n      options.transform = options.container.localTransform;\n    }\n    this.runners.prerender.emit(options);\n    this.runners.renderStart.emit(options);\n    this.runners.render.emit(options);\n    this.runners.renderEnd.emit(options);\n    this.runners.postrender.emit(options);\n  }\n  /**\n   * Resizes the WebGL view to the specified width and height.\n   * @param desiredScreenWidth - The desired width of the screen.\n   * @param desiredScreenHeight - The desired height of the screen.\n   * @param resolution - The resolution / device pixel ratio of the renderer.\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    const previousResolution = this.view.resolution;\n    this.view.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.emit(\"resize\", this.view.screen.width, this.view.screen.height, this.view.resolution);\n    if (resolution !== void 0 && resolution !== previousResolution) {\n      this.runners.resolutionChange.emit(resolution);\n    }\n  }\n  clear(options = {}) {\n    const renderer = this;\n    options.target || (options.target = renderer.renderTarget.renderTarget);\n    options.clearColor || (options.clearColor = this.background.colorRgba);\n    options.clear ?? (options.clear = CLEAR.ALL);\n    const { clear, clearColor, target } = options;\n    Color.shared.setValue(clearColor ?? this.background.colorRgba);\n    renderer.renderTarget.clear(target, clear, Color.shared.toArray());\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.view.resolution;\n  }\n  set resolution(value) {\n    this.view.resolution = value;\n    this.runners.resolutionChange.emit(value);\n  }\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal.\n   * @member {number}\n   * @readonly\n   * @default 800\n   */\n  get width() {\n    return this.view.texture.frame.width;\n  }\n  /**\n   * Same as view.height, actual number of pixels in the canvas by vertical.\n   * @default 600\n   */\n  get height() {\n    return this.view.texture.frame.height;\n  }\n  // NOTE: this was `view` in v7\n  /**\n   * The canvas element that everything is drawn to.\n   * @type {environment.ICanvas}\n   */\n  get canvas() {\n    return this.view.canvas;\n  }\n  /**\n   * the last object rendered by the renderer. Useful for other plugins like interaction managers\n   * @readonly\n   */\n  get lastObjectRendered() {\n    return this._lastObjectRendered;\n  }\n  /**\n   * Flag if we are rendering to the screen vs renderTexture\n   * @readonly\n   * @default true\n   */\n  get renderingToScreen() {\n    const renderer = this;\n    return renderer.renderTarget.renderingToScreen;\n  }\n  /**\n   * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n   *\n   * Its safe to use as filterArea or hitArea for the whole stage.\n   */\n  get screen() {\n    return this.view.screen;\n  }\n  /**\n   * Create a bunch of runners based of a collection of ids\n   * @param runnerIds - the runner ids to add\n   */\n  _addRunners(...runnerIds) {\n    runnerIds.forEach((runnerId) => {\n      this.runners[runnerId] = new SystemRunner(runnerId);\n    });\n  }\n  _addSystems(systems) {\n    let i;\n    for (i in systems) {\n      const val = systems[i];\n      this._addSystem(val.value, val.name);\n    }\n  }\n  /**\n   * Add a new system to the renderer.\n   * @param ClassRef - Class reference\n   * @param name - Property name for system, if not specified\n   *        will use a static `name` property on the class itself. This\n   *        name will be assigned as s property on the Renderer so make\n   *        sure it doesn't collide with properties on Renderer.\n   * @returns Return instance of renderer\n   */\n  _addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name]) {\n      throw new Error(`Whoops! The name \"${name}\" is already in use`);\n    }\n    this[name] = system;\n    this._systemsHash[name] = system;\n    for (const i in this.runners) {\n      this.runners[i].add(system);\n    }\n    return this;\n  }\n  _addPipes(pipes, pipeAdaptors) {\n    const adaptors = pipeAdaptors.reduce((acc, adaptor) => {\n      acc[adaptor.name] = adaptor.value;\n      return acc;\n    }, {});\n    pipes.forEach((pipe) => {\n      const PipeClass = pipe.value;\n      const name = pipe.name;\n      const Adaptor = adaptors[name];\n      this.renderPipes[name] = new PipeClass(\n        this,\n        Adaptor ? new Adaptor() : null\n      );\n    });\n  }\n  destroy(options = false) {\n    this.runners.destroy.items.reverse();\n    this.runners.destroy.emit(options);\n    Object.values(this.runners).forEach((runner) => {\n      runner.destroy();\n    });\n    this._systemsHash = null;\n    this.renderPipes = null;\n  }\n  /**\n   * Generate a texture from a container.\n   * @param options - options or container target to use when generating the texture\n   * @returns a texture\n   */\n  generateTexture(options) {\n    return this.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Whether the renderer will round coordinates to whole pixels when rendering.\n   * Can be overridden on a per scene item basis.\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   * @ignore\n   */\n  _unsafeEvalCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n};\n/** The default options for the renderer. */\n_AbstractRenderer.defaultOptions = {\n  /**\n   * Default resolution / device pixel ratio of the renderer.\n   * @default 1\n   */\n  resolution: 1,\n  /**\n   * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported`\n   * function. If set to true, a WebGL renderer can fail to be created if the browser thinks there could be\n   * performance issues when using WebGL.\n   *\n   * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many\n   * scenarios as possible. However, some users may have a poor experience, for example, if a user has a gpu or\n   * driver version blacklisted by the\n   * browser.\n   *\n   * If your application requires high performance rendering, you may wish to set this to false.\n   * We recommend one of two options if you decide to set this flag to false:\n   *\n   * 1: Use the Canvas renderer as a fallback in case high performance WebGL is\n   *    not supported.\n   *\n   * 2: Call `isWebGLSupported` (which if found in the utils package) in your code before attempting to create a\n   *    PixiJS renderer, and show an error message to the user if the function returns false, explaining that their\n   *    device & browser combination does not support high performance WebGL.\n   *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat: false,\n  /**\n   * Should round pixels be forced when rendering?\n   * @default false\n   */\n  roundPixels: false\n};\nlet AbstractRenderer = _AbstractRenderer;\n\nexport { AbstractRenderer };\n\n", "\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n\n", "\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderGroup);\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.worldTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n\n", "\"use strict\";\nfunction buildInstructions(renderGroup, rendererOrPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  const renderPipes = renderer.renderPipes;\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererOrPipes) {\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, renderer);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderer) {\n  if (container.renderPipeId) {\n    const { renderPipes, renderableGC } = renderer;\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n    renderableGC.addRenderable(container, instructionSet);\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderer);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderer, isRoot) {\n  const { renderPipes, renderableGC } = renderer;\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n      renderableGC.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderer);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\nexport { buildInstructions, collectAllRenderables };\n\n", "\"use strict\";\nfunction clearList(list, index) {\n  index || (index = 0);\n  for (let j = index; j < list.length; j++) {\n    if (list[j]) {\n      list[j] = null;\n    } else {\n      break;\n    }\n  }\n}\n\nexport { clearList };\n\n", "\"use strict\";\nfunction collectRenderGroups(renderGroup, out = []) {\n  out.push(renderGroup);\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n  }\n  return out;\n}\n\nexport { collectRenderGroups };\n\n", "\"use strict\";\nfunction mixHexColors(color1, color2, ratio) {\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 + (r2 - r1) * ratio;\n  const g = g1 + (g2 - g1) * ratio;\n  const b = b1 + (b2 - b1) * ratio;\n  return (r << 16) + (g << 8) + b;\n}\n\nexport { mixHexColors };\n\n", "import { mixHexColors } from './mixHexColors.mjs';\n\n\"use strict\";\nconst WHITE_BGR = 16777215;\nfunction mixColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    return localBGRColor + parentBGRColor - WHITE_BGR;\n  }\n  return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\nfunction mixStandardAnd32BitColors(localColorRGB, localAlpha, parentColor) {\n  const parentAlpha = (parentColor >> 24 & 255) / 255;\n  const globalAlpha = localAlpha * parentAlpha * 255;\n  const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n  const parentBGRColor = parentColor & 16777215;\n  let sharedBGRColor;\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n  } else {\n    sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n  }\n  return sharedBGRColor + (globalAlpha << 24);\n}\n\nexport { mixColors, mixStandardAnd32BitColors };\n\n", "import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { clearList } from './clearList.mjs';\nimport { mixColors } from './mixColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = mixColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = mixColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n\n", "\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { collectRenderGroups } from './utils/collectRenderGroups.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      } else {\n        clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderer);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\nfunction updateRenderables(renderGroup) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n  clearList(list, index);\n}\n\nexport { RenderGroupSystem };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite._batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.transform = sprite.groupTransform;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite._didSpriteUpdate = false;\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n\n", "export { default as EventEmitter } from 'eventemitter3';\n\n\"use strict\";\nconst DATA_URI = /^\\s*data:(?:([\\w-]+)\\/([\\w+.-]+))?(?:;charset=([\\w-]+))?(?:;(base64))?,(.*)/i;\nconst VERSION = \"8.4.0\";\n\nexport { DATA_URI, VERSION };\n\n", "import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { VERSION } from '../const.mjs';\n\n\"use strict\";\nclass ApplicationInitHook {\n  static init() {\n    globalThis.__PIXI_APP_INIT__?.(this, VERSION);\n  }\n  static destroy() {\n  }\n}\n/** @ignore */\nApplicationInitHook.extension = ExtensionType.Application;\nclass RendererInitHook {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  init() {\n    globalThis.__PIXI_RENDERER_INIT__?.(this._renderer, VERSION);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRendererInitHook.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"initHook\",\n  priority: -10\n};\n\nexport { ApplicationInitHook, RendererInitHook };\n\n", "import { ExtensionType, extensions } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { DefaultBatcher } from './DefaultBatcher.mjs';\n\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */ Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */ Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher());\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */ Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\nextensions.add(DefaultBatcher);\n\nexport { BatcherPipe };\n\n", "var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n\";\n\nexport { fragment as default };\n\n", "var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n\n", "var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}\";\n\nexport { source as default };\n\n", "import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../renderers/types.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY),\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false,\n      maskedContainer\n    });\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n\n", "import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n\n", "import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new RenderTexture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n\n", "import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n\n", "import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration) {\n    const id = uid++;\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"scheduler\",\n  priority: 0\n};\n\nexport { SchedulerSystem };\n\n", "import { DOMAdapter } from '../environment/adapter.mjs';\nimport { VERSION } from './const.mjs';\n\n\"use strict\";\nlet saidHello = false;\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { sayHello };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._managedRenderables = [];\n    this._renderer = renderer;\n  }\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  get enabled() {\n    return !!this._handler;\n  }\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n    }\n  }\n  prerender() {\n    this._now = performance.now();\n  }\n  addRenderable(renderable, instructionSet) {\n    if (!this.enabled)\n      return;\n    renderable._lastUsed = this._now;\n    if (renderable._lastInstructionTick === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastInstructionTick = instructionSet.tick;\n  }\n  /** Runs the scheduled garbage collection */\n  run() {\n    const now = performance.now();\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentIndex = renderGroup?.instructionSet?.tick ?? -1;\n      if (renderable._lastInstructionTick !== currentIndex && now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastInstructionTick = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length = managedRenderables.length - offset;\n  }\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n  }\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n};\n/** @ignore */\n_RenderableGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\"\n};\n/** default options for the renderableGCSystem */\n_RenderableGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  renderableGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  renderableGCMaxUnusedTime: 6e4,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexport { RenderableGCSystem };\n\n", "import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystem.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexport { TextureGCSystem };\n\n", "import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n\n", "import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n\n", "import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * @member {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n\n", "import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { SchedulerSystem } from '../SchedulerSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook,\n  RenderableGCSystem,\n  SchedulerSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n\n", "import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    data || (data = uniformGroup.buffer.data);\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n\n", "\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n\n", "import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n\n", "\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        data[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n\n", "import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n\n", "import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n\n", "import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n\n", "\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n\n", "\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n\n", "import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  postrender() {\n    this.adaptor.postrender?.(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\nexport { RenderTargetSystem };\n\n"],
  "mappings": "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",
  "names": ["_Filter", "_AbstractRenderer", "_BatcherPipe", "_BackgroundSystem", "_ExtractSystem", "tempBounds", "uid", "_RenderableGCSystem", "_TextureGCSystem", "_RenderTarget", "source", "_ViewSystem", "source"]
}
